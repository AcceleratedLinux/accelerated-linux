#
#	Build a accelerated Linux distribution source package from git tree.
#
#	(C) Copyright 1999-2018, Greg Ungerer <greg.ungerer@accelerated.com>
#
#	Takes a git tree as source and builds a accelerated package.
#

NAME=accelerated
SOURCE=${1:-accelerated.working}
PKGDIR=images

#
#	KEEP_BOOT=true
#	KEEP_IXP_MODULES=true
#	KEEP_OCF_MODULES=true
#	KEEP_PROP=true
#	KEEP_MODULE_CONFIGS=true
#

# If we keep crypto or ixp modules, we need to keep the module configs too.
[ "$KEEP_CRYPTO" = "true" -o "$KEEP_IXP_MODULES" = "true" ] && KEEP_MODULE_CONFIGS=true


DATE=`date +%Y%m%d`
PACKAGE=${NAME}-${DATE}

DIRS="README SOURCE COPYING Documentation Makefile config linux openswan lib glibc uClibc uClibc-ng musl user include tools vendors bin"

[ "$KEEP_PROP" = "true" ] && DIRS="$DIRS prop"
[ "$KEEP_BOOT" = "true" ] && DIRS="$DIRS boot"

CURPWD=`pwd`
SRCDIR=${CURPWD}/${SOURCE}
DSTDIR=${CURPWD}/${NAME}
SLASHPKGDIR=${CURPWD}/${PKGDIR}/.


#
#	Check if target directory exists, bail if it does.
#
if [ -d "${DSTDIR}" ]
then
	echo "ERROR: directory ${DSTDIR} exists, stopping now!"
	exit 1
fi


#
#	Remove any old current images hanging around...
#
[ -d ${SLASHPKGDIR} ] || mkdir -p ${SLASHPKGDIR}
rm -f ${SLASHPKGDIR}/${PACKAGE}*


#
#	Start creating new directory
#
echo "Creating ${DSTDIR} directory..."
mkdir ${DSTDIR}
cd ${SRCDIR}
echo "Copying ${SRCDIR} to ${DSTDIR}..."
find ${DIRS} -print | grep -v CVS | cpio -pmd ${DSTDIR}

if [ "$KEEP_MODULE_CONFIGS" = "true" ]; then
	echo "Copying module dir configs..."
	mkdir -p ${DSTDIR}/modules
	head -9 ${SRCDIR}/modules/Kconfig > ${DSTDIR}/modules/Kconfig
	sed -e ':b /\\$/{ ; N ; s/\\\n// ; bb ; }' ${SRCDIR}/modules/Makefile |\
		sed -e "s/^subdir-m.*$/subdir-m := /" \
		> ${DSTDIR}/modules/Makefile
fi

if [ "$KEEP_OCF_MODULES" = "true" ]; then
	echo "Copying modules/ocf..."
	find modules/ocf -print | grep -v CVS | cpio -pd ${DSTDIR}
	find ${DSTDIR}/modules/ocf -name "*.o" | xargs rm -f
	echo "source ocf/Kconfig" >> ${DSTDIR}/modules/Kconfig
	cp ${DSTDIR}/modules/Makefile ${DSTDIR}/modules/Makefile.bak
	sed -e "s/^subdir-m := /subdir-m := ocf /" \
		${DSTDIR}/modules/Makefile.bak \
		> ${DSTDIR}/modules/Makefile
	rm ${DSTDIR}/modules/Makefile.bak
	cp ${SRCDIR}/prop/include/octeon-asm.h ${DSTDIR}/modules/ocf/cryptocteon/
else
	cd ${DSTDIR}
	find vendors -name "config.linux*" |
	while read FILE
	do
		cp ${FILE} ${FILE}.org
		sed -e "s/CONFIG_KLIPS_OCF=y/# CONFIG_KLIPS_OCF is not set/g" \
		    ${FILE}.org > ${FILE}
		rm -f ${FILE}.org
	done
	sed -e "s/bool '   IPsec: OCF HW Acceleration support' CONFIG_KLIPS_OCF//" \
		${SRCDIR}/openswan/linux/net/ipsec/Config.in.os2_4 \
		> ${DSTDIR}/openswan/linux/net/ipsec/Config.in.os2_4
	find vendors -name "config.vendor*" |
	while read FILE
	do
		cp ${FILE} ${FILE}.org
		sed -e "s/CONFIG_USER_CRYPTO_TOOLS_CRYPTOTEST=y/# CONFIG_USER_CRYPTO_TOOLS_CRYPTOTEST is not set/g" \
		    -e "s/CONFIG_USER_CRYPTO_TOOLS_CMACTEST=y/# CONFIG_USER_CRYPTO_TOOLS_CMACTEST is not set/g" \
		    -e "s/CONFIG_USER_CRYPTO_TOOLS_CRYPTOKEYTEST=y/# CONFIG_USER_CRYPTO_TOOLS_CRYPTOKEYTEST is not set/g" \
		    ${FILE}.org > ${FILE}
		rm -f ${FILE}.org
	done
	cd ${SRCDIR}
fi

if [ "$KEEP_IXP_MODULES" = "true" ]; then
	echo "Copying modules/ixp425..."
	find modules/ixp425 -print | grep -v CVS | cpio -pd ${DSTDIR}
	find ${DSTDIR}/modules/ixp425 -name "*.o" | grep -v dsr.o | xargs rm -f
	echo "source ixp425/Kconfig" >> ${DSTDIR}/modules/Kconfig
	cp ${DSTDIR}/modules/Makefile ${DSTDIR}/modules/Makefile.bak
	sed -e "s/^subdir-m := /subdir-m := ixp425 /" \
		${DSTDIR}/modules/Makefile.bak \
		> ${DSTDIR}/modules/Makefile
	rm ${DSTDIR}/modules/Makefile.bak
fi

if [ "$KEEP_PROP" != "true" ]; then
	cp ${DSTDIR}/config/Kconfig /tmp/
	grep -v prop /tmp/Kconfig > ${DSTDIR}/config/Kconfig
	cp ${DSTDIR}/config/Makefile /tmp/
	sed -e "s/\.\.\/prop\/Kconfig\.auto//g" < /tmp/Makefile |
		sed -e "s/\.\.\/prop\/Makefile\.auto//g" \
		> ${DSTDIR}/config/Makefile
fi


if [ "$KEEP_BOOT" != "true" ]; then
	cp ${DSTDIR}/config/Kconfig /tmp/
	grep -v boot /tmp/Kconfig > ${DSTDIR}/config/Kconfig
	cp ${DSTDIR}/config/Makefile /tmp/
	sed -e "s/\.\.\/boot\/Kconfig\.auto//g" < /tmp/Makefile |
		sed -e "s/\.\.\/boot\/Makefile\.auto//g" \
		> ${DSTDIR}/config/Makefile
fi

#
#       Remove all binaries, top level clean...
#
echo "Removing objects from ${DSTDIR}..."
cd ${DSTDIR}
make dep 2>&1 | cat > /tmp/dep
echo "making clean ..."
make distclean 2>&1 | cat > /tmp/clean
make -C linux distclean 2> /dev/null > /dev/null
make -C config/scripts clean 2> /dev/null > /dev/null
make -C config/scripts/lxdialog clean 2> /dev/null > /dev/null
find linux -name ".*.cmd" | xargs rm -f
rm -f linux/scripts/kconfig/*.o
rm -f linux/scripts/kconfig/lex.zconf.c
rm -f linux/scripts/kconfig/zconf.hash.c
rm -f linux/scripts/kconfig/zconf.tab.c
rm -f linux/scripts/kconfig/conf
rm -f linux/scripts/basic/fixdep
rm -f linux/scripts/basic/docproc
rm -f linux/scripts/basic/hash
rm -rf linux/include/config
rm -f uClibc/extra/config/*.o
rm -f uClibc-ng/build uClibc-ng/downloads uClibc-ng/lib
cd ..


#
#	Remove mention of some vendors from configs...
#
echo "removing vendors..."
rm -rf ${DSTDIR}/vendors/ATT
rm -rf ${DSTDIR}/vendors/AcceleratedConcepts/Factory*
rm -rf ${DSTDIR}/vendors/AcceleratedConcepts/*[Ss]prite*
rm -rf ${DSTDIR}/vendors/AcceleratedConcepts/*[Pp]orter*


#
#	Remove other miscellaneous stuff...
#
echo "Cleaning out miscellaneous other stuff..."
cd ${DSTDIR}
find . -name errs -print | xargs rm -f
find . -name .depend -print | xargs rm -f
find . -name .depend.embed -print | xargs rm -f
find . -name .version -print | xargs rm -f
find . -name .svn -print | xargs rm -rf
find user/iptables -name "*.d" | xargs rm -f
rm -f linux-2.?.x/.config*
rm -f linux-2.?.x/include/linux/autoconf.h
rm -f linux-2.?.x/include/asm
rm -f linux-2.?.x/include/asm-arm/arch
rm -f linux-2.?.x/include/asm-arm/proc
rm -f .config config.arch
rm -f config/autoconf.h config/.config config/.config.old
rm -rf vendors/.config vendors/.config.old
rm -rf vendors/Hitachi/dsp
rm -f user/iptables/.makefirst
rm -f images/*
rm -rf romfs
rm -rf tools/c++ tools/gcc-* tools/misc/gcc-include
rm -f tools/misc/pivio*
rm -f tools/misc/nap5272.gdb
rm -f tools/misc/*.hdc
rm -rf tools/misc/mips/sg590.majic
rm -f lib/uClibc lib/uClibc-ng lib/glibc lib/musl
rm -f uClibc/.config*
rm -f uClibc-ng/.config*
rm -f uClibc/extra/config/conf uClibc/extra/config/zconf.tab.[ch]
rm -f uClibc/extra/config/lex.zconf.c uClibc/extra/config/lkc_defs.h
rm -rf uClibc/include/bits
rm -f uClibc/include/fpu_control.h uClibc/include/net/bpf.h

if [ "$KEEP_MODULE_CONFIGS" != "true" ]; then
	find vendors -name config.modules | xargs rm -f
fi

#
#	Remove private vendor names from config files.
#
cd ${DSTDIR}
find vendors -name "config.device*" |
while read FILE
do
	grep -v "CONFIG_DEFAULTS_FOO_" ${SRCDIR}/${FILE} | \
	    grep -v "CONFIG_DEFAULTS_FOOBAR_" \
	    > ${DSTDIR}/${FILE}
done

#
#	Remove PROP and other unwanted config entries.
#
cd ${DSTDIR}
find vendors -name "config.vendor*" |
while read FILE
do
	grep -v "CONFIG_PROP_" ${DSTDIR}/${FILE} | \
	    grep -v "CONFIG_USER_NETSNMP_ADDITIONAL" \
	    > /tmp/config.vendor
	sed -e "s/CONFIG_USER_NETSNMP_ADDMIBS=y/# CONFIG_USER_NETSNMP_ADDMIBS=y is not set/g" \
	    /tmp/config.vendor > ${DSTDIR}/${FILE}
	rm -f /tmp/config.vendor
done

#
#	Change some permissions, so they look nice.
#
chmod 775 ${DSTDIR}/bin/*

#
#	Fix up some autogen files so they don't get rebuilt.
#
touch ${DSTDIR}/user/mawk/array.[ch]

echo "Packaging ${DSTDIR}..."
cd ${CURPWD}
tar cf ${PACKAGE}.tar ${NAME}
echo "gziping ${PACKAGE}.tar..."
bzip2 -9 -k ${PACKAGE}.tar
gzip -9 ${PACKAGE}.tar

mv ${PACKAGE}.tar.gz ${PACKAGE}.tar.bz2 ${PKGDIR}

exit 0
