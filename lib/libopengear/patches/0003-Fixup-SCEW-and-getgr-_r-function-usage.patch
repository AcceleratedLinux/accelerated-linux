From 7e9d59a114ea517796a4366e3cf05029a5b871b2 Mon Sep 17 00:00:00 2001
From: Ken Wilson <ken.wilson@opengear.com>
Date: Thu, 2 Jul 2020 08:17:14 +1000
Subject: [PATCH 3/3] Fixup SCEW and getgr*_r function usage

---
 lib/libopengear/src/alert.c     |   4 +-
 lib/libopengear/src/pmctl.c     | 103 ++++++++++++++++++-----------
 lib/libopengear/src/portusers.c |  16 +++--
 lib/libopengear/src/users.c     | 113 ++++++++------------------------
 lib/libopengear/src/xml.c       |  11 ++--
 lib/libopengear/src/xmldb.c     |  44 ++++++++-----
 6 files changed, 142 insertions(+), 149 deletions(-)

diff --git a/lib/libopengear/src/alert.c b/lib/libopengear/src/alert.c
index f3e105d..1279dbe 100755
--- a/lib/libopengear/src/alert.c
+++ b/lib/libopengear/src/alert.c
@@ -19,10 +19,10 @@ static int responseReceived = 0;
 static unsigned int
 alert_callback(scew_parser *parser)
 {
-	scew_tree *tree = scew_parser_tree(parser);
+	scew_tree *tree = parser->scew_tree;
 	scew_element *root = scew_tree_root(tree);
 	if (root != NULL) {
-		scew_element * resp = scew_element_next(root, NULL);
+		scew_element * resp = scew_element_by_index(root, 0);
 		if( !resp ) {
 			return 1;
 		}
diff --git a/lib/libopengear/src/pmctl.c b/lib/libopengear/src/pmctl.c
index cdeecee..344480c 100755
--- a/lib/libopengear/src/pmctl.c
+++ b/lib/libopengear/src/pmctl.c
@@ -11,6 +11,7 @@
 #include <paths.h>
 #include <libgen.h>
 #include <stdbool.h>
+#include <stdio.h>
 #include <poll.h>
 
 #include <scew/scew.h>
@@ -124,10 +125,10 @@ static void *pmctl_rpc_cbptr;
 static int pmctl_rpc_rc;
 static bool pmctl_rpc_done;
 
-static unsigned int
-pmctl_rpc_callback(scew_parser *parser)
+static bool
+pmctl_rpc_callback(scew_parser *parser, void *data, void *user_data)
 {
-	scew_tree *tree = scew_parser_tree(parser);
+	scew_tree *tree = (scew_tree *)data;
 	scew_element *root = scew_tree_root(tree);
 	if (root != NULL) {
 		pmctl_rpc_done = true;
@@ -135,7 +136,7 @@ pmctl_rpc_callback(scew_parser *parser)
 			pmctl_rpc_rc = (*pmctl_rpc_cb)(pmctl_rpc_cbptr, tree);
 		}
 	}
-	return (1);
+	return (true);
 }
 
 static int
@@ -145,7 +146,7 @@ pmctl_reserve_callback(void *ptr, const scew_tree *tree)
 	scew_element *response = NULL;
 
 	ptr = NULL;
-	response = scew_element_next(root, NULL);
+	response = scew_element_by_index(root, 0);
 	if (response != NULL &&
 		strcmp(scew_element_name(response), "success") == 0) {
 		return (0);
@@ -226,7 +227,7 @@ pmctl_reserve_cmd(
 		goto onexit;
 	}
 
-	root = scew_tree_add_root(request, "command");
+	root = scew_tree_set_root(request, "command");
 	if (root == NULL) {
 		goto onexit;
 	}
@@ -265,30 +266,41 @@ int
 pmctl_xml_request(pmctl_t *pm, const scew_tree *request,
     int (*func)(void *, const scew_tree *), void *cbptr)
 {
+	char *memptr = NULL;
+	size_t memsize = 0;
+	FILE *fp = open_memstream(&memptr, &memsize);
+	size_t wlen = 0;
+        if (fp == NULL) {
+                return (-1);
+        }
+	scew_reader *reader = NULL;
 	scew_parser *parser = scew_parser_create();
-	int error = 0;
+	scew_writer *writer = scew_writer_fp_create(fp);
+	scew_printer *printer = scew_printer_create(writer);
+	pmctl_rpc_cb = func;
+	pmctl_rpc_cbptr = cbptr;
+	pmctl_rpc_done = false;
 
-	if (parser == NULL) {
+	if (parser == NULL || writer == NULL || printer == NULL) {
 		goto fail;
 	}
 
-	if (!scew_writer_tree_fp(request, pm->cmdfp)) {
+	if (!scew_printer_print_tree(printer, request)) {
 		fprintf(stderr, "Failed to send XML request\n");
 		goto fail;
 	}
 
-	fflush(pm->cmdfp);
-	scew_parser_set_stream_callback(parser, pmctl_rpc_callback);
-
-	pmctl_rpc_cb = func;
-	pmctl_rpc_cbptr = cbptr;
-	pmctl_rpc_done = false;
+	fflush(fp);
+	scew_parser_set_tree_hook(parser, (scew_parser_load_hook)pmctl_rpc_callback, NULL);
+	wlen = write(pm->cmdfd, memptr, memsize);
+	if (wlen < 0) {
+		return (-1);
+	}
 
 	while (!pmctl_rpc_done) {
-		char buf[100];
+		char buf[8 * 1024];
 		struct pollfd pfd;
 		ssize_t rlen;
-
 		/*
 		 * Wait for the response - error if it isn't timely
 		 */
@@ -304,29 +316,46 @@ pmctl_xml_request(pmctl_t *pm, const scew_tree *request,
 			goto fail;
 		}
 
-		rlen = recv(pm->cmdfd, buf, sizeof(buf), 0);
-		if (rlen <= 0) {
-			fprintf(stderr, "Failure while reading XML reply\n");
-			goto fail;
+ 		rlen = recv(pm->cmdfd, buf, sizeof(buf), 0);
+ 		if (rlen <= 0) {
+ 			fprintf(stderr, "Failure while reading XML reply\n");
 		}
-		scew_parser_load_stream(parser, buf, rlen);
-	}
-
-	scew_parser_free(parser);
-
-	return (pmctl_rpc_rc);
-
-fail:
-	if (error == 0) {
-		error = errno;
+		reader = scew_reader_buffer_create(buf, rlen);
+		if (reader == NULL) {
+ 			goto fail;
+ 		}
+		scew_parser_load_stream(parser, reader);
+		scew_reader_free(reader);
+ 	}
+ 
+	scew_printer_free(printer);
+	scew_writer_free(writer);
+ 	scew_parser_free(parser);
+	pmctl_rpc_cb = NULL;
+	pmctl_rpc_cbptr = NULL;
+	pmctl_rpc_done = false;
+ 
+ 	return (pmctl_rpc_rc);
+ fail:
+	pmctl_rpc_cb = NULL;
+	pmctl_rpc_cbptr = NULL;
+	pmctl_rpc_done = false;
+	if (printer != NULL) {
+		scew_printer_free(printer);
 	}
-	if (parser != NULL) {
-		scew_parser_free(parser);
+	if (writer != NULL) {
+		scew_writer_free(writer);
 	}
-
-	errno = error;
-	return (-1);
-}
+	if (reader != NULL) {
+		scew_reader_free(reader);
+ 	}
+ 	if (parser != NULL) {
+ 		scew_parser_free(parser);
+ 	}
+ 
+ 	return (-1);
+ }
+ 
 
 static void
 xbasename(const char *src, char *dst, size_t len)
diff --git a/lib/libopengear/src/portusers.c b/lib/libopengear/src/portusers.c
index 62f1d1f..ba20403 100755
--- a/lib/libopengear/src/portusers.c
+++ b/lib/libopengear/src/portusers.c
@@ -26,12 +26,15 @@ static int get_port_users_cb(void *ptr, const scew_tree *tree)
 	struct portusers *portusers = (struct portusers *)ptr;
 	scew_element *root = scew_tree_root(tree);
 	scew_element *port = NULL;
-
-	while ((port = scew_element_next(root, port)) != NULL) {
+    int i, num_ports;
+    num_ports = scew_element_count(root);
+    for (i = 0; i < num_ports; i++) {
+        port = scew_element_by_index(root, i);
 		scew_element *users = scew_element_by_name(port, "users");
 		scew_element *number = scew_element_by_name(port, "port");
 		scew_element *label = scew_element_by_name(port, "label");
 		scew_element *user = NULL;
+        int j, num_users;
 		const char *labelvalue = NULL;
 		int portnum = 0;
 
@@ -42,8 +45,9 @@ static int get_port_users_cb(void *ptr, const scew_tree *tree)
 		if (label) {
 			labelvalue = scew_xml_string(label);
 		}
-
-		while ((user = scew_element_next(users, user)) != NULL) {
+        num_users = scew_element_count(users);
+        for (j = 0; j < num_users; j++) {
+            user = scew_element_by_index(users, j);
 			scew_element *name = NULL;
 			const char *namevalue = NULL;
 
@@ -85,7 +89,7 @@ bool opengear_get_port_users(struct portusers *users)
 		return false;
 	}
 
-	root = scew_tree_add_root(request, "command");
+	root = scew_tree_set_root(request, "command");
 	if (!root) {
 		goto out;
 	}
@@ -205,7 +209,7 @@ int opengear_disconnect_port_users(const char *name, const int port, int *count)
 		return -1;
 	}
 
-	root = scew_tree_add_root(request, "command");
+	root = scew_tree_set_root(request, "command");
 	if (!root) {
 		goto out;
 	}
diff --git a/lib/libopengear/src/users.c b/lib/libopengear/src/users.c
index 77f61cf..6f26efe 100644
--- a/lib/libopengear/src/users.c
+++ b/lib/libopengear/src/users.c
@@ -201,7 +201,8 @@ user_create(struct user **userp, xmldb_t *db, struct passwd *pw)
 	const scew_element *parent = NULL, *elem = NULL;
 	size_t i, total = 0;
 	struct user *u = NULL;
-
+	scew_list *ports = NULL;
+	scew_list *port_elem = NULL;
 	/* Peruse config for the specified user configuration */
 	total = xmldb_getsize(db, "config.users", "total");
 	for (i = 1; i <= total; ++i) {
@@ -249,8 +250,12 @@ user_create(struct user **userp, xmldb_t *db, struct passwd *pw)
 
 	/* Load accessible serial RPC outlets */
 	parent = xmldb_subtree(db, "ports");
-	while (parent != NULL &&
-			(elem = scew_element_next(parent, elem)) != NULL) {
+	if (parent != NULL) {
+		ports = scew_element_children(parent);
+	}
+	port_elem = ports;
+	while ((port_elem = scew_list_next(port_elem)) != NULL) {
+		elem = scew_list_data(port_elem);
 		const char *name = scew_element_name(elem);
 		unsigned int portnum, len = sizeof("port") - 1;
 		char id[sizeof("config.ports." OG_MAX_PORTDEV)];
@@ -361,7 +366,7 @@ usergroup_create(struct usergroup **usergroupp, xmldb_t *db, struct group *gr)
 	const scew_element *parent = NULL, *elem = NULL;
 	size_t i, total = 0;
 	struct usergroup *g = NULL;
-
+	scew_list *ports = NULL, *port_elem = NULL;
 	/* Hunt config.groups for an existing group with name gr->gr_name */
 	total = xmldb_getsize(db, "config.groups", "total");
 	for (i = 1; i <= total; ++i) {
@@ -410,8 +415,12 @@ usergroup_create(struct usergroup **usergroupp, xmldb_t *db, struct group *gr)
 
 	/* Load accessible serial RPC outlets */
 	parent = xmldb_subtree(db, "ports");
-	while (parent != NULL &&
-			(elem = scew_element_next(parent, elem)) != NULL) {
+	if (parent != NULL) {
+		ports = scew_element_children(parent);
+	}
+	port_elem = ports;
+	while ((port_elem = scew_list_next(port_elem)) != NULL) {
+		elem = scew_list_data(port_elem);
 		const char *name = scew_element_name(elem);
 		unsigned int portnum, len = sizeof("port") - 1;
 		char id[sizeof("config.ports." OG_MAX_PORTDEV)];
@@ -594,7 +603,6 @@ opengear_users_load_permissions(xmldb_t *db, uid_t uid, gid_t gid)
 {
 	struct opengear_users_permissions *perms;
 	bool failed = false;
-	char *buf = NULL;
 	roles_t roles = NULL;
 
 	perms = malloc(sizeof(struct opengear_users_permissions));
@@ -628,20 +636,14 @@ opengear_users_load_permissions(xmldb_t *db, uid_t uid, gid_t gid)
 
 	/* Create a group entry. This record will be used if there is no user id match but also */
 	/* used later as the first item when iterating over the getgrent list. */
-	struct group gr, *grp = NULL;
-	buf = calloc(MAXBUFLEN, sizeof(*buf));
-	if (!buf) {
-		perror("Failed to allocate getgrgid buffer");
-		failed = true;
-		goto onexit;
-	}
+	struct group *grp = NULL;
 
 	/* Check users credentials.*/
 	struct passwd *pw = getpwuid(uid);
 	if (pw == NULL) {
 		/* No user on system with the given id. */
 
-		if (getgrgid_r(gid, &gr, buf, MAXBUFLEN, &grp) == 0) {
+		if ((grp = getgrgid(gid)) != NULL) {
 			struct usergroup *usergroup = NULL;
 			(void)usergroup_create(&usergroup, db, grp);
 			/* Because there is no user for uid, the previous call to get_roles
@@ -663,7 +665,7 @@ opengear_users_load_permissions(xmldb_t *db, uid_t uid, gid_t gid)
 
 	/* Check group credentials.*/
 	setgrent();
-	while (getgrent_r(&gr, buf, MAXBUFLEN, &grp) == 0) {
+	while ((grp = getgrent()) == 0) {
 
 		if (!opengear_users_ispwingroup(pw, grp)) {
 			continue;
@@ -693,7 +695,6 @@ opengear_users_load_permissions(xmldb_t *db, uid_t uid, gid_t gid)
 	}
 onexit:
 	endgrent();
-	free(buf);
 	roles_free(&roles);
 	if (failed) {
 		opengear_users_destroy_permissions_data(perms);
@@ -818,27 +819,15 @@ grp_is_portadmin(xmldb_t *db, struct group *grp)
 static bool
 gid_isportallowed(xmldb_t *db, int port, gid_t gid, bool raise_admin)
 {
-	char *buf = NULL;
-	struct group gr, *grp = NULL;
+	struct group *grp = NULL;
 	bool permit = false;
 
-	buf = calloc(MAXBUFLEN, sizeof(*buf));
-	if (buf == NULL) {
-		perror("calloc");
-		goto onexit;
-	}
-
-	if (getgrgid_r(gid, &gr, buf, MAXBUFLEN, &grp) == 0
+	if (((grp = getgrgid(gid)) != NULL) 
 	    && grp_has_port(db, grp, port, raise_admin)) {
 		/* Group admitted on port */
 		permit = true;
 	}
 
-onexit:
-	if (buf != NULL) {
-		free(buf);
-	}
-
 #ifndef EMBED /* Always let them in when debugging */
 	return (true);
 #else
@@ -861,27 +850,16 @@ opengear_groups_isportvisible(xmldb_t *db, int port, gid_t gid)
 static bool
 gid_isportadmin(xmldb_t *db, gid_t gid)
 {
-	char *buf = NULL;
-	struct group gr, *grp = NULL;
+	struct group *grp = NULL;
 	bool permit = false;
 
-	buf = calloc(MAXBUFLEN, sizeof(*buf));
-	if (buf == NULL) {
-		perror("calloc");
-		goto onexit;
-	}
 
-	if (getgrgid_r(gid, &gr, buf, MAXBUFLEN, &grp) == 0
+	if (((grp = getgrgid(gid)) != NULL)
 	    && grp_is_portadmin(db, grp)) {
 		/* Group admitted on port */
 		permit = true;
 	}
 
-onexit:
-	if (buf != NULL) {
-		free(buf);
-	}
-
 #ifndef EMBED /* Always let them in when debugging */
 	return (true);
 #else
@@ -1048,27 +1026,16 @@ static bool
 gid_ishostallowed(xmldb_t *db, const char *address, gid_t gid,
 	bool raise_admin)
 {
-	char *buf = NULL;
-	struct group gr, *grp = NULL;
+	struct group *grp = NULL;
 	bool permit = false;
 
-	buf = calloc(MAXBUFLEN, sizeof(*buf));
-	if (buf == NULL) {
-		perror("calloc");
-		goto onexit;
-	}
 
-	if (getgrgid_r(gid, &gr, buf, MAXBUFLEN, &grp) == 0
+	if (((grp = getgrgid(gid)) != NULL)
 	    && grp_hasaddress(db, grp, address, raise_admin)) {
 		/* Group admitted to host */
 		permit = true;
 	}
 
-onexit:
-	if (buf != NULL) {
-		free(buf);
-	}
-
 #ifndef EMBED /* Always let them in when debugging */
 	return (true);
 #else
@@ -1258,27 +1225,15 @@ static bool
 gid_isoutletallowed(xmldb_t *db, const char *configpath, gid_t gid,
 	bool raise_admin)
 {
-	char *buf = NULL;
-	struct group gr, *grp = NULL;
+	struct group *grp = NULL;
 	bool permit = false;
 
-	buf = calloc(MAXBUFLEN, sizeof(*buf));
-	if (buf == NULL) {
-		perror("calloc");
-		goto onexit;
-	}
-
-	if (getgrgid_r(gid, &gr, buf, MAXBUFLEN, &grp) == 0
+	if (((grp = getgrgid(gid)) != NULL)
 	    && grp_hasoutlet(db, grp, configpath, raise_admin)) {
 		/* Group admitted to outlet */
 		permit = true;
 	}
 
-onexit:
-	if (buf != NULL) {
-		free(buf);
-	}
-
 #ifndef EMBED /* Always let them in when debugging */
 	return (true);
 #else
@@ -1512,27 +1467,15 @@ static bool
 gid_isrpcallowed(xmldb_t *db, const char *configpath, gid_t gid,
 	bool raise_admin)
 {
-	char *buf = NULL;
-	struct group gr, *grp = NULL;
+	struct group *grp = NULL;
 	bool permit = false;
 
-	buf = calloc(MAXBUFLEN, sizeof(*buf));
-	if (buf == NULL) {
-		perror("calloc");
-		goto onexit;
-	}
-
-	if (getgrgid_r(gid, &gr, buf, MAXBUFLEN, &grp) == 0
+	if (((grp = getgrgid(gid)) != NULL)
 	    && grp_hasrpc(db, grp, configpath, raise_admin)) {
 		/* Group admitted to RPC */
 		permit = true;
 	}
 
-onexit:
-	if (buf != NULL) {
-		free(buf);
-	}
-
 #ifndef EMBED /* Always let them in when debugging */
 	return (true);
 #else
diff --git a/lib/libopengear/src/xml.c b/lib/libopengear/src/xml.c
index 2597279..dcbb731 100755
--- a/lib/libopengear/src/xml.c
+++ b/lib/libopengear/src/xml.c
@@ -61,13 +61,16 @@ const scew_element *
 scew_xml_search(const scew_element *root, const char *table, const char *id,
     const char *data)
 {
-	const scew_element *elem;
+	scew_list *children = NULL, *child = NULL;
+	const scew_element *elem= NULL;
 	const scew_element *top = scew_xml_subtree(root, table);
 	if (top == NULL) {
 		return NULL;
 	}
-	elem = NULL;
-	while ((elem = scew_element_next(top, elem)) != NULL) {
+	children = scew_element_children(top);
+	child = children;
+	while ((child = scew_list_next(child)) != NULL) {
+		elem = scew_list_data(child);
 		scew_element *field = scew_element_by_name(elem, id);
 		if (field == NULL) {
 			continue;
@@ -122,7 +125,7 @@ xml_element_attribute(scew_element *elem, const char *name, const char *value)
 	memset(escaped, '\0', sizeof(escaped));
 	xml_escape(value, escaped, sizeof(escaped));
 
-	scew_element_add_attr_pair(elem, name, escaped);
+	scew_element_add_attribute_pair(elem, name, escaped);
 }
 
 scew_element*
diff --git a/lib/libopengear/src/xmldb.c b/lib/libopengear/src/xmldb.c
index 72832ca..f325b7b 100755
--- a/lib/libopengear/src/xmldb.c
+++ b/lib/libopengear/src/xmldb.c
@@ -58,6 +58,7 @@ xmldb_load(xmldb_t *db, const char *path)
 {
 	void (*error)(const char *, ...) = db->error;
 	int err;
+	scew_reader *reader = NULL;
 
 	db->parser = scew_parser_create();
 	if (db->parser == NULL) {
@@ -65,12 +66,11 @@ xmldb_load(xmldb_t *db, const char *path)
 		goto fail;
 	}
 	scew_parser_ignore_whitespaces(db->parser, 1);
-	if (!scew_parser_load_file(db->parser, path)) {
-		error("Failed to parse config: %s",
-		    scew_xml_error(db->parser));
-		goto fail;
+	reader = scew_reader_file_create(path);
+	if (reader == NULL) {
+		error("Could not load from config file: %s", path);
 	}
-	db->tree = scew_parser_tree(db->parser);
+	db->tree = scew_parser_load(db->parser, reader);
 	if (db->tree == NULL) {
 		error("No XML tree generated from config file: %s",
 		    scew_xml_error(db->parser));
@@ -82,7 +82,7 @@ xmldb_load(xmldb_t *db, const char *path)
 		    scew_xml_error(db->parser));
 		goto fail;
 	}
-
+	scew_reader_free(reader);
 	return 0;
 fail:
 	err = errno;
@@ -94,6 +94,9 @@ fail:
 		scew_tree_free(db->tree);
 		db->tree = NULL;
 	}
+	if (reader != NULL) {
+		scew_reader_free(reader);
+	}
 	errno = err;
 	return -1;
 }
@@ -102,6 +105,7 @@ xmldb_t *
 xmldb_open_buffer(char const* xml_buf, unsigned int xml_buf_size, void (*error)(const char *, ...)) {
 	int err;
 
+    scew_reader* reader = NULL;
 	xmldb_t *db = xmldb_create();
 	if (!db) {
 		error("Failed to allocate XML DB: %m");
@@ -110,12 +114,13 @@ xmldb_open_buffer(char const* xml_buf, unsigned int xml_buf_size, void (*error)(
 	db->error = error;
 	db->parser = scew_parser_create();
 	scew_parser_ignore_whitespaces(db->parser, 1);
-	if (!scew_parser_load_buffer(db->parser, xml_buf, xml_buf_size)) {
-		error("Failed to parse config: %s",
-		    scew_xml_error(db->parser));
-		goto fail;
-	}
-	db->tree = scew_parser_tree(db->parser);
+    reader = scew_reader_buffer_create(xml_buf, xml_buf_size);
+    if (!reader) {
+        error("Could not create scew buffer reader");
+        goto fail;
+    }
+
+	db->tree = scew_parser_load(db->parser, reader);
 	if (db->tree == NULL) {
 		error("No XML tree generated from config file: %s",
 		    scew_xml_error(db->parser));
@@ -127,10 +132,15 @@ xmldb_open_buffer(char const* xml_buf, unsigned int xml_buf_size, void (*error)(
 		    scew_xml_error(db->parser));
 		goto fail;
 	}
+
+    scew_reader_free(reader);
 	return db;
 fail:
 	err = errno;
-	if (db->parser != NULL) {
+	if (reader != NULL)
+        scew_reader_free(reader);
+
+    if (db->parser != NULL) {
 		scew_parser_free(db->parser);
 		db->parser = NULL;
 	}
@@ -240,6 +250,8 @@ xmldb_portlist(xmldb_t *db, const char *id, int *num_ports)
 	const scew_element *tmp = NULL;
 	bool *ports;
 	size_t port_count;
+	scew_list *ports_list = NULL;
+	scew_list *port_elem = NULL;
 
 	parent = xmldb_subtree(db, id);
 	if (parent == NULL) {
@@ -258,8 +270,10 @@ xmldb_portlist(xmldb_t *db, const char *id, int *num_ports)
 	}
 
 	*num_ports = port_count;
-
-	while ((elem = scew_element_next(parent, elem)) != NULL) {
+	ports_list = scew_element_children(parent);
+	port_elem = ports_list;
+	while ((port_elem = scew_list_next(port_elem)) != NULL) {
+		elem = scew_list_data(port_elem);
 		const char *name = scew_element_name(elem);
 		unsigned int portnum, len = sizeof("port") - 1;
 
-- 
2.17.1

