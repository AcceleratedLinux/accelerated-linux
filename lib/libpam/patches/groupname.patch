
commit f63119de5ad3c79ab33ca2c6b296b1fda8fc3ca4
Author: David Leonard <David.Leonard@digi.com>
Date:   2024-01-30 03:20:51 +1000

    libpam: move groupname helper into libpam

    Instead of creating a package for a single header file,
    move the groupname helper functionality into libpam.
    The header is named <security/pam_dal.h> so that it can be a palce
    for any more DAL-specific, PAM-wide functions.

Author: Paul Ostebee <paul.ostebee@digi.com>
Date:   2024-02-12 07:16:25 -0600

    lib/libpam: Export pam_dal_set_groupname_from_attr

    f63119de5ad3c79ab33ca2c6b296b1fda8fc3ca4 added this function to libpam
    for use by modules but failed to specify it as global in the linker map
    causing it to not be visible to any modules

    DAL-9054


Index: Linux-PAM-1.6.1/libpam/Makefile.am
===================================================================
--- Linux-PAM-1.6.1.orig/libpam/Makefile.am
+++ Linux-PAM-1.6.1/libpam/Makefile.am
@@ -45,6 +45,9 @@ libpam_la_SOURCES = pam_account.c pam_au
 	pam_modutil_getspnam.c pam_modutil_getlogin.c pam_modutil_ingroup.c \
 	pam_modutil_priv.c pam_modutil_sanitize.c pam_modutil_searchkey.c
 
+include_HEADERS += include/security/pam_dal.h
+libpam_la_SOURCES += pam_dal_groupname.c
+
 # Pkg-config script.
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = pam.pc
Index: Linux-PAM-1.6.1/libpam/libpam.map
===================================================================
--- Linux-PAM-1.6.1.orig/libpam/libpam.map
+++ Linux-PAM-1.6.1/libpam/libpam.map
@@ -18,6 +18,7 @@ LIBPAM_1.0 {
     pam_set_data;
     pam_get_data;
     pam_get_user;
+    pam_dal_set_groupname_from_attr;
 
   local:
     *;
Index: Linux-PAM-1.6.1/libpam/include/security/pam_dal.h
===================================================================
--- /dev/null
+++ Linux-PAM-1.6.1/libpam/include/security/pam_dal.h
@@ -0,0 +1,15 @@
+
+/* DAL extensions to libpam */
+
+#ifndef _SECURITY__PAM_DAL_H_
+#define _SECURITY__PAM_DAL_H_
+
+#include <security/_pam_types.h>
+#include <sys/types.h>
+
+extern int PAM_NONNULL((1,2))
+pam_dal_set_groupname_from_attr(pam_handle_t *pamh,
+				const char *groupattr,
+				size_t groupattr_len);
+
+#endif /* _SECURITY__PAM_DAL_H_ */
Index: Linux-PAM-1.6.1/libpam/pam_dal_groupname.c
===================================================================
--- /dev/null
+++ Linux-PAM-1.6.1/libpam/pam_dal_groupname.c
@@ -0,0 +1,110 @@
+/*
+ * Copyright (c) 2024 Digi International Inc.,
+ *  9350 Excelsior Blvd, Suite 700, Hopkins, MN 55343
+ *
+ * pam_dal_groupname
+ *      Extract group names from group attribute
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <stdlib.h>
+#include <string.h>
+#include <ctype.h>
+#include <stdbool.h>
+
+#include "pam_private.h"
+#include <security/pam_dal.h>
+
+static void free_groupname_data(pam_handle_t *pamh UNUSED, void *groupname, int error_status UNUSED)
+{
+	free(groupname);
+}
+
+int pam_dal_set_groupname_from_attr(pam_handle_t *pamh, const char *groupattr, size_t groupattr_len)
+{
+	const char *groupattr_end, *group_start, *group_end;
+	int ret = PAM_SERVICE_ERR;
+	size_t count = 1, grouptext_len = 0;
+	bool escaped = false;
+
+	if (groupattr_len == 0)
+		return PAM_SUCCESS;
+	groupattr_end = groupattr + groupattr_len - 1;
+	group_start = group_end = groupattr;
+	while (group_end <= groupattr_end && *group_end)
+	{
+		if ((*group_end == ',' && !escaped) || group_end == groupattr_end)
+		{
+			if (group_end != group_start)
+			{
+				if (group_end == groupattr_end)
+					grouptext_len++;
+				count++;
+			}
+			group_start = group_end = group_end + 1;
+			continue;
+		}
+		if (escaped)
+			escaped = false;
+		else if (*group_end == '\\')
+			escaped = true;
+		if (!escaped)
+			grouptext_len++;
+		group_end++;
+	}
+	if (count > 1)
+	{
+		char *grouptext_start, *grouptext;
+		char **groupname = malloc((sizeof *groupname * count) + grouptext_len + 1);
+		if (!groupname)
+			return PAM_BUF_ERR;
+		grouptext_start = grouptext = (char *) &groupname[count];
+		count = 0;
+		group_start = group_end = groupattr;
+		escaped = false;
+		while (group_end <= groupattr_end && *group_end)
+		{
+			if ((*group_end == ',' && !escaped) || group_end == groupattr_end)
+			{
+				if (group_end != group_start)
+				{
+					if (group_end == groupattr_end)
+						*grouptext++ = *group_end;
+					*grouptext++ = '\0';
+					groupname[count] = grouptext_start;
+					count++;
+				}
+				grouptext_start = grouptext;
+				group_start = group_end = group_end + 1;
+				continue;
+			}
+			if (escaped)
+				escaped = false;
+			else if (*group_end == '\\')
+				escaped = true;
+			if (!escaped)
+				*grouptext++ = *group_end;
+			group_end++;
+		}
+		groupname[count] = NULL;
+
+		ret = pam_set_data(pamh, "DAL_GROUPNAME", groupname, free_groupname_data);
+		if (ret != PAM_SUCCESS)
+			free_groupname_data(NULL, groupname, 0);
+	}
+	return ret;
+}
