thisconfigdir=../..
myfulldir=lib/crypto
mydir=lib/crypto
BUILDTOP=$(REL)..$(S)..
SUBDIRS=crc32 des dk enc_provider hash_provider keyhash_provider \
	md4 md5 old raw sha1 arcfour yarrow aes
LOCALINCLUDES = -I$(srcdir)/enc_provider \
	-I$(srcdir)/hash_provider -I$(srcdir)/keyhash_provider \
	-I$(srcdir)/aes \
	-I$(srcdir)/old -I$(srcdir)/raw -I$(srcdir)/dk -I$(srcdir)/arcfour \
	-I$(srcdir)/yarrow -I$(srcdir)/sha1 -I$(srcdir)/md5
RUN_SETUP = @KRB5_RUN_ENV@
PROG_LIBPATH=-L$(TOPLIBD)
PROG_RPATH=$(KRB5_LIBDIR)
DEFS=

EXTRADEPSRCS=\
	$(srcdir)/t_nfold.c	\
	$(srcdir)/t_cf2.c \
	$(srcdir)/t_encrypt.c	\
	$(srcdir)/t_prf.c \
	$(srcdir)/t_prng.c	\
	$(srcdir)/t_hmac.c	\
	$(srcdir)/t_pkcs5.c	\
	$(srcdir)/t_cts.c	\
	$(srcdir)/vectors.c

##DOSBUILDTOP = ..\..
##DOSLIBNAME=$(OUTPRE)crypto.lib
##DOSOBJFILE=$(OUTPRE)crypto.lst
##DOSOBJFILELIST=@$(OUTPRE)crypto.lst @$(OUTPRE)des.lst @$(OUTPRE)md4.lst @$(OUTPRE)md5.lst @$(OUTPRE)sha1.lst @$(OUTPRE)arcfour.lst @$(OUTPRE)crc32.lst @$(OUTPRE)dk.lst @$(OUTPRE)old.lst @$(OUTPRE)raw.lst @$(OUTPRE)enc_prov.lst @$(OUTPRE)hash_pro.lst @$(OUTPRE)kh_pro.lst @$(OUTPRE)yarrow.lst @$(OUTPRE)aes.lst
##DOSOBJFILEDEP =$(OUTPRE)crypto.lst $(OUTPRE)des.lst $(OUTPRE)md4.lst $(OUTPRE)md5.lst $(OUTPRE)sha1.lst $(OUTPRE)arcfour.lst $(OUTPRE)crc32.lst $(OUTPRE)dk.lst $(OUTPRE)old.lst $(OUTPRE)raw.lst $(OUTPRE)enc_prov.lst $(OUTPRE)hash_pro.lst $(OUTPRE)kh_pro.lst $(OUTPRE)aes.lst

PROG_LIBPATH=-L$(TOPLIBD)
PROG_RPATH=$(KRB5_LIBDIR)

STLIBOBJS=\
	aead.o		 	\
	block_size.o		\
	cf2.o \
	checksum_length.o	\
	cksumtype_to_string.o	\
	cksumtypes.o		\
	coll_proof_cksum.o	\
	combine_keys.o	\
	crypto_length.o		\
	crypto_libinit.o	\
	default_state.o \
	decrypt.o		\
	decrypt_iov.o		\
	encrypt.o		\
	encrypt_iov.o		\
	encrypt_length.o	\
	enctype_compare.o	\
	enctype_to_string.o	\
	etypes.o		\
	hmac.o			\
	keyblocks.o \
	keyed_cksum.o		\
	keyed_checksum_types.o	\
	keylengths.o		\
	make_checksum.o		\
	make_checksum_iov.o	\
	make_random_key.o	\
	mandatory_sumtype.o	\
	nfold.o			\
	old_api_glue.o		\
	pbkdf2.o		\
	prf.o \
	prng.o			\
	random_to_key.o		\
	state.o \
	string_to_cksumtype.o	\
	string_to_enctype.o	\
	string_to_key.o		\
	valid_cksumtype.o	\
	valid_enctype.o		\
	verify_checksum.o	\
	verify_checksum_iov.o

OBJS=\
	$(OUTPRE)aead.$(OBJEXT)		 	\
	$(OUTPRE)block_size.$(OBJEXT)		\
	$(OUTPRE)cf2$(OBJEXT) \
	$(OUTPRE)checksum_length.$(OBJEXT)	\
	$(OUTPRE)cksumtype_to_string.$(OBJEXT)	\
	$(OUTPRE)cksumtypes.$(OBJEXT)		\
	$(OUTPRE)coll_proof_cksum.$(OBJEXT)	\
	$(OUTPRE)combine_keys.$(OBJEXT)	\
	$(OUTPRE)crypto_length.$(OBJEXT)	\
	$(OUTPRE)crypto_libinit.$(OBJEXT)	\
	$(OUTPRE)default_state.$(OBJEXT) \
	$(OUTPRE)decrypt.$(OBJEXT)		\
	$(OUTPRE)decrypt_iov.$(OBJEXT)		\
	$(OUTPRE)encrypt.$(OBJEXT)		\
	$(OUTPRE)encrypt_iov.$(OBJEXT)		\
	$(OUTPRE)encrypt_length.$(OBJEXT)	\
	$(OUTPRE)enctype_compare.$(OBJEXT)	\
	$(OUTPRE)enctype_to_string.$(OBJEXT)	\
	$(OUTPRE)etypes.$(OBJEXT)		\
	$(OUTPRE)hmac.$(OBJEXT)			\
	$(OUTPRE)keyblocks.$(OBJEXT) \
	$(OUTPRE)keyed_cksum.$(OBJEXT)		\
	$(OUTPRE)keyed_checksum_types.$(OBJEXT)	\
	$(OUTPRE)keylengths.$(OBJEXT)	\
	$(OUTPRE)make_checksum.$(OBJEXT)	\
	$(OUTPRE)make_checksum_iov.$(OBJEXT)	\
	$(OUTPRE)make_random_key.$(OBJEXT)	\
	$(OUTPRE)mandatory_sumtype.$(OBJEXT)	\
	$(OUTPRE)nfold.$(OBJEXT)		\
	$(OUTPRE)old_api_glue.$(OBJEXT)		\
	$(OUTPRE)pbkdf2.$(OBJEXT)		\
	$(OUTPRE)prf.$(OBJEXT) \
	$(OUTPRE)prng.$(OBJEXT)			\
	$(OUTPRE)random_to_key.$(OBJEXT)	\
	$(OUTPRE)state.$(OBJEXT) \
	$(OUTPRE)string_to_cksumtype.$(OBJEXT)	\
	$(OUTPRE)string_to_enctype.$(OBJEXT)	\
	$(OUTPRE)string_to_key.$(OBJEXT)	\
	$(OUTPRE)valid_cksumtype.$(OBJEXT)	\
	$(OUTPRE)valid_enctype.$(OBJEXT)	\
	$(OUTPRE)verify_checksum.$(OBJEXT)	\
	$(OUTPRE)verify_checksum_iov.$(OBJEXT)

SRCS=\
	$(srcdir)/aead.c		\
	$(srcdir)/block_size.c		\
	$(srcdir)/checksum_length.c	\
	$(srcdir)/cksumtype_to_string.c	\
	$(srcdir)/cksumtypes.c		\
	$(srcdir)/coll_proof_cksum.c	\
	$(srcdir)/combine_keys.c	\
	$(srcdir)/crypto_length.c	\
	$(srcdir)/crypto_libinit.c	\
	$(srcdir)/default_state.c \
	$(srcdir)/decrypt.c		\
	$(srcdir)/decrypt_iov.c		\
	$(srcdir)/encrypt.c		\
	$(srcdir)/encrypt_iov.c		\
	$(srcdir)/encrypt_length.c	\
	$(srcdir)/enctype_compare.c	\
	$(srcdir)/enctype_to_string.c	\
	$(srcdir)/etypes.c		\
	$(srcdir)/hmac.c		\
	$(srcdir)/keyblocks.c \
	$(srcdir)/keyed_cksum.c		\
	$(srcdir)/keyed_checksum_types.c\
	$(srcdir)/keylengths.c		\
	$(srcdir)/make_checksum.c	\
	$(srcdir)/make_checksum_iov.c	\
	$(srcdir)/make_random_key.c	\
	$(srcdir)/mandatory_sumtype.c	\
	$(srcdir)/nfold.c		\
	$(srcdir)/old_api_glue.c	\
	$(srcdir)/pbkdf2.c	\
	$(srcdir)/prf.c \
	$(srcdir)/cf2.c \
	$(srcdir)/prng.c		\
	$(srcdir)/random_to_key.c	\
	$(srcdir)/state.c \
	$(srcdir)/string_to_cksumtype.c	\
	$(srcdir)/string_to_enctype.c	\
	$(srcdir)/string_to_key.c	\
	$(srcdir)/valid_cksumtype.c	\
	$(srcdir)/valid_enctype.c	\
	$(srcdir)/verify_checksum.c	\
	$(srcdir)/verify_checksum_iov.c


LIBBASE=k5crypto
LIBMAJOR=3
LIBMINOR=1
LIBINITFUNC=cryptoint_initialize_library
LIBFINIFUNC=cryptoint_cleanup_library
RELDIR=crypto

STOBJLISTS=crc32/OBJS.ST des/OBJS.ST dk/OBJS.ST enc_provider/OBJS.ST \
	hash_provider/OBJS.ST keyhash_provider/OBJS.ST md4/OBJS.ST \
	md5/OBJS.ST old/OBJS.ST raw/OBJS.ST sha1/OBJS.ST arcfour/OBJS.ST \
	aes/OBJS.ST \
	yarrow/OBJS.ST \
	OBJS.ST
SUBDIROBJLISTS=crc32/OBJS.ST des/OBJS.ST dk/OBJS.ST enc_provider/OBJS.ST \
	hash_provider/OBJS.ST keyhash_provider/OBJS.ST md4/OBJS.ST \
	md5/OBJS.ST old/OBJS.ST raw/OBJS.ST sha1/OBJS.ST arcfour/OBJS.ST \
	aes/OBJS.ST \
	yarrow/OBJS.ST

# No dependencies.  Record places to find this shared object if the target
# link editor and loader support it.
DEPLIBS=
SHLIB_DIRS=-L$(TOPLIBD)
SHLIB_EXPLIBS= $(SUPPORT_LIB) @CRYPTO_LIBS@ $(LIBS)
SHLIB_EXPDEPLIBS= $(SUPPORT_DEPLIB)
SHLIB_LDFLAGS= $(LDFLAGS) @SHLIB_RPATH_DIRS@
SHLIB_LIBDIRS= @SHLIB_LIBDIRS@
SHLIB_RDIRS=$(KRB5_LIBDIR)

##DOS##LIBOBJS = $(OBJS)

all-unix:: all-liblinks
install-unix:: install-libs

libcrypto.lib:
	libdir crypto.lib

clean-unix:: clean-liblinks clean-libs clean-libobjs

check-unix:: t_nfold t_encrypt t_prf t_prng t_hmac t_pkcs5 t_cf2
	$(RUN_SETUP) $(VALGRIND) ./t_nfold
	$(RUN_SETUP) $(VALGRIND) ./t_encrypt
	$(RUN_SETUP) $(VALGRIND) ./t_prng <$(srcdir)/t_prng.seed >t_prng.output && \
	diff t_prng.output $(srcdir)/t_prng.expected
	$(RUN_SETUP) $(VALGRIND) ./t_hmac
	$(RUN_SETUP) $(VALGRIND) ./t_prf <$(srcdir)/t_prf.in >t_prf.output
	diff t_prf.output $(srcdir)/t_prf.expected
	$(RUN_SETUP) $(VALGRIND) ./t_cf2 <$(srcdir)/t_cf2.in >t_cf2.output
	diff t_cf2.output $(srcdir)/t_cf2.expected


#	$(RUN_SETUP) $(VALGRIND) ./t_pkcs5

t_nfold$(EXEEXT): t_nfold.$(OBJEXT) nfold.$(OBJEXT) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_nfold.$(OBJEXT) nfold.$(OBJEXT) $(SUPPORT_LIB)

t_encrypt$(EXEEXT): t_encrypt.$(OBJEXT) nfold.$(OBJEXT) $(CRYPTO_DEPLIB) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_encrypt.$(OBJEXT)  -lkrb5 -lk5crypto -lcom_err $(SUPPORT_LIB)

t_prf$(EXEEXT): t_prf.$(OBJEXT) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_prf.$(OBJEXT)  -lkrb5 -lk5crypto -lcom_err $(SUPPORT_LIB)

t_cf2$(EXEEXT): t_cf2.$(OBJEXT) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_cf2.$(OBJEXT)  -lkrb5 -lk5crypto -lcom_err $(SUPPORT_LIB)


t_prng$(EXEEXT): t_prng.$(OBJEXT) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_prng.$(OBJEXT)  -lk5crypto -lcom_err $(SUPPORT_LIB)

t_hmac$(EXEEXT): t_hmac.$(OBJEXT) $(CRYPTO_DEPLIB) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_hmac.$(OBJEXT) $(K5CRYPTO_LIB) $(COM_ERR_LIB) $(SUPPORT_LIB)

t_pkcs5$(EXEEXT): t_pkcs5.$(OBJEXT) $(CRYPTO_DEPLIB) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_pkcs5.$(OBJEXT) $(K5CRYPTO_LIB) $(COM_ERR_LIB) $(SUPPORT_LIB)

vectors$(EXEEXT): vectors.$(OBJEXT) $(CRYPTO_DEPLIB) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ vectors.$(OBJEXT) $(K5CRYPTO_LIB) $(COM_ERR_LIB) $(SUPPORT_LIB)

t_cts$(EXEEXT): t_cts.$(OBJEXT) $(CRYPTO_DEPLIB) $(SUPPORT_DEPLIB)
	$(CC_LINK) -o $@ t_cts.$(OBJEXT) \
		$(K5CRYPTO_LIB) $(COM_ERR_LIB) $(SUPPORT_LIB)


clean::
	$(RM) t_nfold.o t_nfold t_encrypt t_encrypt.o t_prng.o t_prng \
		t_hmac.o t_hmac t_pkcs5.o t_pkcs5 pbkdf2.o t_prf t_prf.o t_cf2 t_cf2.o
	-$(RM) t_prng.output

all-windows::
	cd crc32
	@echo Making in crypto\crc32
	$(MAKE) -$(MFLAGS)
	cd ..\des
	@echo Making in crypto\des
	$(MAKE) -$(MFLAGS)
	cd ..\dk
	@echo Making in crypto\dk
	$(MAKE) -$(MFLAGS)
	cd ..\enc_provider
	@echo Making in crypto\enc_provider
	$(MAKE) -$(MFLAGS)
	cd ..\hash_provider
	@echo Making in crypto\hash_provider
	$(MAKE) -$(MFLAGS)
	cd ..\keyhash_provider
	@echo Making in crypto\keyhash_provider
	$(MAKE) -$(MFLAGS)
	cd ..\md4
	@echo Making in crypto\md4
	$(MAKE) -$(MFLAGS)
	cd ..\md5
	@echo Making in crypto\md5
	$(MAKE) -$(MFLAGS)
	cd ..\old
	@echo Making in crypto\old
	$(MAKE) -$(MFLAGS)
	cd ..\raw
	@echo Making in crypto\raw
	$(MAKE) -$(MFLAGS)
	cd ..\sha1
	@echo Making in crypto\sha1
	$(MAKE) -$(MFLAGS)
	cd ..\arcfour
	@echo Making in crypto\arcfour
	$(MAKE) -$(MFLAGS)
	cd ..\yarrow
	@echo Making in crypto\yarrow
	$(MAKE) -$(MFLAGS)
	cd ..\aes
	@echo Making in crypto\aes
	$(MAKE) -$(MFLAGS)
	cd ..

clean-windows::
	cd crc32
	@echo Making in clean crypto\crc32
	$(MAKE) -$(MFLAGS) clean
	cd ..\des
	@echo Making clean in crypto\des
	$(MAKE) -$(MFLAGS) clean
	cd ..\dk
	@echo Making clean in crypto\dk
	$(MAKE) -$(MFLAGS) clean
	cd ..\enc_provider
	@echo Making clean in crypto\enc_provider
	$(MAKE) -$(MFLAGS) clean
	cd ..\hash_provider
	@echo Making clean in crypto\hash_provider
	$(MAKE) -$(MFLAGS) clean
	cd ..\keyhash_provider
	@echo Making clean in crypto\keyhash_provider
	$(MAKE) -$(MFLAGS) clean
	cd ..\md4
	@echo Making clean in crypto\md4
	$(MAKE) -$(MFLAGS) clean
	cd ..\md5
	@echo Making clean in crypto\md5
	$(MAKE) -$(MFLAGS) clean
	cd ..\old
	@echo Making clean in crypto\old
	$(MAKE) -$(MFLAGS) clean
	cd ..\raw
	@echo Making clean in crypto\raw
	$(MAKE) -$(MFLAGS) clean
	cd ..\sha1
	@echo Making clean in crypto\sha1
	$(MAKE) -$(MFLAGS) clean
	cd ..\arcfour
	@echo Making clean in crypto\arcfour
	$(MAKE) -$(MFLAGS) clean
	cd ..\yarrow
	@echo Making clean in crypto\yarrow
	$(MAKE) -$(MFLAGS) clean
	cd ..\aes
	@echo Making clean in crypto\aes
	$(MAKE) -$(MFLAGS) clean
	cd ..

check-windows::
	cd crc32
	@echo Making in check crypto\crc32
	$(MAKE) -$(MFLAGS) check
	cd ..\des
	@echo Making check in crypto\des
	$(MAKE) -$(MFLAGS) check
	cd ..\dk
	@echo Making check in crypto\dk
	$(MAKE) -$(MFLAGS) check
	cd ..\enc_provider
	@echo Making check in crypto\enc_provider
	$(MAKE) -$(MFLAGS) check
	cd ..\hash_provider
	@echo Making check in crypto\hash_provider
	$(MAKE) -$(MFLAGS) check
	cd ..\keyhash_provider
	@echo Making check in crypto\keyhash_provider
	$(MAKE) -$(MFLAGS) check
	cd ..\md4
	@echo Making check in crypto\md4
	$(MAKE) -$(MFLAGS) check
	cd ..\md5
	@echo Making check in crypto\md5
	$(MAKE) -$(MFLAGS) check
	cd ..\old
	@echo Making check in crypto\old
	$(MAKE) -$(MFLAGS) check
	cd ..\raw
	@echo Making check in crypto\raw
	$(MAKE) -$(MFLAGS) check
	cd ..\sha1
	@echo Making check in crypto\sha1
	$(MAKE) -$(MFLAGS) check
	cd ..\arcfour
	@echo Making check in crypto\arcfour
	$(MAKE) -$(MFLAGS) check
	cd ..\yarrow
	@echo Making check in crypto\yarrow
	$(MAKE) -$(MFLAGS) check
	cd ..\aes
	@echo Making check in crypto\aes
	$(MAKE) -$(MFLAGS) check
	cd ..


@lib_frag@
@libobj_frag@

