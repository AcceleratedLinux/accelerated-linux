.rn '' }`
''' $RCSfile$$Revision: 13969 $$Date: 2001-11-08 16:51:58 -0500 (Thu, 08 Nov 2001) $
'''
''' $Log$
''' Revision 1.1  2001/11/08 21:51:57  hartmans
''' Add Yarrow from http://www.zeroknowledge.com/.
'''
''' This is version 0.1 of their Yarrow implementation.  I have flattened the distribution,
''' copying files in the src directory directly into this directory.
'''
''' Revision 1.1.2.1  2000/08/13 21:11:24  adamb
''' added some more assumptions
''' included yarrow.man derived from yarrow.pod with pod2man
'''
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH YARROW 1 "perl 5.005, patch 03" "13/Aug/2000" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Yarrow_Init, Yarrow_Poll, Yarrow_Input, Yarrow_Status, Yarrow_Output, Yarrow_New_Source, Yarrow_Register_Source_Estimator, Yarrow Final \- cryptographic pseudo-random number generator
.SH "SYNOPSIS"
int \fIYarrow_Init\fR\|(Yarrow_CTX *y, const char *filename);
.PP
int \fIYarrow_New_Source\fR\|(Yarrow_CTX* y, unsigned* source_id);
.PP
int \fIYarrow_Poll\fR\|(Yarrow_CTX *y, unsigned source_id)
.PP
int \fIYarrow_Input\fR\|( Yarrow_CTX* y, unsigned source_id,
       const void* sample, size_t size,
       size_t entropy_bits);
.PP
int \fIYarrow_Status\fR\|(Yarrow_CTX* y, int *num_sources,
       unsigned *source_id, size_t *entropy_bits,
       size_t *entropy_max);
.PP
int \fIYarrow_Output\fR\|(Yarrow_CTX* y, void* out, size_t size);
.PP
int \fIYarrow_Register_Source_Estimator\fR\|(Yarrow_CTX* y,
       unsigned source_id,
       size_t (*estimator)(const void* sample,
                           size_t size));
.PP
int \fIYarrow_Final\fR\|(Yarrow_CTX* y);
.SH "DESCRIPTION"
\fIYarrow_Init()\fR initializes a \fBYarrow_CTX\fR structure. \fBfilename\fR can
be NULL, or the path to a seed file that Yarrow will use to store the
PRNG state for use in later sessions.  Returns \fBYARROW_OK\fR if the
PRNG is seeded on exit, or \fBYARROW_NOT_SEEDED\fR if the PRNG is not yet
seeded.
.PP
\fIYarrow_New_Source()\fR associates entropy sources such as keyboard input,
mouse movements and other unpredictable events with a
\fBYarrow_CTX\fR. The function assigns a unique number to the new source,
and places it in \fBsource_id\fR.
.PP
\fIYarrow_Poll()\fR gathers entropy from the state of the machine and adds
it to the source \fBsource_id\fR.  The source has to be allocated by the
user with Yarrow_New_Source.  Returns \fBYARROW_OK\fR if the PRNG is
seeded on exit, or \fBYARROW_NOT_SEEDED\fR if the PRNG is not yet seeded.
.PP
\fIYarrow_Input()\fR is used to add randomness from the source \fBsource_id\fR
to the PRNG. It reads \fBsize\fR bytes at the address \fBsample\fR. An
estimate of the entropy in bits contained in the sample must be
specified as \fBentropy_bits\fR.
.PP
\fIYarrow_Status()\fR returns \fBYARROW_OK\fR if the PRNG has enough entropy to
produce output, and \fBYARROW_NOT_SEEDED\fR if calls to \fIYarrow_Output()\fR
would fail.
.PP
If num_sources is not NULL, the number of entropy sources that still
need to be seeded is returned in \fB*num_sources\fR.
.PP
If source_id is not NULL, the entropy source that is closest to its
threshold is returned in \fB*source_id\fR.  \fB*source_id\fR is set to \-1 if
no sources have either reached their threshold or not collected any
entropy yet.
.PP
If not NULL, \fB*entropy_bits\fR is set to the current number of bits for
the source \fB*source_id\fR, and \fB*entropy_max\fR to the threshold.
.PP
\fIYarrow_Output()\fR generates \fBsize\fR bytes of cryptographically strong
pseudo-random output and places them at \fBout\fR. The return value must
always be checked. If an error occurs, the PRNG may produce
predictable data or no output at all.
.PP
\fIYarrow_Register_Source_Estimator()\fR registers an entropy estimator
for \fBsource_id\fR. An entropy estimator is a function that tries to
estimate the entropy in a sample and returns the entropy in bits
in order to detect abnormal situations in which the samples have a very
low entropy.
.PP
\fIYarrow_Final()\fR writes the PRNG state to the seed file and erases it
from memory.
.SH "RETURN VALUES"
All functions return \fBYARROW_OK\fR on success. Error conditions are reported
as follows:
.PP
.Vb 16
\& YARROW_FAIL              generic failure
\& YARROW_NOT_INIT          YarrowInit() hasn't been called
\& YARROW_ALREADY_INIT      YarrowInit() has already been called
\& YARROW_NO_DRIVER         driver doesn't exist
\& YARROW_CANT_OPEN         can't open driver
\& YARROW_BAD_SOURCE        invalid source id
\& YARROW_TOO_MANY_SOURCES  can't create any more source IDs
\& YARROW_BAD_ARG           invalid argument
\& YARROW_ACCESS            insufficient privileges
\& YARROW_NOMEM             out of memory
\& YARROW_NORSRC            a resource (apart from memory) is exhausted
\& YARROW_NOT_SEEDED        not enough entropy to generate output
\& YARROW_LOCKING           locking error
\& YARROW_NO_STATE          there is no state to load 
\& YARROW_STATE_ERROR       error with state load or save
\& YARROW_NOT_IMPL          not implemented
.Ve
.SH "AUTHORS"
Yarrow was designed by John Kelsey, Bruce Schneier and Niels Ferguson
of Counterpane Systems. This implementation is (C) 2000 by
Zero-Knowledge Systems Inc.

.rn }` ''
.IX Title "YARROW 1"
.IX Name "Yarrow_Init, Yarrow_Poll, Yarrow_Input, Yarrow_Status, Yarrow_Output, Yarrow_New_Source, Yarrow_Register_Source_Estimator, Yarrow Final - cryptographic pseudo-random number generator"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "RETURN VALUES"

.IX Header "AUTHORS"

