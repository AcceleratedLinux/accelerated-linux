Libidn NEWS -- History of user-visible changes.                 -*- outline -*-
Copyright (C) 2002, 2003, 2004 Simon Josefsson
See the end for copying conditions.

* Version 0.5.2 (released 2004-07-14)

** Java "make install" rules are now DESTDIR compatible.

** API and ABI is backwards compatible with the previous version.

* Version 0.5.1 (released 2004-07-09)

** Cross compile builds should work.
It should work for any sane cross compile target, but the only tested
platform is uClibc/uClinux on Motorola Coldfire.

** The example programs now correctly invoke `setlocale (LC_ALL, "")'.

** API and ABI is backwards compatible with the previous version.

* Version 0.5.0 (released 2004-06-26)

** Functions to detect "normalization problem sequences" as per PR-29 added.
See the new chapter "PR29 Functions" in the manual
(doc/libidn.{ps,pdf,html}) for more information and the background
story.  An external link that discuss the problem is
<http://www.unicode.org/review/pr-29.html>.

** More translations.
Added Esperanto (by Edmund GRIMLEY EVANS).

** API and ABI is backwards compatible with the previous version.
pr29.h: ADD.  Prototypes for PR29 types and functions.
pr29_4, pr29_4z, pr29_8z: ADD.  New API entry points for PR29 functions.
Pr29_rc: ADD.  New error code enum type for PR29 functions.

* Version 0.4.9 (released 2004-06-11)

** The Java library (java/libidn-*.jar) is included in the distribution.

** JavaDoc manuals (doc/javadoc/) are included.

** API and ABI is backwards compatible with the previous version.

* Version 0.4.8 (released 2004-06-01)

** The Java source code is actually included in the distribution.

** API and ABI is backwards compatible with the previous version.

* Version 0.4.7 (released 2004-05-31)

** The Java port should now be functional, contributed by Oliver Hitz.
See the new section "Java API" in the manual for more information.

** API and ABI is backwards compatible with the previous version.

* Version 0.4.6 (released 2004-05-24)

** The header file idn-free.h is actually installed by 'make install'.

** API and ABI is backwards compatible with the previous version.

* Version 0.4.5 (released 2004-05-21)

** In IDNA ToUnicode, a `free' on a stale pointer fixed by Ulrich Drepper.

** Several memory leaks fixed by Ulrich Drepper.

** Added more SASLPrep and NFKC test vectors.

** Automake 1.8.4 is used.

** API and ABI is backwards compatible with the previous version.
idn_free: ADD.  Wrapper around system `free'.
idn-free.h: ADD.  Prototype for `idn_free'.
                See idn-free.h for discussion.  The interface is
                currently not documented.  Comments and feedback is
                appreciated.

* Version 0.4.4 (released 2004-04-29)

** Fixed two bugs in iSCSI definition, syncing with newly published RFC 3722.
The first bug was an omission of prohibiting the characters in C.1.1,
C.1.2 and C.7 (space characters and characters that are inappropriate
for canonical representation).  The second was a bug in the definition
of the table, causing the entire table to be skipped, of the special
prohibited output character table defined in RFC 3722 (see section 6,
the characters in the table are various ASCII characters and U+3002).

** A few test vectors for iSCSI were added.

** The self tests are linked with libtool -no-install to avoid wrapper script.

** Separated self test utilities into a separate library, shared by all tests.

** More translations.
Added Romanian (by Laurentiu Buzdugan).

** API and ABI is backwards compatible with the previous version.

* Version 0.4.3 (released 2004-04-22)

** Fixed a bug in table processing code to prohibit control characters.
The problem was that the code used a code point of 0 to indicate end
of table, but if (as for table C.2.1) a range starts with 0, this
logic would fail.  The end-of-table test is now that both the start
and end code points of the range is 0.  Table C.2.1 is responsible for
prohibiting non-ASCII control characters, i.e. ASCII 0-31 and 127.
Before, libidn silently accepted such strings without complaining.

** A few test vectors for SASLprep were added.

** The pkg-config script no longer include a -R parameter.

** More translations.
Added Dutch (by Elros Cyriatan), and German (by Roland Illig).

** API and ABI is backwards compatible with the previous version.

* Version 0.4.2 (released 2004-03-20)

** A Punycode implementation in Java was added, by Oliver Hitz.
Eventually hopefully a StringPrep, Nameprep and IDNA implementation
will be added as well.  Currently you need to specify --enable-java to
enable the Java interface.  The Java sources (below java/) are
compiled into byte-code (not native code) into a JAR library.

** More translations.
Added Danish (by Morten Bo Johansen), French (by Michel Robitaille),
Polish (by Jakub Bogusz), and Serbian (by Aleksandar Jelenak).

** Norwegian TLD table added, by Thomas Jacob.

** API and ABI is backwards compatible with the previous version.

* Version 0.4.1 (released 2004-03-08)

** The user messages from the command line utility are now translated.
Currently English and Swedish is supported.

** Logic of stringprep_locale_charset modified.
Future versions will use, in order, $CHARSET iff defined, nl_langinfo
(CODESET) iff working, or fall back to returning "ASCII".  Earlier it
attempted to guess the system locale, in contrast with the current
application's locale, via some setlocale save/set/reset magic.  This
change may require you to invoke setlocale() in your application,
which is (should be) required for non-ASCII to work anyway.  Based on
discussion with Ulrich Drepper.

** The command-line utility now invoke setlocale (LC_ALL, "") at startup.

** Fixed SASLprep tables to prohibit non-ASCII space in output.
Non-ASCII space has always been mapped to ASCII space, so it is not
clear this really have any effect, but the specification require it.

** Building Libidn as part of GLIBC has been updated.
Refer to libc/README for more information.  Incidentally, GLIBC in CVS
now include a copy of Libidn.

** API and ABI is backwards compatible with the previous version.
IDNA_DLOPEN_ERROR: ADD.  Only used internally by Libidn in libc.

* Version 0.4.0 (released 2004-02-28)

** Support for TLD restrictions on IDN strings, contributed by Thomas Jacob.
Many TLDs restrict the set of characters that can be used, from the
full Unicode 3.2 range that is normally available.  This contribution
make it possible for you to test strings for TLD conformance locally.
The code can be disabled by --disable-tld.  If enabled (the default),
the new API "tld.h" is installed which can be used to check a string
for conformance to TLD specific rules.  This add a new self test, and
a new chapter in the manual.  People responsible for maintaining TLD
tables are hereby encouraged to contribute them (under reasonable
licensing terms) for inclusion in future versions of Libidn.  Be
warned that the API for TLD checking may change throughout the 0.4.x
series as we get feedback on it.

** Kerberos 5 stringprep profile macro is no longer documented.
The macro itself will probably be removed in the future, if the
specification is dropped from the Kerberos WG agenda.

** API and ABI is backwards compatible with the previous version.
stringprep_kerberos5: DEPRECATED.
Tld_table_element:
Tld_table:
Tld_rc: ADD.  New data types.
tld_get_4:
tld_get_4z:
tld_get_z: ADD.  New functions to extract TLD from string.
tld_get_table:
tld_default_table: ADD.  New functions to get TLD table from TLD name.
tld_check_4t:
tld_check_4tz: ADD.  New function to provide core TLD operations.
tld_check_4:
tld_check_4z:
tld_check_8z:
tld_check_lz: ADD.  New functions that combine all TLD operations in one call.

* Version 0.3.7 (released 2004-01-22)

** The command line parameter '--' idiom is documented.

** The iSCSI stringprep profile now recognized as "iSCSI".
The earlier name "ISCSIprep" is still recognized, for backwards
compatibility.

** DocBook manuals no longer included (the tools are too unstable).

** API and ABI is backwards compatible with the previous version.

* Version 0.3.6 (released 2004-01-06)

** The manual now contain a troubleshooting section for the command line tool.

** The PHP interface pass the string directly on the command line.

** The macro that create 'idn-int.h' has been updated to latest version.

** API and ABI is backwards compatible with the previous version.

* Version 0.3.5 (released 2003-12-15)

** The program 'idn' accepts input strings directly on the command line.

** The program 'idn' defaults to --idna-to-ascii if no parameter is given.

** The program 'idn' now print user instructions before waiting for input.

** DocBook HTML output not included any longer.
The reason is that the filenames generated by docbook2html appear to
be rather random, so it is difficult to maintain the Makefile.am rules
for them.

** Autoconf 2.59, automake 1.8 and libtool from CVS is used.

** API and ABI is backwards compatible with the previous version.
IDNA_CONTAINS_NON_LDH: ADD.  Same integer value as IDNA_CONTAINS_LDH.
IDNA_CONTAINS_LDH: DEPRECATED.  LDH (letter-digits-hyphens) characters
   		are not an error, but non-LDH characters are, when
   		IDNA_USE_STD3_ASCII_RULES is used.  The logic of the
   		mnemonic name of this error constant was reversed.

* Version 0.3.4 (released 2003-11-09)

** DocBook manuals in XML, PDF, PostScript, ASCII and HTML formats included.

* Version 0.3.3 (released 2003-10-18)

** Fixed list of Stringprep profiles in 'idn --help' and 'idn.php'.

** Fixed debug information in 'idn'.

** Internal improvements.
Leads to reduced heap memory usage.  Simplified inter-dependency among
files in lib/* to make it easier to copy them into your project.

** Debugging stringprep profile 'generic' removed.

** Punycode implementation updated to rfc3492bis-00.

** API and ABI is backwards compatible with the previous version.
stringprep_4i: NEW.
stringprep_4zi: NEW.
stringprep: CHANGED. 'profile' is marked as 'const'.
stringprep_profile: CHANGED. 'profile' is marked as 'const'.
stringprep_generic: REMOVED. Never meant for public use.

* Version 0.3.2 (released 2003-10-07)

** SASL ANONYMOUS stringprep profile "trace" added.
It is equivalent to the already supported "plain" SASL ANONYMOUS
stringprep profile, except for the name.

** API and ABI is backwards compatible with the previous version.
The 'in' parameter to stringprep_profile was changed from 'char*' to
'const char*'.

* Version 0.3.1 (released 2003-10-02)

** Fixed handling of implicit and explicit zero-length root labels in ToASCII.

** Fixed support for Hangul Syllables during Unicode NFKC normalization.

** Fixed Unicode NFKC normalization of (some) BMP code points.
This was done by syncing the NFKC code with latest GLIB, and may have
fixed other bugs in the earlier versions of the updated functions.

** Added more IDNA test vectors.

** Emacs Lisp IDNA implementation now set the UseSTD3ASCIIRules flag.
This is the appropriate setting for mail-related uses of IDNA.

** API and ABI is backwards compatible with the previous version.

* Version 0.3.0 (released 2003-09-23)

** Ported to Mac OS X.

** Gnulib code removed, we now assume a C89 compatible environment.

** Building libidn as a libc add-on now works again.

** Man pages for all public API functions are included.

** Fixed bug in SASLprep profile.

** API and ABI is NOT backwards compatible with the previous version.
All previously labeled (since 0.1.x) obsolete functions have been dropped.
The use of 'enum' types instead of 'int' added in 0.2.3 reverted, it
confused documentation generators and wasn't all that common practice.

* Version 0.2.3 (released 2003-08-26)

** Example 4 was the same as example 3, now changed to demo ToUnicode.

** Documentation improvements.

** Prototype cleanups.
The proper enum types (Stringprep_rc, Idna_rc, etc) are now used in
several places where plain int where used before.  String lengths are
handled by (s)size_t instead of int.

** API and ABI is backwards compatible with the previous version.

* Version 0.2.2 (released 2003-08-13)

** Fixed problem with strings longer than 4GB in punycode functions.
The punycode code cannot handle strings longer than 4GB.  The code now
return PUNYCODE_BAD_INPUT on too long input, instead of failing in an
unknown way.

** The "idn --idna-to-unicode" command now output locale encoded strings.

** Build fixes, bug fixes.

** API and ABI is backwards compatible with the previous version.

* Version 0.2.1 (released 2003-07-04)

** Don't reject zero-length trailing labels as in, e.g., "www.example.org.".
The IDNA RFC is not clear on this topic, zero-length labels in general
are forbidden by the ToASCII algorithm in section 4.1 step 8, but the
terminology section define, inside a parenthesis, that the zero-length
root label is in fact not considered a label at all in IDNA.

** Bug fixes.

** API and ABI is backwards compatible with the previous version.

* Version 0.2.0 (released 2003-06-19)

** Unicode code point data is now uint32_t, defined in "idn-int.h".
A header file "idn-int.h" is generated and installed to make sure the
"uint32_t" data type is available on all platforms.  The reason for
this change is that on 64-bit platforms, the application was required
to convert 32 bit integers (which is how Unicode code points are
typically represented) into 64 bit integers before calling libidn
functions.

** New idna_*() functions have improved flags handling.
The allowunassigned and usestd3asciirules parameters were collapsed
into a flags parameter, that can take on the IDNA_ALLOW_UNASSIGNED and
IDNA_USE_STD3_ASCII_RULES values.  This allows for easier extensions
to support, e.g., Unicode 4.0 or RFC 952 ASCII rules checking.  Note
that the old entry points are unmodified (in this regard), and new
entry points with this modification were added.

** The manual was moved into a separate directory doc/.

** Bugfixes.

** API and ABI is not backwards compatible.
In punycode.h and stringprep.h the "unsigned long" data type was
changed into "uint32_t", which cause a API and ABI missmatch.  For
idna.h, the old entry points that used "unsigned long" still exist,
and new entry points that uses "uint32_t" was added.  To update your
application, you probably only need to change "unsigned long" to
"uint32_t".  As a result of these changes, the shared object version
has been increased.

* Version 0.1.15 (released 2003-06-07)

** Bugfixes.

** API and ABI is backwards compatible with the previous version.

* Version 0.1.14 (released 2003-05-10)

** Experimental documentation generation in contrib/doxygen/.
Simply invoke "doxygen" in that directory and it should build the
documentation.

** Lisp API bug fixes.

** API and ABI is backwards compatible with the previous version.

* Version 0.1.13 (released 2003-03-13)

** Unfinished Java *.class files implementing the libidn API.
See the contrib/java/ directory.  It is implemented using the Java
Native Interface, and light initial testing indicate interoperability
between GCJ, IBM's JDK and Sun's JDK.

** Building is now silent when gengetopt is not present.

** Bug fixes.

** API and ABI is backwards compatible with the previous version.

* Version 0.1.12 (released 2003-03-06)

** Building libidn doesn't require gengetopt.
Warnings are still printed though.  Gengetopt will be replaced by argp
eventually.

** Command line tool "idn" supports stringprep too.

** New stringprep API entry point: stringprep_profile().
It takes a name of the stringprep profile as an argument instead of
the stringprep table structure.

** stringprep_*.h are deprecated and will be removed in the future.
All symbols have been moved to stringprep.h.  The reasons are that (1)
the files typically only defined one CPP macro and exported one symbol
definition, which is wasteful as it generates too much work in the
manual, and (2) using one header file for all profiles allows easier
access to all stringprep profiles during runtime.  Note that the files
are still installed, but they only #include stringprep.h now, for
backwards compatibility.

** GNU Libc add-on build instructions updated to GNU Libc 2.3.2.

** SASLprep stringprep profile added.

** An online interface to libidn written in PHP added to contrib/web/.

** API and ABI is backwards compatible with the previous version.

* Version 0.1.11 (released 2003-02-26)

** Command line application "idn" is included.
A simple wrapper around the library that allows you to invoke punycode
encoding/decoding and IDNA ToASCII/ToUnicode on the command line.

** Emacs Lisp interface for punycode and IDNA included.
See punycode.el and idna.el.

** API and ABI is backwards compatible with the previous version.

* Version 0.1.10 (released 2003-02-21)

** idna_*_to_ace() and idna_*ace_to_*() are deprecated in favor of
** idna_to_ascii_from_*() and idna_to_unicode_*_from_*() respectively.
The reason was that the old interfaces did not accept the
AllowUnassigned and UseSTD3ASCIIRules flags.  Note that the old
functions are not removed, but will be in the future.

** IPS iSCSI stringprep profile added.

** A new contrib/ directory added.
Currently it contains a Python interface to Libidn, contributed by
Stephane Bortzmeyer.

** idna.h and punycode.h are now installed by "make install".

** API and ABI is backwards compatible with the previous version.

* Version 0.1.9 (released 2003-02-20)

** SASL ANONYMOUS "plain" stringprep profile added.

** XMPP nodeprep profile fixed.

** API and ABI is backwards compatible with the previous version.
For future releases, the NEWS entry will specifically mention whether
the C header API or library ABI backwards compatibility is affected.

* Version 0.1.8 (released 2003-02-14)

** Portability fixes.
This includes not building the API Reference Manual with GTK-DOC by
default, if you want it use configure parameter --enable-gtk-doc after
making sure your gtkdoc-mkdb accept the --tmpl-dir parameter.

** The type for string length variables is now (s)size_t.
Unfortunately this means binary shared library binary backwards
compatible is lost.

** New nameprep test vectors.

* Version 0.1.7 (released 2003-02-12)

** Uses official IDNA ACE prefix.

* Version 0.1.6 (released 2003-02-11)

** Uses tentative IDNA ACE prefix.

** Added XMPP Node/Resource Identifiers stringprep profiles.

** Fixed prohibited character checks for bidi.

* Version 0.1.5 (released 2003-01-28)

** The library can now be built as part of GNU Libc.
This is experimental and only tested against GNU Libc version 2.3.1.
See the libc/ directory, and libc/README in particular.

** Bug fixes.

* Version 0.1.4 (released 2003-01-15)

** Documentation fixes.

** Portability fixes.

** Bug fixes.

* Version 0.1.3 (released 2003-01-15)

** Added texinfo manual.

* Version 0.1.2 (released 2003-01-08)

** Added high-level IDNA API.

** Added example3.c and example4.c demonstrating the high-level IDNA API.

* Version 0.1.1 (released 2003-01-08)

** Added documentation using GTK-DOC.

** The obsolete stringprep_utf8_to_ucs4_fast API entry point was removed.
By accident it was never removed in 0.1.0.

* Version 0.1.0 (released 2003-01-05)

** Official GNU project.

** Renamed from libstringprep to libidn.

** Supports punycode and IDNA.  Caveat emptor: I don't use it myself.

** Uses "unsigned long" for Unicode code points instead of "long".
Long is guaranteed to be at least 32 bits by C standards so it is
always sufficiently large, no need to use uint32_t and the like.

** The obsolete stringprep_utf8_to_ucs4_fast API entry point was removed.

* Version 0.0.8 (released 2002-12-13)

** Portability fixes (now works under Cygwin on Windows 2000).

** Bug fixes.

* Version 0.0.7 (released 2002-12-09)

** Apply all tables to entire strings, not just first hit.

** Fix bidi infloop.

* Version 0.0.5 (released 2002-12-07)

** Fix prohibited characters handling.

** Fix bidi.

** Renamed type (struct) stringprep_table_element to Stringprep_table_element.

** Renamed type stringprep_profile to Stringprep_profile.

** Renamed type (struct) stringprep_table to Stringprep_table.

** Added more self-tests.

* Version 0.0.4 (released 2002-12-06)

** Add unassigned code point handling, including self test cases.

** Portability fixes.

* Version 0.0.3 (released 2002-11-30)

** Exported utility function `stringprep_utf8_to_unichar', complementary
to existing `stringprep_unichar_to_utf8'.

** Renamed `stringprep_utf8_to_ucs4_fast' to `stringprep_utf8_to_ucs4' to
clean up API. The old entry point is maintained for binary backwards
compatibility though.

** The distribution is from now on signed using GnuPG.

** Bug fixes.

* Version 0.0.2 (released 2002-11-07)

** NFKC self test.

** Bug fixes.

* Version 0.0.1 (released 2002-11-06)

** Add utility functions stringprep_locale_charset(), stringprep_convert() 
and stringprep_locale_to_utf8 () that can be used to convert text from
system's locale into UTF-8, which should be done before invoking
stringprep().  The functions requires iconv() in the operating system.

** An example program (example.c) that illustrates how libstringprep can be
used is included.

** The pkg-config --libs output should now include necessary -R options.

* Version 0.0.0 (released 2002-11-05)

** Initial release

----------------------------------------------------------------------
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
