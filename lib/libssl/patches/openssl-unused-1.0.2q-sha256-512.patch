--- build/crypto/engine/eng_cryptodev.c.davidm	2019-01-03 10:45:39.503532619 +1000
+++ build/crypto/engine/eng_cryptodev.c	2019-01-03 16:05:15.183493704 +1000
@@ -199,8 +199,16 @@
         CRYPTO_SHA1_HMAC, NID_hmacWithSHA1, 20
     },
     {
-        CRYPTO_RIPEMD160_HMAC, NID_ripemd160, 16
-        /* ? */
+        CRYPTO_SHA2_256_HMAC, NID_hmacWithSHA256, 32
+    },
+    {
+        CRYPTO_SHA2_384_HMAC, NID_hmacWithSHA384, 48
+    },
+    {
+        CRYPTO_SHA2_512_HMAC, NID_hmacWithSHA512, 64
+    },
+    {
+        CRYPTO_RIPEMD160_HMAC, NID_ripemd160, 20
     },
     {
         CRYPTO_MD5_KPDK, NID_undef, 0
@@ -215,6 +223,15 @@
         CRYPTO_SHA1, NID_sha1, 20
     },
     {
+        CRYPTO_SHA2_256, NID_sha256, 32
+    },
+    {
+        CRYPTO_SHA2_384, NID_sha384, 48
+    },
+    {
+        CRYPTO_SHA2_512, NID_sha512, 64
+    },
+    {
         0, NID_undef, 0
     },
 };
@@ -342,8 +359,9 @@
         sess.mackeylen = digests[i].keylen;
         sess.cipher = 0;
         if (ioctl(fd, CIOCGSESSION, &sess) != -1 &&
-            ioctl(fd, CIOCFSESSION, &sess.ses) != -1)
+            ioctl(fd, CIOCFSESSION, &sess.ses) != -1) {
             nids[count++] = digests[i].nid;
+	}
     }
     put_dev_crypto(fd);
 
@@ -966,6 +984,51 @@
     sizeof(struct dev_crypto_state),
 };
 
+const EVP_MD cryptodev_sha256 = {
+    NID_sha256,
+    NID_undef,
+    SHA256_DIGEST_LENGTH,
+    EVP_MD_FLAG_ONESHOT,
+    cryptodev_digest_init,
+    cryptodev_digest_update,
+    cryptodev_digest_final,
+    cryptodev_digest_copy,
+    cryptodev_digest_cleanup,
+    EVP_PKEY_NULL_method,
+    SHA256_CBLOCK,
+    sizeof(struct dev_crypto_state),
+};
+
+const EVP_MD cryptodev_sha384 = {
+    NID_sha384,
+    NID_undef,
+    SHA384_DIGEST_LENGTH,
+    EVP_MD_FLAG_ONESHOT,
+    cryptodev_digest_init,
+    cryptodev_digest_update,
+    cryptodev_digest_final,
+    cryptodev_digest_copy,
+    cryptodev_digest_cleanup,
+    EVP_PKEY_NULL_method,
+    SHA512_CBLOCK,
+    sizeof(struct dev_crypto_state),
+};
+
+const EVP_MD cryptodev_sha512 = {
+    NID_sha512,
+    NID_undef,
+    SHA512_DIGEST_LENGTH,
+    EVP_MD_FLAG_ONESHOT,
+    cryptodev_digest_init,
+    cryptodev_digest_update,
+    cryptodev_digest_final,
+    cryptodev_digest_copy,
+    cryptodev_digest_cleanup,
+    EVP_PKEY_NULL_method,
+    SHA512_CBLOCK,
+    sizeof(struct dev_crypto_state),
+};
+
 const EVP_MD cryptodev_md5 = {
     NID_md5,
     NID_undef,
@@ -998,6 +1061,15 @@
     case NID_sha1:
         *digest = &cryptodev_sha1;
         break;
+    case NID_sha256:
+        *digest = &cryptodev_sha256;
+        break;
+    case NID_sha384:
+        *digest = &cryptodev_sha384;
+        break;
+    case NID_sha512:
+        *digest = &cryptodev_sha512;
+        break;
     default:
 # endif                         /* USE_CRYPTODEV_DIGESTS */
         *digest = NULL;
