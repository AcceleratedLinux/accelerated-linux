hostname 9400-UA

echo "Mounting filesystems..."
mount -t proc proc /proc
mount -t sysfs sys /sys
mkdir -m 755 /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=256M tmpfs /tmp
mount -t tmpfs -o size=256M tmpfs /var
mkdir -m 755 /dev/hugepages
mount -t hugetlbfs none /dev/hugepages
mkdir -m 1777 /var/tmp
mkdir -m 755 /var/log
mkdir -m 755 /var/run
mkdir -m 1777 /var/lock
mkdir -m 755 /var/empty
mkdir -m 755 /var/mnt

# make sure we dont see all errors
echo 6 > /proc/sys/kernel/printk

# Enable i350 virtual network interfaces if present.
for pcidev in /sys/bus/pci/devices/0000:*
do
	vendor=$(cat $pcidev/vendor)
	device=$(cat $pcidev/device)
	if [ "$vendor" = 0x8086 -a "$device" = 0x151f ]
	then
		echo 7 > $pcidev/sriov_numvfs
	fi
done

# rename interfaces to match rear label
ip link set eth4 name bmc
ip link set eth3 name eth4
ip link set eth2 name eth3
ip link set eth1 name eth2
ip link set eth0 name eth1

# init devices before we need any
cp -ra /lib/udev/devices/. /dev

# opt filesystem
e2fsck -p /dev/flash/opt
mount -t ext4 /dev/flash/opt /opt

# fixup environments stuff for emulators,  just touch
# /opt/bootenv.img and we fixup the rest
cat /etc/fw_env_hw.config > /etc/fw_env.config
if [ -f /opt/bootenv.img ]; then
	echo "Using non-coreboot env ..."
	echo "/opt/bootenv.img 0 0x80000" > /etc/fw_env.config
	if [ ! -s /opt/bootenv.img ]; then
		dd if=/dev/zero of=/opt/bootenv.img bs=524288 count=1
		# create the first  entry to get setup clean
		fw_setenv ethaddr 00:27:04:03:02:02
	fi
fi

echo "Starting watchdog ..."
watchdog /dev/watchdog

# allow easier installation of VM images
if [ -f /opt/setup-new-device ]; then
	/bin/setup-new-device.sh < /dev/console > /dev/console 2>&1
	rm -f /opt/setup-new-device
fi

echo "Initializing network interfaces..."
echo 1 >/proc/sys/net/ipv4/conf/all/promote_secondaries
ifconfig lo 127.0.0.1
setmac -i eth4,eth1,eth2,eth3,bmc -u -n 5
/etc/switch.sh

if [ "$(fw_printenv factory 2> /dev/null)" = "factory=enabled" ]; then
	/etc/factory
	exit 0
fi
if [ "$(fw_printenv emctest 2> /dev/null)" = "emctest=enabled" ]; then
	# Use the same setup as for factory testing
	/etc/factory
	exit 0
fi

echo "Mounting config filesystem ..."
if ! mount --bind /opt/config /etc/config
then
	echo "Cannot bind mount /etc/config to /opt/config..."
	echo "Using tmpfs for /etc/config."
	mount -t tmpfs -o size=4M tmpfs /etc/config
	touch /etc/config/.init
fi
[ "$(echo /etc/config/*)" = '/etc/config/*' ] && touch /etc/config/.init

if [ -f /etc/config/.init ]; then
	echo "Factory defaulting config ..."
	filter="($|/ssh_host_rsa_key|/ssh_host_dsa_key|/ssh_host_key|/id_rsa|/id_dsa|/identity|/accns.pem|/accns.crt|/unique.crt|/.init2)"
	[ -f /etc/config/.init2 ] && filter='$'
	touch /etc/config/.init2
	find /etc/config -name '*' |
		egrep -v "/etc/config$filter" |
		xargs rm -rf
	cp -ra /etc/default/. /etc/config/.
	echo "Factory default settings restored" > /etc/config/reboot_msg
else
	rm -f /etc/config/.init2
fi
cat /etc/inittab.d/* > /etc/inittab

# speed up crypto
echo "Enabling parrallel crypto ..."
crconf add driver "pcrypt(authenc(hmac(sha1),cbc(aes)))" type 3 2> /dev/null

# do the rc script processing
actiond &

cat /etc/motd

exit 0
