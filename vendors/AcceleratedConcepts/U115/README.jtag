
U115 JTAG
-----------

The openocd jtag package can be used with the Armada-380 based U115
boards. It can quite easily be used to load boot code (like u-boot) and
then from there you can program the NAND flash.

As of this writing I am using openocd-0.7.0, with local bug fixes. Later
versions may work without change (best chance is using the latest source
from the openocd git tree). I'll keep this updated as support in openocd
improves.

I have used a couple of different JTAG USB based debuggers with success.
I expect most other standard types of USB jtag dongle would work. I had
no problems with the Amontec JTAGkey USB based jtag debug dongle, and
the JTAG Lock Pick Tiny.

With the JTAG adapter conected to the U115 board run openocd with:

    sudo openocd -f tools/openocd/targets/u115.cfg

Then on another console telnet to the openocd daemon:

    telnet localhost 4444

Then issue the following commands:

    reset
    meminit
    loaduboot
    resume

This initial "meminit" step will mnost likely produce no serial port debug.
By default our u-boot will also produce no serial port console trace unless
the ERASE button is held in when you "resume" executing it after load.

If you have held in the ERASE button and have the serial console enabled
then you can break into the u-boot command line and "run netload" and
that will network load a linux firmware image and run it.

Note that running the "meminit" and "loaduboot" commands on an already flash
programmed unit is more problematical. Generally you need to "reset" and
"halt" quite quickly - even then the memory initializer code is likely to have
run. This is ok, but don't run "meminit" again, only run "loaduboot" now.
To run the reset/halt fast enough issue the commands on a single line:

    reset ; halt
    loaduboot

FLASH
-----

To setup the NAND flash from the linux command line you need to do something
like the following:

    ifconfig eth0 A.B.C.D
    netflash -n -i -k -b -r /dev/flash/boot W.X.Y.Z u-boot.bin
    /etc/mkffs
    netflash -i W.X.Y.Z image.bin

The unit is now fully flash programmed. On the next reboot you should again
break into u-boot and set the units MAC addresses into the u-boot environment. 
Do this with the following u-boot commands:

    setenv ethaddr 00:27:04:03:02:01
    saveenv

Or you can do the same thing from within linux using "fw_setenv".


FACTORY FLASH
-------------

To generate the ECC version of the boot loader for the factory,  program the
bootloader into flash and then run the following command:

    nanddump -l 0x100000 -f /tmp/u-boot-with-ecc.bin /dev/flash/boot


BOOTING FROM SERIAL
-------------------

The built-in boot ROM of the Armada-380 CPU has the facility to boot from
the serial port. The U115 is strapped in hardware to boot from NAND flash,
but if the NAND is empty then the BootROM will eventually give up on the
flash and listen on the serial port. You will see the BootROM try the flash
on the serial port and eventually get to this:

    ....
    BootROM: Bad header at offset 03FD0000
    BootROM: Bad header at offset 03FE0000
    BootROM: Bad header at offset 03FF0000
    BootROM: Trying UART

At this point you need to send it the boot-me-from-serial command sequence.
That is pretty easy, just do this:

    echo -e -n '\0273\0021\0042\0063\0104\0125\0146\0167' > /dev/ttyUSB0

Where /dev/ttyS4 was the serial port in this case. The BootROM will respond
with this on the console:

    Pattern detected on UART0 (Boot)

Now it is expecting to get the boot loader image using X-modem. Todo this I
exit from tip, and then run the "sx" command:

  sx u-boot-uart.bin < /dev/ttyUSB0 > /dev/ttyUSB0

This should run through and push out the entire image. Note that you need
to send it a UART boot image, not the usual NAND boot image (u-boot.bin)
that we program into the NAND flash. A UART boot image is also compiled in
our normal u-boot building process, so you just need to go find it. It will
be something like: u-boot-a38x-20151_T1.0.nand-uart.bin.

As soon as the whole of the binary image is pushed out the Armada 380 will
start running the code. You need to quickly reconnect tip so you can see
the usual boot mesages.

