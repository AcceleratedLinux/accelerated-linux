#!/bin/sh
#
# SIM slot selection script for Sprite platform

usage()
{
	echo "usage: sim [1|2|-n]"
	echo "Porter SIM slot tool (2 SIM slots)"
	echo "MC7455/MC7430 - 2 SIM slots"
	echo "Other modems  - 1 SIM slot"
	echo
	echo "	1	select SIM slot 1"
	echo "	2	select SIM slot 2"
	echo "	-n	print number of SIM slots"
}

log()
{
	logger -t sim "$@"
}

case "$1" in
-h|--help|help)
	usage 1>&2
	exit 0
	;;
esac

sim_mc74xx()
{
	if [ "$#" = 0 ]; then
		# Get SIM slot
		# NOTE: The !UIMS? command is MC7455/MC7430 specific
		! resp=$(modem at '!UIMS?' 2> /dev/null) && log "Error sending '!UIMS?' AT command to modem" && exit 1
		sim_slot=$(echo "$resp" | sed -rn "s/.*!UIMS: ([0-9]+).*/\1/p")
		[ -z "$sim_slot" ] && log "Could not determine current SIM slot" && exit 1
		echo "$((sim_slot + 1))"
		exit 0

	elif [ "$1" = '-n' ]; then
		# The Sprite has 2 SIM slots, meaning there exists SIM slots numbered on the range [ 1, 2 ].
		echo "2"
		exit 0

	else
		# Set SIM slot
		sim_slot="$(echo $1 | sed -rn 's/(SIM)?([0-9]+)/\2/Ip')"
		[ -z "$sim_slot" ] && log "SIM slot set command failed. '$1' is not a valid SIM slot identifier (e.g. 1, SIM1, 2, SIM2)" && exit 1
		[ "$sim_slot" -lt 1 -o "$sim_slot" -gt 2 ] && log "SIM slot set command failed. MC7455/MC7430 supports SIM1 and SIM2 only" && exit 1

		# Check if changing slots is a noop, but continue if the current SIM slot can't be determined for some reason
		current_sim_idx=$(modem at '!UIMS?' 2> /dev/null | sed -rn "s/.*!UIMS: ([0-9]+).*/\1/p")
		[ "$((sim_slot - 1))" = "$current_sim_idx" ] && log "SIM slot set command has no effect. SIM$sim_slot is already selected" && exit 0

		sim_index=$((sim_slot - 1)) # Map SIM slot numbers (i.e. 1, 2) to indices (0, 1)
		modem at "!UIMS=$sim_index" &> /dev/null
		ret=$?
		if [ "$ret" != 0 ] ; then
			# If the first SIM select failed, try enabling the custom AT command
			log "Attempting to enable SIM slot AT command"
			modem at '!ENTERCND="A710"' &> /dev/null
			modem at '!CUSTOM="UIM2ENABLE",1' &> /dev/null
			modem at '!ENTERCND=""' &> /dev/null
			modem at "!UIMS=$sim_index" &> /dev/null
			ret=$?
		fi
		if [ "$ret" = 0 ]; then
			# If called through sprite_sim, the sim_switch_reason will be "manual".
			# Otherwise, this must be an automatic switch.
			idx="$(modem idx)"
			reason="$(runt get mm.modem.$idx.status.sim_switch_reason)"
			/bin/sprite_event "$(runt get network.interface.control.device)" sim_change "$sim_slot" "${reason:-automatic}" 2> /dev/null
			log "Successfully set SIM$sim_slot active. Resetting modem"
			# Reset and set the do_not_connect flag so we don't continue trying to
			# connect while the modem is going down
			modem cli -r \
				&& runt set mm.modem.$idx.do_not_connect y

		else
			log "Failed to set SIM$sim_slot active"
		fi
		exit $ret
	fi
}

sim_single()
{
	if [ "$#" = 0 ]; then
		echo "1"
		exit 0

	elif [ "$1" = '-n' ]; then
		echo "1"
		exit 0

	else
		# Set SIM slot
		sim_slot="$(echo $1 | sed -r 's/(SIM)?([0-9]+)/\2/I')"
		[ -z "$sim_slot" ] && log "SIM slot set command failed. '$1' is not a valid SIM slot identifier (e.g. 1, SIM1, 2, SIM2)" && exit 1
		[ "$sim_slot" != 1 ] && log "SIM slot set command failed. Single-SIM modem supports SIM1 only" && exit 1
		log "SIM slot set command has no effect. SIM$sim_slot is already selected"
		exit 0
	fi
}

sim_none()
{
	log "Could not perform SIM function. No modem detected"
	exit 1
}

case "$(modem model)" in
MC7455|MC7430) sim_mc74xx "$@" ;;
'')            sim_none "$@" ;;
*)             sim_single "$@" ;;
esac

exit 0
