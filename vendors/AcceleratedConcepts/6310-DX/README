
6310-DX
-------

The preferred recovery load mechanism on the 6310-DX is via the USB port.
You will need a specially crafted cable that you can connect to what is
otherwise the modem USB pins (on the 16 pin modem connector header).
This cable connects to the top inner most 3 pins of that header,
(ground to pin 1) and the other end is the usual USB connector.

To carry out a USB recovery load you would normally need to jumper the
header that enables USB load. IF the 6310-DX flash is currently empty then
the Freescale iMX6 CPU will automatically fall back to the USB recovery
load mode (no header jumping required).

To load a boot loader through the USB you need Freescales "imx_usb" tool
installed on your Linux PC development system.

Power up the 6310-DX with the USB connected to your Linux PC. Check that
the USB load device was detected properly:

  lsusb | grep -i freescale

It should report back with something similar to this if found:

  Bus 003 Device 011: ID 15a2:0080 Freescale Semiconductor, Inc. 

The USB load process is straight forward from a compiled tree:

  imx_usb -v boot/build/uboot-imx/u-boot.imx

You may need to run it as root.

Within a few seconds the usual u-boot boot up messages should come out of
the serial console port of the 6310-DX.



FLASH PROGAMMING u-boot
-----------------------

The process to flash the u-boot loader into flash memory is a little
different than other Accelerated boards. This is due to the unusual flash
and ECC layout used by Freescale's internal iMX6 CPU boot loader.

The process is now essentially a 2 step process from a 6310-DX shell login:

  netflash -iknb -R /tmp/u-boot-nand.imx 192.168.0.22 u-boot-nand.imx
  kobs-ng init -v /tmp/u-boot-nand.imx

You cannot directly netflash the u-boot binary.



FACTORY FLASH
-------------

The factory pre-program flash image file is not automatially generated as
part of the firmware compilation. Due to the unusual layout and ECC required
it must be read from flash after installed onto a 6310-DX. Even worse is that
you cannot read the raw NAND flash contents from Linux itself - you need to
read it from u-boot.

So to generate the factory boot loader file run the following command from
the u-boot command line on a 6310-DX which has had the boot loader required
already flashed into the boot partition:

  nand read.raw 0x81000000 0 0xa00
  md.b 0x81000000 0x00528000

You will need to capture the serial output on your development server.
It will take quite a few minutes (at least 20+) to dump out the boot loader
flash contents.

On your Linux development server you now need to take that capture serial
console output and turn it into the pre-program binary file. First edit
the captured serial output to remove any lines not part of the hexdump.
Modify the address to start the dump addresses from 0x00000000 (in "vim"
you can use a command like "1,$s/81/00/g"). The use the xxd tool to
convert it to a binary file.

  xxd -r < console-output > u-boot-with-ecc.bin

Note that you must use a device with a NAND flash that has no Bad Blocks
within the boot loader flash partition (which is the first 5MB of flash).
The factory based programmer will rely on a boot loader image that has a
pristine in-flash boot loader section. Bad Blocks will force a different
layout - and that will break real device booting on any other flash device.

You can check for location of bad blocks during the kernel boot on the
6310-DX device. Look for the NAND flash discovery messages during boot and
it will list the Bad Block locations:

  nand: device found, Manufacturer ID: 0x2c, Chip ID: 0xda
  nand: Micron MT29F2G08ABAEAWP
  nand: 256 MiB, SLC, erase size: 128 KiB, page size: 2048, OOB size: 64
  gpmi-nand 1806000.gpmi-nand: enable the asynchronous EDO mode 5
  Scanning device for bad blocks
  Bad eraseblock 81 at 0x000000a20000
  Bad eraseblock 146 at 0x000001240000
  Bad eraseblock 2044 at 0x00000ff80000
  5 ofpart partitions found on MTD device gpmi-nand
  Creating 5 MTD partitions on "gpmi-nand":
  0x000000000000-0x000000500000 : "u-boot"
  0x000000500000-0x000000600000 : "u-boot-env"
  0x000000600000-0x000000800000 : "log"
  0x000000800000-0x000010000000 : "flash"
  0x000000000000-0x000010000000 : "all"
  gpmi-nand 1806000.gpmi-nand: driver registered.

