
echo "Mounting filesystems..."
mount -t proc proc /proc
mount -t sysfs sys /sys
mkdir -m 755 /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=256M tmpfs /tmp
mount -t tmpfs -o size=256M tmpfs /var
mkdir -m 755 /dev/hugepages
mount -t hugetlbfs none /dev/hugepages
mkdir -m 1777 /var/tmp
mkdir -m 755 /var/log
mkdir -m 755 /var/run
mkdir -m 1777 /var/lock
mkdir -m 755 /var/empty
mkdir -m 755 /var/mnt
mkdir /var/log/enviro
mkdir /var/log/enviro/emd
mkdir /var/log/enviro/rpc
mkdir /var/log/enviro/ups
mkdir /var/log/enviro/powersupply
mkdir /var/mnt
mkdir /var/run/config
mkdir /var/run/config/mnt
mkdir /var/run/dbus
mkdir /var/run/power
mkdir /var/run/portmanager
mkdir /var/run/cascade
mkdir /var/run/sshforwards
mkdir /var/run/.switch
mkdir /var/run/.modem
mkdir /var/run/.sessions
chmod 700 /var/run/.sessions
if [ -f /libexec/udev/udevd ]; then
	mkdir /var/run/udev
fi
mkdir /var/state
mkdir /var/lock
mkdir /var/empty
mkdir -p /dev/bus/usb
mkdir -p /var/spool/cron/crontabs
touch /var/log/wtmp
touch /var/run/utmp
chmod a-w /var/run/utmp

# make sure we dont see all errors
#echo 6 > /proc/sys/kernel/printk

# Start infod
if [ -x /bin/infod ]; then
	/bin/infod
fi

# initialise devices before we need them
/etc/rc.dev

# the active main boot drive in /dev/sdX format
DRIVE=$(stat -c "%t%02T %n" /dev/sd[a-z][0-9] | sed -n 's?'$(stat -c %D /)' \(/dev/sd.\).*?\1?p')

# Fix our /dev/flash devices depending on boot device
# we use symbolic links otherwise grub-install gets it wrong
mkdir -p /dev/flash
rm -f /dev/flash/*
ln -s ${DRIVE}  /dev/flash/all
ln -s ${DRIVE}1 /dev/flash/bios
ln -s ${DRIVE}2 /dev/flash/grub
ln -s ${DRIVE}3 /dev/flash/image
ln -s ${DRIVE}4 /dev/flash/image1
ln -s ${DRIVE}5 /dev/flash/opt

# /boot/grub filesystem
mount /dev/flash/grub /boot/grub

# opt filesystem
# if we have a disk, no opt, and 4 partitions then add an opt that uses the
# rest of the disk at partition 5
NUM=$(parted --script -- $DRIVE print 2> /dev/null | egrep '^ *[0-9] ' | wc -l)
OPT=$(parted --script -- $DRIVE print 2> /dev/null | egrep '^ *5 ' | grep ext4)
if [ "$DRIVE" -a -z "$OPT" -a "$NUM" -eq 4 ]; then
    echo "Creating new OPT filesystem..."
    last=$(parted --script -- $DRIVE unit s print | awk '/^ *[0-9]/ { gsub("s","",$3); print $3 }' | tail -1)
    free=$((${last:-0}+1))
    parted --script -- $DRIVE mkpart primary ext4  ${free}s -0
    parted --script -- $DRIVE name 5 Opt
    mkfs.ext4 -F ${DRIVE}5
    mount -t ext4 ${DRIVE}5 /opt
    mkdir /opt/config
    touch /opt/config/.init /opt/config/.init2
    umount /opt
else
    echo "Mounting OPT filesystem..."
fi

fsck.ext4 -p /dev/flash/opt
mount -t ext4 /dev/flash/opt /opt

rm -f /opt/boot
ln -s /boot/grub /opt/boot

echo "Starting watchdog ..."
watchdog /dev/watchdog

echo "Initializing network interfaces..."
echo 1 >/proc/sys/net/ipv4/conf/all/promote_secondaries
ifconfig lo 127.0.0.1
if [ "$(fw_printenv -n ethaddr 2> /dev/null)" ]; then
	setmac -i eth1,eth2,sfp1,sfp2 -u -n 4
fi

echo "Mounting config filesystem ..."
if ! mount --bind /opt/config /etc/config
then
	echo "Cannot bind mount /etc/config to /opt/config..."
	echo "Using tmpfs for /etc/config."
	mount -t tmpfs -o size=4M tmpfs /etc/config
	touch /etc/config/.init
fi
[ "$(echo /etc/config/*)" = '/etc/config/*' ] && touch /etc/config/.init

if [ -f /etc/config/.init ]; then
	echo "Factory defaulting config ..."
	filter="($|/ssh_host_rsa_key|/ssh_host_dsa_key|/ssh_host_key|/id_rsa|/id_dsa|/identity|/accns.pem|/accns.crt|/unique.crt|/.nocrypt|/.init2|/random-seed)"
	[ -f /etc/config/.init2 ] && filter='($|/random-seed)'
	touch /etc/config/.init2
	find /etc/config -name '*' |
		egrep -v "/etc/config$filter" |
		xargs rm -rf
	cp -ra /etc/default/. /etc/config/.
	echo "Factory default settings restored" > /etc/config/reboot_msg
else
	rm -f /etc/config/.init2
fi

cat /etc/inittab.d/* > /etc/inittab

random_seed restore

# config command complains if serial port file doesnt exist
touch /var/run/serial-ports

# Fixup users and groups
if [ ! -d /etc/config/users ]; then
    rm -rf /etc/config/users
    mkdir -p /etc/config/users
fi

if [ -f /etc/scripts/system-fix-groups ]; then
    echo "Checking for standard system groups"
    sh /etc/scripts/system-fix-groups
fi

# Start udev
if [ -f /libexec/udev/udevd ]; then
	/libexec/udev/udevd --daemon --children-max=1
	/bin/udevadm trigger
	/bin/udevadm settle
fi

modelname=$(config -g config.system.model | cut -f2- -d' ')

# if the model name hasn't been set at all, construct it from the model code
if [ -z "$modelname" ]; then
	# Pull the model code from the version string, then parse it
	# and try to build up a more complete code if the product needs it.
	# also, try and determine a model name for products that have a name.
	modelcode="$MODEL"
	if echo "$MODEL" | grep im72 >& /dev/null; then
		modelcode=`/bin/setfset -qm | cut -f2 -d" " | tr [A-Z] [a-z]`
	elif echo "$MODEL" | grep cm71 >& /dev/null; then
		modelcode=`/bin/setfset -qm | cut -f2 -d" " | tr [A-Z] [a-z]`
	elif echo "$MODEL" | grep acm7 >& /dev/null; then
		modelcode=`/bin/setfset -qm | cut -f2 -d" " | tr [A-Z] [a-z]`
	fi

	# if the new name has been specified explicitly, use that;
	# otherwise, use the model code in all caps as the name
	if [ -z "$modelname" ]; then
		modelname=`echo "$modelcode" | tr '[a-z]' '[A-Z]'`
	fi

	config -s config.system.model="$modelname"
fi

if [ -f /etc/config/hostname ]; then
    hostname=`cat /etc/config/hostname`
else
    hostname=`echo "$modelname" | tr '[A-Z]' '[a-z]' | tr ' ' '-'`
fi
hostname "$hostname"

if [ -f /etc/scripts/migrate ]; then
    NPORTS=$NPORTS MODEL=$MODEL sh /etc/scripts/migrate
fi

sh /etc/netstart
sh /etc/rc.firewall boot
sh /etc/rc.firewall6 boot

# Set default group ownership of log files
chgrp admin /var/log
chmod g+s /var/log

if [ -x /bin/portmap ]; then
    echo "Starting RPC portmapper"
    /bin/portmap &
fi
if [ -f /etc/config/crontab.root ]; then
    echo "Configuring Cron Daemon"
    crontab /etc/config/crontab.root
fi
if [ -x /bin/swmon ]; then
    echo "Starting Switch Monitoring Daemon"
    /bin/swmon
fi
if [ -x /bin/tftpd -a -f /etc/scripts/system-init-fileserver ]; then
    echo "Initialising TFTP Server environment"
    sh /etc/scripts/system-init-fileserver
fi
if [ -x /bin/dhcpd -a -f /etc/scripts/switch-config ]; then
    echo "Initialising DHCP Server environment"
    touch /var/run/dhcpd-eth1.leases
fi
if [ -x /bin/pango-querymodules -a ! -f /etc/config/pango/pango.modules ]; then
    [ -d /etc/config/pango ] || mkdir /etc/config/pango
    pango-querymodules > /etc/config/pango/pango.modules
fi

progressbar 95


if [ -x /bin/upsd ]; then
    echo "Initialising NUT Server environment"
    mkdir -p -m 700 /var/state/ups
    mkdir -p -m 700 /var/log/ups
    chown ups:nobody /var/state/ups /var/log/ups
    chown root:serial /dev/port*

fi

if [ -x /bin/smsd ]; then
    echo "Initialising SMS Gateway environment"
    mkdir /var/spool/sms
    mkdir /var/spool/sms/incoming
    mkdir /var/spool/sms/outgoing
    mkdir /var/spool/sms/outgoing/processing
    mkdir /var/spool/sms/outgoing/error
    mkdir /var/spool/sms/checked
    chgrp -R admin /var/spool/sms/
    chmod -R g+wrx /var/spool/sms/
fi

if [ -x /bin/vsftpd ]; then
	mkdir -p -m 0644 /var/run/vsftpd/empty
fi

# Suppress unwanted SNMP system notifications
mkdir -p /var/run/snmpd/
touch /var/run/snmpd/.dont_send_shutdown

echo "Running product specific configuration"
if [ -f /etc/scripts/initconf ]; then
	bash -x /etc/scripts/initconf
fi

# This section is a bit of a special case: to be done at the *end* of startup,
# which is why it's not in the migration script above. It only uses the
# migration directory as a placeholder to persist state, similar to the way
# the migration scripts work.

if [ ! -f /etc/config/migrate/initialboot.001 ]
then
	# run this in a subshell so we can force stdin to be from the console as
	# well. (during startup, stdin is /dev/null, stdout/stderr is /dev/console.
    # to check, can add an 'ls -la /proc/$$/fd' in the rc.local.)
	(modelname=$modelname VENDOR=$VENDOR bash /etc/scripts/initialboot.001) < /dev/console
	touch /etc/config/migrate/initialboot.001
fi

# Check/re-generate host keys in the background (SSH, HTTPS)
nice /etc/scripts/gen-keys &

exit 0
