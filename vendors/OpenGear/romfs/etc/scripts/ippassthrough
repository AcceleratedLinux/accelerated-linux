#!/bin/bash

# The external modem that has publicly routable IP address,
# practically only cellmodem is supported
EXT_LINK=$2

# The downstream interface connecting the 2nd level device,
# whom the external modem's traffic are passed through
#
# This parameter is not required for the update-firewall command
INT_INTF=$3

function usage ()
{
	echo "Usage: $0 start|stop|update-firewall upstream_linkname downstream_interface"
}

if [ -z "$EXT_LINK" ]; then
	usage
	exit 1
fi

EXT_INTF=`infod_client -o get -p config.$EXT_LINK.ppp.ifname | cut -f2`

# External IP address and default gateway
IP=`infod_client -o get -p config.$EXT_LINK.ppp.iplocal | cut -f2`
GW=`infod_client -o get -p config.$EXT_LINK.ppp.ipgateway | cut -f2`
if [ -z "$GW" ]; then
	GW=`infod_client -o get -p config.$EXT_LINK.ppp.ipremote | cut -f2`
fi

# External netmask, subnet address and netmask length
netmask=`infod_client -q -o get -p config.$EXT_LINK.ppp.ipsubnet`
if [ -n "$IP" ] && [ -n "$netmask" ]; then
	network=`ipcalc -n $IP $netmask | cut -d'=' -f2`
fi

prefix=24
if [ "$EXT_LINK" = "cellmodem" ]; then
	prefix=`infod_client -q -o get -p config.cellmodem.cellctl.status.ipv4subnet`
fi

TABLE=99

# FIB rules to enable route table $TABLE for passthrough and intercepted
# traffic, they are searched in the following order:
# . from 127.0.1.1	- for reply traffic of intercepted service
# . from $IP		- for traffic sent by downstream device
# . to $IP		- for inbound traffic targeting external modem
# . to $GW		- for any other traffic from downstream device
# . iif $EXT_INTF	- for any other inbound traffic
#
# These rules are placed on top of existing ones (e.g., by perifrouted)
# which means ip passthrough rules are searched first
RULES=(
	"iif $EXT_INTF"
	"to $GW"
	"to $IP"
	"from $IP"
	"from 127.0.1.1"
)

# The routes to put into route table $TABLE, including:
# . a host route for all traffic destined for external modem and thus
#   passed through downstream (except any traffic locally intercepted)
# . subnet and default routes for all traffic coming from downstream
# . a loopback route for intercepted services
#
# NOTE: this table has to be explicitly setup since it is not controlled
# by perifrouted
ROUTES=(
	"$IP     dev $INT_INTF"
	"$network/$prefix dev $EXT_INTF"
	"default via $GW dev $EXT_INTF"
	"127.0.0.0/8 dev lo"
)

function update_fwrules ()
{
	/bin/bash -c "$@"
}

function remove_FORWARD ()
{
	update_fwrules "/bin/iptables -t filter -D FORWARD -i $INT_INTF -o $EXT_INTF ! -s $IP -j Block"
}

function setup_FORWARD ()
{
	# Block any outgoing traffic via the external interface with
	# different source IP addresses
	update_fwrules "/bin/iptables -t filter -I FORWARD -i $INT_INTF -o $EXT_INTF ! -s $IP -j Block"
}


function remove_SNAT ()
{
	update_fwrules "/bin/iptables -t nat -F IPPassthroughMasq"
}

function setup_SNAT ()
{
	remove_SNAT

	# Set up SNAT rule for outgoing traffic via the external interface
	update_fwrules "/bin/iptables -t nat -A IPPassthroughMasq -o $EXT_INTF -j SNAT --to-source=$IP"
}

function remove_DNAT ()
{
	update_fwrules "/bin/iptables -t nat -F IPPassthroughNat"
}

function setup_DNAT ()
{
	localaddr=$1

	remove_DNAT

	for service in http https ssh; do
		enabled=`config -g config.ippassthrough.intercept.$service.enabled | cut -d' ' -f2-`
		if [ -z "$enabled" ] || [ "$enabled" != "on" ]; then
			continue
		fi

		localport=`config -g config.ippassthrough.intercept.$service.localport | cut -d' ' -f2-`
		port=`config -g config.ippassthrough.intercept.$service.port | cut -d' ' -f2-`
		if [ -z "$localport" ] || [ -z "$port" ]; then
			continue
		fi

		if [ -n "$localaddr" ]; then
			update_fwrules "/bin/iptables -t nat -A IPPassthroughNat -i $EXT_INTF -p tcp -m tcp --dport $port -j DNAT --to-destination $localaddr:$localport"
		else
			# When restoring the static/initial rules fall back on "wwan+" so as to
			# be consistent with the ones generated by the dialin configurator
			update_fwrules "/bin/iptables -t nat -A IPPassthroughNat -i wwan+ -p tcp -m tcp --dport $port -j DNAT --to-destination :$localport"
		fi
	done
}

case "$1" in
	start)
		logger -t ippassthough starting

		# Remove interface addresses for proxy_arp, which will remove
		# all its routes from the main route table
		ip -4 addr flush dev $EXT_INTF

		# Restore routes via the external modem
		ip route add $network/$prefix dev $EXT_INTF
		ip route add default via $GW dev $EXT_INTF

		# Setup policy routes for passthrough and intercepted traffic
		for r in "${ROUTES[@]}"; do ip route add $r table $TABLE; done
		for r in "${RULES[@]}"; do ip rule add $r table $TABLE; done

		# Update DNAT rules for intercepted services to make use of
		# 127.0.1.1 related FIB rules
		setup_DNAT 127.0.1.1

		setup_SNAT

		setup_FORWARD

		echo "1" > /proc/sys/net/ipv4/conf/$EXT_INTF/route_localnet

		# Enable proxy ARP to join the downstream device's interface
		# into the external modem's network
		echo "1" > /proc/sys/net/ipv4/conf/$INT_INTF/proxy_arp
		;;
	stop)
		logger -t ippassthrough stopping

		ip -4 addr add $IP dev $EXT_INTF

		for r in "${RULES[@]}"; do ip rule del $r; done
		ip route flush table $TABLE

		# If the stop is due to having been disabled:
		# . DNAT rules are removed
		# Whereas if the stop is due to link down (on ethernet ports):
		# . DNAT rules are updated to the initial version (without using 127.0.1.1)
		#   so that intercepted services are still working on external modem
		#
		# SNAT rule is always deleted since cellmodem has its address restored
		remove_SNAT
		remove_FORWARD
		enabled=`config -g config.ippassthrough.enabled | cut -d' ' -f2`
		if [ -z "$enabled" ] || [ "$enabled" != "on" ]; then
			remove_DNAT
		else
			setup_DNAT ""
		fi

		echo "0" > /proc/sys/net/ipv4/conf/$INT_INTF/proxy_arp
		;;
	update-firewall)
		enabled=`config -g config.ippassthrough.enabled | cut -d' ' -f2`
		if [ -z "$enabled" ] || [ "$enabled" != "on" ]; then
			exit 0
		fi

		status=`infod_client -q -o get -p conman.ippassthrough.status`
		if [ -z "$status" ] || [ "$status" != "up" ]; then
			exit 0
		fi

		setup_DNAT 127.0.1.1
		setup_SNAT
		setup_FORWARD
		;;
	*)
		usage
		exit 1
esac
exit 0
