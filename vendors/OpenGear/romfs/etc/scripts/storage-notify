#!/bin/sh
#
# This script is run when storage becomes available or unavailable,
# or when a service connects to different storage. This is the place
# for service-specific code to:
#  - initialize their service's use of the storage (eg make a subdirectory)
#  - signal related processes to re-scan the storage dir (/var/mnt/storage.S)
#  - Avoid writing /etc/ files here. Your service configurator should do that
#
# Arguments to this script will be:
#
#   $action  = add|remove|change|list
#   $storage = storage.<id>
#   $mnt     = /var/mnt/storage.<id>   (this may be a symlink)
#
# The meanings of $action are:
#
#   add    - the storage just became available, at $mnt/
#   remove - the storage disappeared and $mnt won't exist
#   change - a service's configuration changed which storage it is
#            using, and you should check the existence of $mnt/ to
#            know if the new storage is actually available.
#   list   - request to write to standard output lines of the form:
#               <service> <provider>

action="$1"
storage="$2"
mnt="$3"

#------------------------------------------------------------
# Helper functions

source /etc/scripts/config_get.inc

# Canonicalize a directory name for the purpose of
# determining which storage it belongs to.
# The canonicalized path will be written to stdout, and
# will be of the form /var/mnt/storage.S/...
#
# This function is safe to call even if the storage is
# unavailable, and/or the directory has not been created.
#
# It works by symlink-expanding leading components of a
# pathname until we hit a non-existent directory or a path
# starting with /var/mnt/storage.
# Caveat: it presumes there are no symlinks *out* of one
# storage and into another storage.
storage_canonical_dir () { # dir
    local dir=/     # physical dir, no trailing /
    local rel="$1"  # may lead with symlink component

    while [ -n "$rel" ]; do
        # normalize trailing . and .. in $dir
        case $dir in
          //*) dir="${dir#/}"; continue;;
          */.)  dir="${dir%/.}"; continue;;
          /.. | /.) dir=/; continue;;
          */..) dir="${dir%/*/..}"; continue;
        esac
        # move the first component from $rel
        # onto the end of $dir, so we can look at
        # normalizing just $dir
        case $rel in
          /*)  rel="${rel#/}"; continue;;
          */*) dir="${dir%/}/${rel%%/*}" rel="${rel#*/}";;
          *)   dir="${dir%/}/$rel" rel="";;
        esac
        # can we finish early?
        case $dir in /var/mnt/storage.*) break;; esac
        if [ -h "$dir" ]; then
           # $dir is a symlink; expand it
           local target="$(readlink "$dir")"
           case $target in
             /*)  dir=/;;         # target is absolute
             *)   dir="$dir/..";;   # relative to parent
           esac
           # push target onto head of $rel
           # it and $dir will be normalized next round
           rel="$target/$rel"
        elif [ ! -e "$dir" ]; then
           # missing directory? bail out
           break
        fi
    done
    echo "${dir%/}/$rel"
}

# Prints the storage provider associated with a path, or
# returns 1 if the path is unrelated to any storage provider.
storage_from_dir () { # dir
    local dir="$(storage_canonical_dir "$1")"
    case $dir in
       /var/mnt/storage.*)
            local tmp=${dir#/var/mnt/storage.}
            echo storage.${tmp%%/*};;
        *)
            return 1;;
    esac
}

# Safely creates the given directory, only calling mkdir -p if
# the enclosing storage is mounted.
# Returns success if the storage dir exists or could be created.
# (Callers may need to check permissions/ownership)
storage_safe_mkdir () { # dir
    # Bail out quick with success if $1/ exists already
    if [ -d "$1/." ]; then return 0; fi
    if local s=$(storage_from_dir "$1"); then
        # Check the storage volume is mounted first
        # so that we don't accidentally mkdir it
        if [ ! -d /var/mnt/$s/. ]; then return 1; fi
    fi
    mkdir -p "$1/" 2>&1 | logger -t $service -p daemon.err
    return ${PIPESTATUS[0]}
}

# Helper function that checks if the current event
# affects the given directory pathname.
event_affects_dir () {
    case $1 in
        $mnt | $mnt/*) return 0;;
    esac
    test "$storage" = $(storage_from_dir "$1")
}

#------------------------------------------------------------
# Storage consumer fragments begin here

# ftp, tftp
for service in ftp tftp; do
    enabled="$(config_get config.services.$service.enabled)"
    if [ "$enabled" != on ]; then
        continue
    fi
    dir="$(config_get config.services.$service.directory)"
    if ! event_affects_dir "$dir"; then
        continue
    fi
    case $action in
    add|change)
        if storage_safe_mkdir "$dir"; then
                chmod 775 "$dir"
                chgrp 9   "$dir"
        fi
        # No need to signal any processes
        ;;
    remove) :
        # don't need to do anything, servers should fail gracefully.
        # for example, ftpd will fail to chroot and close connection, and
        # existing connections will EIO or ENOENT.
        ;;
    list)
        echo "$service $dir"
        ;;
    esac
done

# eventlog

if [ "$(config_get config.eventlog.server.type)" = "storage" ]
then
    log_dir="$(config_get config.eventlog.server.path)"
    if ! event_affects_dir "$log_dir"; then
        continue
    fi
    log_storage="$(storage_from_dir "$log_dir")"
    logger -t $service "eventlog: $log_dir in $log_storage ($action)"


    eventlog_reload () {
        pkill -1 logd
        pkill -1 portmanager
    }

    case $action in
    change)
        storage_safe_mkdir "$log_dir"
        eventlog_reload
        ;;
    add)
        if [ "$storage" = "$log_storage" ]; then
            storage_safe_mkdir "$log_dir"
            eventlog_reload
        fi
        ;;
    remove)
        # do nothing; logd etc will fail on next write
        ;;
    list)
        echo "eventlog $log_storage"
        ;;
    esac
fi

# cellfw
dir="$(config_get config.cellmodem.firmware.directory)"
if [ "$dir" ]; then
    case $action in
    change|add)
    	storage_safe_mkdir "$dir"
	;;
    list)
    	echo "cellfw $dir"
	;;
    esac
fi


exit 0 # add new handler fragments above this line
