#!/bin/sh
hostname "$(fw_printenv -n serial)"

echo "Mounting filesystems..."
mount -t proc proc /proc
mount -t sysfs sys /sys
mkdir -m 755 /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=128M tmpfs /tmp
mount -t tmpfs -o size=32M tmpfs /var
mkdir -m 1777 /var/tmp
mkdir -m 755 /var/run
mkdir -m 1777 /var/lock
mkdir -m 755 /var/empty
mkdir -m 755 /var/mnt

# As shellcheck can't see this file in the building workstations FS, so throw's an
# error.  So, disable the error:
# shellcheck disable=SC1091
. /lib/varlog_setup.sh
# Setup the filesystem to host the /var/log.
setup_varlogfs 16

echo "Starting watchdog..."
watchdog /dev/watchdog

# make sure we dont see all errors
echo 6 > /proc/sys/kernel/printk

# initialise devices before we need them
/etc/rc.dev

echo "Configuring GPIOs..."
# dev mode jumper
echo 460 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio460/direction
echo 1 > /sys/class/gpio/gpio460/active_low

# Enable Cell module power
echo 361 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio361/direction
# Enable sim select GPIO
echo 360 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio360/direction
touch /var/run/sim_button # This file must be present before the sim daemon starts
# Enable cell detect GPIO
echo 362 > /sys/class/gpio/export

echo "Initializing network interfaces..."
echo 1 >/proc/sys/net/ipv4/conf/all/promote_secondaries
ifconfig lo 127.0.0.1

ip link set eth4 name sfp2
ip link set eth3 name sfp1
ip link set eth2 name eth3
ip link set eth1 name eth2
ip link set eth0 name eth1
setmac -i eth1,eth2,eth3,sfp1,sfp2 -u -n 5

if [ "$(fw_printenv factory 2> /dev/null)" = "factory=enabled" ]; then
	/etc/factory
	exit 0
fi
if [ "$(fw_printenv emctest 2> /dev/null)" = "emctest=enabled" ]; then
	# Use the same setup as for factory testing
	/etc/factory
	exit 0
fi

# handle /opt, contains modem firmware and maybe other goodies
echo "Mounting opt filesystem..."
if ! mount -t ext4 /dev/flash/opt /opt; then
	echo "Cannot mount /opt, reformatting..."
	mkfs.ext4 -F /dev/flash/opt
	mount -t ext4 /dev/flash/opt /opt
fi

{
	# Create /opt filesystem
	[ -d "/opt/config" ] || mkdir /opt/config
	[ -L "/opt/boot" ] || ln -s /efi/grub /opt/boot
}

echo "Mounting config filesystem ..."
if ! mount --bind /opt/config /etc/config
then
	echo "Cannot bind mount /etc/config to /opt/config..."
	echo "Using tmpfs for /etc/config."
	mount -t tmpfs -o size=4M tmpfs /etc/config
	touch /etc/config/.init
fi
[ "$(echo /etc/config/*)" = '/etc/config/*' ] && touch /etc/config/.init

if [ -f /etc/config/.init ]; then
	echo "Factory defaulting config ..."
	filter="($|/certs$|/certs/|/ssh_host_rsa_key|/ssh_host_dsa_key|/ssh_host_key|/id_rsa|/id_dsa|/identity|/accns.pem|/accns.crt|/unique.crt|/.nocrypt|/.init2|/factory.json|/cfd.json|/nv.json|/current.json|/validation.json|/shadow|/awusbdcerts|/descriptors|/.migrate|/random-seed)"
	[ -f /etc/config/.init2 ] && filter='($|/.migrate|/random-seed)'
	touch /etc/config/.init2
	find /etc/config -name '*' |
		grep -Ev "/etc/config$filter" |
		xargs rm -rf
	cp -ra /etc/default/. /etc/config/.
	echo "Factory default settings restored" > /etc/config/reboot_msg
else
	rm -f /etc/config/.init2
fi
if [ ! -f /etc/config/accns.json ]; then
	cp -ra /etc/default/. /etc/config/.
fi
if [ -f /etc/config/nv.json ] && [ ! -f /etc/config/.migrate ]; then
	echo "Pulling configuration from previous firmware..."
	if /usr/bin/migrate_to_dal; then
		cp /etc/config/identity/identity.pem /etc/config/ssl.pem
		touch /etc/config/.migrate
		echo "Configuration updated" >/etc/config/reboot_msg
	else
		echo "Failed to pull configuration"
	fi
fi
cat /etc/inittab.d/* > /etc/inittab

# cryptography disabled mode
if [ -e /etc/config/.nocrypt ] ; then
	sh /etc/nocrypt
	exit 0
fi

# Ensure that the serial driver is loaded before setting up mode
modprobe 8250_pci
modprobe gpio_pericom

# Enable all serial transceivers now that ports are in correct mode (sun break)
echo 493 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio493/direction

# The leds-gpio driver depends on pericom gpios which don't get created until
# we load the module.  We need to give that driver a bit of time to
# initialize before we start using them.
loop=6
while [ "$loop" -gt "0" ] && [ ! -e /sys/class/led/serlnk1 ]; do
	sleep .500
	loop=$((loop - 1))
done

# Reset device status LEDs before actions start... status LEDs all
# default to timer trigger
for delay_off in /sys/class/leds/*/delay_off
do
	echo 86400 > "$delay_off"
	echo 0 > "$(dirname "$delay_off")"/delay_on
done

# modem firmware updates
[ -f /etc/config/switch_firmware_carrier ] && sh /etc/config/switch_firmware_carrier

random_seed restore

# init processing
[ -x /etc/rcS ] && /etc/rcS

# do the rc script processing
actiond &

cat /etc/motd

echo 0 > /sys/kernel/persistent_mem/boot_attempts

exit 0
