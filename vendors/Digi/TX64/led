#!/bin/sh
#
# Action for TX64 specific LED setting
#
##############################################################
# allow script override
[ -x /etc/config/led ] && exec /etc/config/led "$@"
##############################################################
#exec 2>> /tmp/led.log
#set -x

case "$1" in
start)
	ledcmd -O ALL -o POWER
	exit 0
	;;
reload)
	;;
stop)
	# Firmware flash
	ledcmd -F POWER
	exit 0
	;;
*)
	echo "Usage: $0 {start|stop|reload}"
	exit 1
	;;
esac

##############################################################
# Update wifi leds
runt update network.wireless
eval $(config stop)
eval $(config start)
config load

led1=0
led2=0
aps=$(config keys network.wireless.ap)
for ap in $aps ; do
    ap=${ap%%.*}
    device="$(runt get network.wireless.ap.$ap.device)"
    if [ -n "$device" ]; then
        if ip link show $device up | grep -q "state UP"; then
            radio=$(config dump network.wireless.ap.$ap.radio)
            num="${radio//[![0-9]/}"
            [ $num = "1" ] && led1=1 || led2=1
        fi
    fi
done

clients=$(config keys network.wireless.client)
for client in $clients ; do
    client=${client%%.*}
    device="$(runt get network.wireless.client.$client.device)"
    if [ -n "$device" ]; then
        if ip link show $device up | grep -q "state UP"; then
            radio=$(config dump network.wireless.client.$client.radio)
            num="${radio//[![0-9]/}"
            [ $num = "1" ] && led1=1 || led2=1
        fi
    fi
done
eval $(config stop)

LED00="-O WIFI1 -O WIFI2" # both wifi leds off
LED10="-o WIFI1 -O WIFI2" # wifi1 on wifi2 off
LED01="-O WIFI1 -o WIFI2" # wifi1 off wifi2 on
LED11="-o WIFI1 -o WIFI2" # both wifi leds on

eval ledcmd \$LED$led1$led2

##############################################################
# Cellular LEDs

# The TX64 has one LED per modem for signal strength
# Off: No service.
# Yellow: Poor / Fair signal.
# Green: Good / Excellent signal.
update_signal_led() {
	idx=$1
	wan=$2

	case "$(runt get mm.modem.$idx.status.bars)" in
		5) SIGNAL="-o ${wan}_SIG_GREEN" ;;
		4) SIGNAL="-o ${wan}_SIG_GREEN" ;;
		3) SIGNAL="-o ${wan}_SIG_YELLOW" ;;
		2) SIGNAL="-o ${wan}_SIG_YELLOW" ;;
		1) SIGNAL="-o ${wan}_SIG_YELLOW" ;;
		*) SIGNAL="-O ${wan}_SIG_YELLOW -O ${wan}_SIG_GREEN" ;;
	esac
}

# TX64 service LED
# Off: No service.
# Blinking Green: 2G/3G/4G connection is coming up.
# Solid Yellow: 2G or 3G connection is up.
# Solid Green: 4G connection is up.
update_service_led() {
	idx=$1
	wan=$2

	if [ "$(runt get mm.modem.$idx.status.state)" = connected ]; then
		case "$(runt get mm.modem.$idx.status.gtech)" in
			4g) SERVICE="-o ${wan}_SERV_GREEN" ;;
			3g) SERVICE="-o ${wan}_SERV_YELLOW" ;;
			2g) SERVICE="-o ${wan}_SERV_YELLOW" ;;
			*) SERVICE="-O ${wan}_SIG_YELLOW -O WWAN${wwan_id}_SIG_GREEN" ;;
		esac
	elif [ "$(runt get mm.modem.$idx.status.state)" = disabled ]; then
		SERVICE="-O ${wan}_SERV_GREEN"
	else
		 SERVICE="-f ${wan}_SERV_GREEN"
	fi
}

idxs="$(modem idxs 2>/dev/null)"

for idx in $idxs; do
	port="$(runt get mm.modem.$idx.modem.port)"

	if [ -n  "$port" ]; then
		wan_port=${port#*/}
		wan="$(printf '%s\n' "$wan_port" | awk '{ print toupper($0) }')"

		update_signal_led "$idx" "$wan"
		update_service_led "$idx" "$wan"

		eval ledcmd $SERVICE $SIGNAL
	fi
done

##############################################################
# GNSS LED
#
# Off: GNSS is disabled
# Flashing: GNSS is enabled but does not have a valid fix
# On: GNSS is enabled and has a valid fix
#
case "$(runt get location.state)" in
    "Enabled, signal") gnss_led_state="-o" ;;
    "Enabled, no signal") gnss_led_state="-f" ;;
    *) gnss_led_state="-O" ;;
esac

ledcmd $gnss_led_state GNSS

##############################################################

exit 0
