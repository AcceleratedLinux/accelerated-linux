hostname "Digi IX15"

echo "Mounting filesystems..."
mount -t proc proc /proc
mount -t sysfs sys /sys
mount -t debugfs none /sys/kernel/debug
mkdir -m 755 /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=40M tmpfs /tmp
mount -t tmpfs -o size=32M tmpfs /var
mkdir -m 1777 /var/tmp
mkdir -m 755 /var/log
mkdir -m 755 /var/run
mkdir -m 1777 /var/lock
mkdir -m 755 /var/empty
mkdir -m 755 /var/mnt

echo "Starting watchdog..."
watchdog /dev/watchdog

# make sure we dont see all errors
echo 6 > /proc/sys/kernel/printk

# initialise devices before we need them
/etc/rc.dev

echo "Initializing network interfaces..."
ip link set eth0 name eth1
echo 1 >/proc/sys/net/ipv4/conf/all/promote_secondaries
ifconfig lo 127.0.0.1
setmac -i eth1 -u -n 1

echo "Initializing CELL interface control..."
# GPIO66 = Cell Module Reset (output, active low)
# GPIO118 = Cell Module SIM switch button (input, active low)
# GPIO119 = Cell Module Power (output, active low)
# GPIO120 = Cell Module SIM select (output)
# GPIO115 = SIM1 detect (input, 0=SIM detected)
# GPIO116 = SIM2 detect (input, 0=SIM detected)
echo 119 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio119/direction
echo 120 > /sys/class/gpio/export
echo low > /sys/class/gpio/gpio120/direction
echo 66 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio66/direction
echo 118 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio118/direction
echo falling > /sys/class/gpio/gpio118/edge
echo 115 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio115/direction
echo 116 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio116/direction

serial-mode /dev/serial/port1 init

# developer key
echo 86 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio86/direction

if [ "$(fw_printenv factory 2> /dev/null)" = "factory=enabled" ]; then
	/etc/factory
	exit 0
fi
if [ "$(fw_printenv emctest 2> /dev/null)" = "emctest=enabled" ]; then
	# Use the same setup as for factory testing
	/etc/factory
	exit 0
fi
if [ "$(fw_printenv emctest 2> /dev/null)" = "emctest=standalone" ]; then
	# run standalone emc noise generation
	/etc/emc
	exit 0
fi

echo "Mounting config filesystem..."
if ! mount -t ubifs ubi0:config /etc/config
then
	echo "Cannot mount /etc/config as ubifs, reformatting..."
	flash_erase /dev/flash/config 0 0
	echo "Mounting config filesystem after reformat..."
	if ! mount -t ubifs ubi0:config /etc/config
	then
		echo "Failed to mount flash based config filesystem"
		echo "Using tmpfs for /etc/config."
		mount -t tmpfs -o size=4M tmpfs /etc/config
	fi
	touch /etc/config/.init
fi
[ "$(echo /etc/config/*)" = '/etc/config/*' ] && touch /etc/config/.init

if [ -f /etc/config/.init ]; then
	echo "Factory defaulting config ..."
	filter="($|/ssh_host_rsa_key|/ssh_host_dsa_key|/ssh_host_key|/id_rsa|/id_dsa|/identity|/accns.pem|/accns.crt|/unique.crt|/.nocrypt|/.init2)"
	[ -f /etc/config/.init2 ] && filter='$'
	touch /etc/config/.init2
	find /etc/config -name '*' |
		egrep -v "/etc/config$filter" |
		xargs rm -rf
	cp -ra /etc/default/. /etc/config/.
	echo "Factory default settings restored" > /etc/config/reboot_msg
else
	rm -f /etc/config/.init2
fi
cat /etc/inittab.d/* > /etc/inittab

# cryptography disabled mode
if [ -e /etc/config/.nocrypt ] ; then
	sh /etc/nocrypt
	exit 0
fi

# handle /opt,  contains modem firmware and maybe other goodies
if grep -q '"opt"' /proc/mtd
then
	echo "Mounting opt filesystem...."
	if ! mount -t ubifs ubi0:opt /opt
	then
		echo "Cannot mount /opt as ubifs, reformatting..."
		flash_erase /dev/flash/opt 0 0
		echo "Mounting opt filesystem after reformat..."
		if ! mount -t ubifs ubi0:opt /opt
		then
			echo "Failed to mount flash based opt filesystem"
			# just leave the empty mount point (RO)
		fi
	fi
fi

# modem firmware updates
[ -f /etc/config/switch_firmware_carrier ] && sh /etc/config/switch_firmware_carrier

# init processing
[ -x /etc/rcS ] && /etc/rcS

# do the rc script processing
actiond &

cat /etc/motd

exit 0
