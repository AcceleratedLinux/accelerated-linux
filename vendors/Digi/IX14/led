#!/bin/sh
#
# Action for Digi/IX14 LEDs
#
##############################################################
# allow script override
[ -x /etc/config/led ] && exec /etc/config/led "$@"
##############################################################

WWAN_SERVICE_R=/sys/class/leds/WWAN_SERVICE_R
WWAN_SERVICE_G=/sys/class/leds/WWAN_SERVICE_G
WWAN_SERVICE_B=/sys/class/leds/WWAN_SERVICE_B
WWAN_SIGNAL_R=/sys/class/leds/WWAN_SIGNAL_R
WWAN_SIGNAL_G=/sys/class/leds/WWAN_SIGNAL_G
WWAN_SIGNAL_B=/sys/class/leds/WWAN_SIGNAL_B
PWR_B=/sys/class/leds/PWR_B

##############################################################
#exec 2>> /tmp/led.log
#set -x

# IX14 doesn't have the ledcmd tool, so we have to manually set the LED states accordingly
# brightness state indicates on/off state of LED, which can be set to any number 0-223
#   0 = off
#   223 = full on
# trigger state indicates flashing state of LED
#   none  = no flashing
#   timer = flash
#
findme_update() {
	if find-me state &>/dev/null; then
		# flash cellular service and signal strength LEDs green
		echo 'none'  > $WWAN_SERVICE_B/trigger
		echo 'none'  > $WWAN_SERVICE_R/trigger
		echo 'timer' > $WWAN_SERVICE_G/trigger
		echo '0'     > $WWAN_SERVICE_B/brightness
		echo '0'     > $WWAN_SERVICE_R/brightness
		echo '223'   > $WWAN_SERVICE_G/brightness

		echo 'none'  > $WWAN_SIGNAL_B/trigger
		echo 'none'  > $WWAN_SIGNAL_R/trigger
		echo 'timer' > $WWAN_SIGNAL_G/trigger
		echo '0'     > $WWAN_SIGNAL_B/brightness
		echo '0'     > $WWAN_SIGNAL_R/brightness
		echo '223'   > $WWAN_SIGNAL_G/brightness
		return 0
	else
		# Restore states, which are not set later in this script
		echo 'none'  > $WWAN_SIGNAL_B/trigger
		echo 'none'  > $WWAN_SIGNAL_R/trigger
		echo 'none'  > $WWAN_SIGNAL_G/trigger
		return 1
	fi
}

case "$1" in
start)
	echo "none" > ${PWR_B}/trigger
	exit 0
	;;
reload)
	# skip any LED state change done after the case statement so findme state takes precedence if enabled
	findme_update && exit
	;;
stop)
	exit 0
	;;
*)
	echo "Usage: $0 {start|stop|reload}"
	exit 1
	;;
esac

##############################################################

# Find the primary modem, or alternatively *any* modem
modem_name="$(modem name 2> /dev/null)"
idx="$(modem name="$modem_name" idx 2> /dev/null)"
# Find the first interface on the modem
for i in $(runt keys mm.map.interface_idx); do
	[ "$(runt get mm.map.interface_idx.$i)" = "$idx" ] \
		&& intf=$i && break
done

if [ "$(runt get network.interface.$intf.ipv4.up)" = 1 ] \
		|| [ "$(runt get network.interface.$intf.ipv6.up)" = 1 ]; then
	if [ "$(runt get surelink.ipv4_interface_$intf.passed)" = n \
			-o "$(runt get surelink.ipv6_interface_$intf.passed)" = n ]; then
		CELL=1
	elif [ "$(runt get mm.modem.$modem_name.status.gtech)" = 4g ]; then
		CELL=3
	else
		CELL=2
	fi
elif [ "$(runt get network.interface.$intf.ipv4.pending)" = 1 ] \
		|| [ "$(runt get network.interface.$intf.ipv6.pending)" = 1 ]; then
	CELL=1
else
	CELL=0 # not-valid, never going to work
fi

# WWAN Signal:
#  Green: Excellent signal. (5 bars)
#  Light green: Good signal (4 bars)
#  Yellow: Fair signal      (3 bars)
#  Orange: Poor signal      (2 bars)
#  Red: Very Poor signal    (1 bars)
#  Off: No signal.
if [ "$CELL" != 0 ]; then
	case "$(runt get mm.modem.$modem_name.status.bars)" in
	5) SIGNALR=0   ; SIGNALG=223 ; SIGNALB=0  ;;
	4) SIGNALR=31  ; SIGNALG=223 ; SIGNALB=31 ;;
	3) SIGNALR=127 ; SIGNALG=223 ; SIGNALB=0  ;;
	2) SIGNALR=223 ; SIGNALG=63  ; SIGNALB=0  ;;
	1) SIGNALR=223 ; SIGNALG=0   ; SIGNALB=0  ;;
	*) SIGNALR=0   ; SIGNALG=0   ; SIGNALB=0  ;;
	esac
else
	SIGNALG=0 ; SIGNALR=0 ; SIGNALB=0 ;
fi

# WWAN Service:
#
# When cellular is not connected:
#   Off: No service
#   Flashing yellow: Cellular is starting / connection is coming up
#
# When cellular is connected:
#   Solid yellow: Connected to 2G/3G
#   Solid green:  Connected to 4G
#   Solid blue:  Connected to 5G (future)
case "$CELL" in
0)	SERVICER=0   ; SERVICEG=0   ; SERVICEB=0 ; TRIG="none"  ;;
1)	SERVICER=127 ; SERVICEG=223 ; SERVICEB=0 ; TRIG="timer" ;;
2)	SERVICER=127 ; SERVICEG=223 ; SERVICEB=0 ; TRIG="none"  ;;
3)	SERVICER=0   ; SERVICEG=223 ; SERVICEB=0 ; TRIG="none"  ;;
*)	SERVICER=0   ; SERVICEG=0   ; SERVICEB=0 ; TRIG="none"  ;;
esac

echo $SIGNALB > $WWAN_SIGNAL_B/brightness
echo $SIGNALR > $WWAN_SIGNAL_R/brightness
echo $SIGNALG > $WWAN_SIGNAL_G/brightness

echo $TRIG > $WWAN_SERVICE_B/trigger
echo $TRIG > $WWAN_SERVICE_R/trigger
echo $TRIG > $WWAN_SERVICE_G/trigger
echo $SERVICEB > $WWAN_SERVICE_B/brightness
echo $SERVICER > $WWAN_SERVICE_R/brightness
echo $SERVICEG > $WWAN_SERVICE_G/brightness

exit 0
