hostname "$(fw_printenv -n serial)"

echo "Mounting filesystems..."
mount -t proc proc /proc
mount -t sysfs sys /sys
mkdir -m 755 /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=64M tmpfs /tmp
mount -t tmpfs -o size=46M tmpfs /var
mkdir -m 1777 /var/tmp
mkdir -m 755 /var/run
mkdir -m 1777 /var/lock
mkdir -m 755 /var/empty
mkdir -m 755 /var/mnt

# Setup the filesystem to host the /var/log.
. /lib/varlog_setup.sh
setup_varlogfs 32

echo "Starting watchdog..."
watchdog /dev/watchdog

# make sure we dont see all errors
echo 6 > /proc/sys/kernel/printk

# initialise devices before we need them
/etc/rc.dev

echo "Configuring GPIOs..."
# GPIO2/07 on is the dev/dbg mode jumper
echo 455 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio455/direction
echo 1 > /sys/class/gpio/gpio455/active_low

echo "Initializing network interfaces..."
echo 1 >/proc/sys/net/ipv4/conf/all/promote_secondaries
ifconfig lo 127.0.0.1

modprobe pfe
# Ethernet port is labeled "ETH" on box, so call interface that
ip link set eth0 name eth
setmac -i eth -u -n 1

if [ "$(fw_printenv factory 2> /dev/null)" = "factory=enabled" ]; then
	/etc/factory
	exit 0
fi

# handle /opt, contains modem firmware and maybe other goodies
echo "Mounting opt filesystem..."
if ! mount -t ext4 /dev/flash/opt /opt; then
	echo "Cannot mount /opt, reformatting..."
	mkfs.ext4 -F /dev/flash/opt
	mount -t ext4 /dev/flash/opt /opt
fi

{
	# Create /opt filesystem
	[ -d "/opt/config" ] || mkdir /opt/config
	[ -L "/opt/boot" ] || ln -s /efi/grub /opt/boot
}

echo "Mounting config filesystem ..."
if ! mount --bind /opt/config /etc/config
then
	echo "Cannot bind mount /etc/config to /opt/config..."
	echo "Using tmpfs for /etc/config."
	mount -t tmpfs -o size=4M tmpfs /etc/config
	touch /etc/config/.init
fi
[ "$(echo /etc/config/*)" = '/etc/config/*' ] && touch /etc/config/.init

if [ "$(fw_printenv emctest 2> /dev/null)" = "emctest=enabled" ]; then
    # Since /etc/config is in place, we should have /etc/config/scripts
    # available to us.  Make sure that a console without login required
    # is available, create a writeable /usr/sbin, execute the custom
    # emcinit script if there is one, then fix boot_attempts to make
    # sure uBoot doesn't "fall back" after a few reboots.

    stty -F /dev/ttyS0 115200

    echo "ttyS0:unknown:-/bin/sh" > /var/run/inittab

    scp -r /usr/sbin /var/tmp/sbin || true
    mount --bind /var/tmp/sbin /usr/sbin || true

    [ -e /etc/config/scripts/emcinit ] && \
        /bin/sh /etc/config/scripts/emcinit

    echo 0 > /sys/kernel/persistent_mem/boot_attempts

    exit 0
fi

if [ -f /etc/config/.init ]; then
	echo "Factory defaulting config ..."
	filter="($|/certs$|/certs/|/ssh_host_rsa_key|/ssh_host_dsa_key|/ssh_host_key|/id_rsa|/id_dsa|/identity|/accns.pem|/accns.crt|/unique.crt|/.nocrypt|/.init2|/factory.json|/cfd.json|/nv.json|/current.json|/validation.json|/shadow|/awusbdcerts|/descriptors|/.migrate|/random-seed)"
	[ -f /etc/config/.init2 ] && filter='($|/.migrate|/random-seed)'
	touch /etc/config/.init2
	find /etc/config -name '*' |
		egrep -v "/etc/config$filter" |
		xargs rm -rf
	cp -ra /etc/default/. /etc/config/.
	echo "Factory default settings restored" > /etc/config/reboot_msg
else
	rm -f /etc/config/.init2
fi
if [ ! -f /etc/config/accns.json ]; then
	cp -ra /etc/default/. /etc/config/.
fi
if [ -f /etc/config/nv.json -a ! -f /etc/config/.migrate ]; then
	echo "Pulling configuration from previous firmware..."
	if /usr/bin/migrate_to_dal; then
		cp /etc/config/identity/identity.pem /etc/config/ssl.pem
		touch /etc/config/.migrate
		echo "Configuration updated" >/etc/config/reboot_msg
	else
		echo "Failed to pull configuration"
	fi
fi

cat /etc/inittab.d/* > /etc/inittab

# cryptography disabled mode
if [ -e /etc/config/.nocrypt ] ; then
	sh /etc/nocrypt
	exit 0
fi

# modem firmware updates
[ -f /etc/config/switch_firmware_carrier ] && sh /etc/config/switch_firmware_carrier

random_seed restore

# init processing
[ -x /etc/rcS ] && /etc/rcS

# do the rc script processing
actiond &

cat /etc/motd

echo 0 > /sys/kernel/persistent_mem/boot_attempts

exit 0
