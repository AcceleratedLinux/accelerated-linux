hostname EX55

echo "Mounting filesystems..."
mount -t proc proc /proc
mount -t sysfs sys /sys
mkdir -m 755 /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=40M tmpfs /tmp
mount -t tmpfs -o size=32M tmpfs /var
mkdir -m 1777 /var/tmp
mkdir -m 755 /var/log
mkdir -m 755 /var/run
mkdir -m 1777 /var/lock
mkdir -m 755 /var/empty
mkdir -m 755 /var/mnt

echo "Starting watchdog..."
watchdog /dev/watchdog

# make sure we dont see all errors
echo 6 > /proc/sys/kernel/printk

# init devices before we need any
cp -ra /lib/udev/devices/. /dev

echo "Initializing network interfaces..."
echo 1 >/proc/sys/net/ipv4/conf/all/promote_secondaries
ifconfig lo 127.0.0.1

# Set eth IRQ affinity to improve throughput
echo c > /proc/irq/21/smp_affinity

# Set CPU eth interface to a fixed MAC address (it is internal)
setmac -b 00:27:04:03:02:01 -i eth0
# Set external network interfaces to asigned MAC addresses
setmac -i lan,wan -u -n 2
ifconfig eth0 up

echo "Initializing CELL interface control..."
# GPIO24 = Cell Module 1 Presence Detect (input, active low)  [sysgpio=472]
# GPIO511 = Cell Module 1 SIM Select (output, 0=SIM1, 1=SIM2)
# GPIO25 = Cell MOdule 1 Power On (output, active low)        [sysgpio=473]
# GPIO26 = Cell Module 1 Push Button (input, active low)      [sysgpio=474]
echo 472 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio472/direction
echo 474 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio474/direction
echo falling > /sys/class/gpio/gpio474/edge
echo 511 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio511/direction
echo 473 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio473/direction
echo 0 > /sys/class/gpio/gpio473/value

# GPIO28 = Cell Module 2 Presence Detect (input, active low)  [sysgpio=476]
# GPIO495 = Cell Module 2 SIM Select (output, 0=SIM1, 1=SIM2)
# GPIO29 = Cell MOdule 2 Power On (output, active low)        [sysgpio=477]
# GPIO30 = Cell Module 2 Push Button (input, active low)      [sysgpio=478]
echo 476 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio476/direction
echo 478 > /sys/class/gpio/export
echo in > /sys/class/gpio/gpio478/direction
echo falling > /sys/class/gpio/gpio478/edge
echo 495 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio495/direction
echo 477 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio477/direction
echo 0 > /sys/class/gpio/gpio477/value

echo "Initializing WiFi interface control..."
# GPIO22 = WiFi W_disable (output, disable low) [sysgpio=470]
echo 470 > /sys/class/gpio/export
echo high > /sys/class/gpio/gpio470/direction

if [ "$(fw_printenv factory 2> /dev/null)" = "factory=enabled" ]; then
	#load wifi module for testing
	modprobe ath10k_pci
	/etc/factory
	exit 0
fi
if [ "$(fw_printenv emctest 2> /dev/null)" = "emctest=enabled" ]; then
	#load wifi module for testing
	modprobe ath10k_pci
	# Use the same setup as for factory testing
	/etc/factory
	exit 0
fi

echo "Mounting config filesystem..."
if ! mount -t ubifs ubi0:config /etc/config
then
	echo "Cannot mount /etc/config as ubifs, reformatting..."
	flash_erase /dev/flash/config 0 0
	echo "Mounting config filesystem after reformat..."
	if ! mount -t ubifs ubi0:config /etc/config
	then
		echo "Failed to mount flash based config filesystem"
		echo "Using tmpfs for /etc/config."
		mount -t tmpfs -o size=4M tmpfs /etc/config
	fi
	touch /etc/config/.init
fi
[ "$(echo /etc/config/*)" = '/etc/config/*' ] && touch /etc/config/.init

if [ -f /etc/config/.init ]; then
	echo "Factory defaulting config ..."
	filter="($|/ssh_host_rsa_key|/ssh_host_dsa_key|/ssh_host_key|/id_rsa|/id_dsa|/identity|/accns.pem|/accns.crt|/unique.crt|/.init2)"
	[ -f /etc/config/.init2 ] && filter='$'
	touch /etc/config/.init2
	find /etc/config -name '*' |
		egrep -v "/etc/config$filter" |
		xargs rm -rf
	cp -ra /etc/default/. /etc/config/.
	echo "Factory default settings restored" > /etc/config/reboot_msg
else
	rm -f /etc/config/.init2
fi
cat /etc/inittab.d/* > /etc/inittab

# handle /opt,  contains modem firmware and maybe other goodies
if grep -q '"opt"' /proc/mtd
then
	echo "Mounting opt filesystem...."
	if ! mount -t ubifs ubi0:opt /opt
	then
		echo "Cannot mount /opt as ubifs, reformatting..."
		flash_erase /dev/flash/opt 0 0
		echo "Mounting opt filesystem after reformat..."
		if ! mount -t ubifs ubi0:opt /opt
		then
			echo "Failed to mount flash based opt filesystem"
			# just leave the empty mount point (RO)
		fi
	fi
fi

# modem firmware updates
[ -f /etc/config/switch_firmware_carrier ] && sh /etc/config/switch_firmware_carrier

#load wifi module before we come up
modprobe ath10k_pci

# do the rc script processing
actiond &

cat /etc/motd

exit 0
