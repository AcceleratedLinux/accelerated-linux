#!/bin/sh
#
# Action for ConnectIT-Mini 4 LEDs
#
##############################################################
# allow script override
[ -x /etc/config/led ] && exec /etc/config/led "$@"
##############################################################
#exec 2>> /tmp/led.log
#set -x

ONLINE="LAN3_RX"

# flash Online, LTE and signal strength LEDs green
findme_update() {
	FINDME=
	if find-me state &>/dev/null; then
		FINDME="-a -n $ONLINE -n ONLINE -n ETH -n COM -n RSS1 -n RSS2 -n RSS3 -n RSS4 -n RSS5 -f $ONLINE -f ETH -O COM -O ONLINE -f RSS1 -f RSS2 -f RSS3 -f RSS4 -f RSS5"
	else
		FINDME="-a -N $ONLINE -N COM -N ETH -N ONLINE -N RSS1 -N RSS2 -N RSS3 -N RSS4 -N RSS5"
	fi
	ledcmd $FINDME
}

case "$1" in
start)
	ledcmd -a -N COM -N ETH -N ONLINE
	exit 0
	;;
reload)
	findme_update
	;;
stop)
	# Firmware flash
	ledcmd -a -n COM -n ETH -n ONLINE -o COM -f ETH -O ONLINE
	exit 0
	;;
*)
	echo "Usage: $0 {start|stop|reload}"
	exit 1
	;;
esac

##############################################################

# Find the primary modem, or alternatively *any* modem
idx="$(modem name=modem idx 2> /dev/null)" || idx="$(modem idx 2> /dev/null)"
# Find the first interface on the modem
for i in $(runt keys mm.map.interface_idx); do
	[ "$(runt get mm.map.interface_idx.$i)" = "$idx" ] \
		&& intf=$i && break
done

if [ "$(runt get network.interface.$intf.ipv4.up)" = 1 ] \
		|| [ "$(runt get network.interface.$intf.ipv6.up)" = 1 ]; then
	if [ "$(runt get surelink.ipv4_interface_$intf.passed)" = n \
			-o "$(runt get surelink.ipv6_interface_$intf.passed)" = n ]; then
		CELL=1
	elif [ "$(runt get mm.modem.$idx.status.gtech)" = 4g ]; then
		CELL=3
	else
		CELL=2
	fi
elif [ "$(runt get network.interface.$intf.ipv4.pending)" = 1 ] \
		|| [ "$(runt get network.interface.$intf.ipv6.pending)" = 1 ]; then
	CELL=1
else
	CELL=0 # not-valid, never going to work
fi

if [ "$CELL" != 0 ]; then
	case "$(runt get mm.modem.$idx.status.bars)" in
	5) SIGNAL="-o RSS1 -o RSS2 -o RSS3 -o RSS4 -o RSS5" ;;
	4) SIGNAL="-o RSS1 -o RSS2 -o RSS3 -o RSS4 -O RSS5" ;;
	3) SIGNAL="-o RSS1 -o RSS2 -o RSS3 -O RSS4 -O RSS5" ;;
	2) SIGNAL="-o RSS1 -o RSS2 -O RSS3 -O RSS4 -O RSS5" ;;
	1) SIGNAL="-o RSS1 -O RSS2 -O RSS3 -O RSS4 -O RSS5" ;;
	*) SIGNAL="-O RSS1 -O RSS2 -O RSS3 -O RSS4 -O RSS5" ;;
	esac
else
	SIGNAL="-O RSS1 -O RSS2 -O RSS3 -O RSS4 -O RSS5"
fi

##############################################################

LINK=$(ip link show eth 2> /dev/null | grep -c "state UP")

LAN4=-1
LAN6=-1
if [ "$LINK" = 1 ]; then
	case $(runt get network.interface.eth.ipv4.up) in
	1) [ "$(runt get surelink.ipv4_interface_eth.passed)" = n ] && LAN4=1 || LAN4=2 ;;
	0) [ "$(runt get network.interface.eth.ipv4.pending)" = 1 ] && LAN4=1 || LAN4=0 ;;
	esac

	case $(runt get network.interface.eth.ipv6.up) in
	1) [ "$(runt get surelink.ipv6_interface_eth.passed)" = n ] && LAN6=1 || LAN6=2 ;;
	0) [ "$(runt get network.interface.eth.ipv6.pending)" = 1 ] && LAN6=1 || LAN6=0 ;;
	esac
fi

if [ "$LAN4" = -1 -a "$LAN6" = -1 ]; then
	# if neither interface exists, match link
	LAN=$((LINK ? 2 : 0))
elif [ "$LAN4" = 2 -o "$LAN6" = 2 ]; then
	LAN=2
elif [ "$LAN4" = 1 -o "$LAN6" = 1 ]; then
	LAN=1
else
	LAN=0
fi

case "$CELL$LAN" in
*2|[23]*) ONLINE_LED="-o $ONLINE";;
*1|1*) ONLINE_LED="-f $ONLINE";;
*) ONLINE_LED="-O $ONLINE";;
esac

##############################################################

#
# The LED table of things based on all possible values above
#
LED00="-f COM -O ONLINE -f ETH" # flashing yellow
LED10="-f COM -O ONLINE -f ETH" # flashing yellow
LED20="-O COM -O ONLINE -f ETH" # flashing green
LED30="-O COM -f ONLINE -O ETH" # flashing blue
LED01="-f COM -O ONLINE -f ETH" # flashing yellow
LED11="-f COM -O ONLINE -f ETH" # flashing yellow
LED21="-O COM -O ONLINE -f ETH" # flashing green
LED31="-O COM -f ONLINE -O ETH" # flashing blue
LED02="-f COM -f ONLINE -f ETH" # flashing white
LED12="-f COM -f ONLINE -f ETH" # flashing white
LED22="-O COM -O ONLINE -o ETH" # solid green
LED32="-O COM -o ONLINE -O ETH" # solid blue

eval ledcmd $SIGNAL $ONLINE_LED \$LED$CELL$LAN


exit 0
