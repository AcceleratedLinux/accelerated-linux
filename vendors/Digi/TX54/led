#!/bin/sh
#
# Action for Digi/TX54 LEDs
#
##############################################################
# allow script override
[ -x /etc/config/led ] && exec /etc/config/led "$@"
##############################################################

##############################################################
#exec 2>> /tmp/led.log
#set -x

case "$1" in
start)
	# Turn off all LEDs
	ledcmd -O ALL -o POWER_B

	exit 0
	;;
reload)
	;;
stop)
	;;
*)
	echo "Usage: $0 {start|stop|reload}"
	exit 1
	;;
esac

LEDCMD=

##############################################################
# Update wifi leds
runt update network.wireless
eval $(config stop)
eval $(config start)
config load

wifi_led="-O"
aps=$(config keys network.wireless.ap)
for ap in $aps ; do
	ap=${ap%%.*}
	device="$(runt get network.wireless.ap.$ap.device)"
	if [ -n "$device" ]; then
		if ip link show $device up | grep -q "state UP"; then
			wifi_led="-o"
		fi
	fi
done

clients=$(config keys network.wireless.client)
for client in $clients ; do
	client=${client%%.*}
	device="$(runt get network.wireless.client.$client.device)"
	if [ -n "$device" ]; then
		if ip link show $device up | grep -q "state UP"; then
			wifi_led="-o"
		fi
	fi
done

LEDCMD="${LEDCMD} ${wifi_led} WIFI1_G"

eval $(config stop)

##############################################################
# Cellular LEDs

# The TX54 has one LED per modem for signal strength
# Off: No service.
# Yellow: Poor / Fair signal.
# Green: Good / Excellent signal.
update_signal_led() {
	idx=$1
	wan=$2

	case "$(runt get mm.modem.$idx.status.bars)" in
		4|5) SIGNAL="-o ${wan}_SIGNAL_G -O ${wan}_SIGNAL_Y" ;;
		1|2|3) SIGNAL="-o ${wan}_SIGNAL_Y -O ${wan}_SIGNAL_G" ;;
		*) SIGNAL="-O ${wan}_SIGNAL_Y -O ${wan}_SIGNAL_G" ;;
	esac
}

# TX54 service LED
# Off: No service.
# Blinking Green: 2G/3G/4G connection is coming up.
# Solid Yellow: 2G or 3G connection is up.
# Solid Green: 4G connection is up.
update_service_led() {
	idx=$1
	wan=$2

	if [ "$(runt get mm.modem.$idx.status.state)" = connected ]; then
		case "$(runt get mm.modem.$idx.status.gtech)" in
			4g) SERVICE="-o ${wan}_SERVICE_G -O ${wan}_SERVICE_Y" ;;
			3g|2g) SERVICE="-o ${wan}_SERVICE_Y -O ${wan}_SERVICE_G" ;;
			*) SERVICE="-O ${wan}_SERVICE_Y -O ${wan}_SERVICE_G" ;;
		esac
	elif [ "$(runt get mm.modem.$idx.status.state)" = disabled ]; then
		SERVICE="-O ${wan}_SERVICE_Y -O ${wan}_SERVICE_G"
	else
		 SERVICE="-f ${wan}_SERVICE_G -O ${wan}_SERVICE_Y"
	fi
}

idxs="$(modem idxs 2>/dev/null)"

for idx in $idxs; do

	port="$(runt get mm.modem.$idx.modem.port)"
	wan_port=${port#*/}
	wan="$(printf '%s\n' "$wan_port" | awk '{ print toupper($0) }')"

	SIGNAL=
	SERVICE=
	update_signal_led "$idx" "$wan"
	update_service_led "$idx" "$wan"

	LEDCMD="${LEDCMD} ${SERVICE} ${SIGNAL}"
done

##############################################################
# GNSS LED
#
# Off: GNSS is disabled
# Flashing: GNSS is enabled but does not have a valid fix
# On: GNSS is enabled and has a valid fix
#
case "$(runt get location.state)" in
    "Enabled, signal") gnss_led_state="-o" ;;
    "Enabled, no signal") gnss_led_state="-f" ;;
    *) gnss_led_state="-O" ;;
esac

LEDCMD="${LEDCMD} $gnss_led_state GNSS_G"

##############################################################

[ -z "${LEDCMD}" ] || eval ledcmd ${LEDCMD}

exit 0
