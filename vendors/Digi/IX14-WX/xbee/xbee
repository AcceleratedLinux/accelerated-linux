#!/bin/sh

##################################################################
#exec 2> /dev/console
#set -x
##################################################################

SW_SCRIPTNAME="$(basename "${0}")"

# XBee power GPIO
XBEE_GPIO_XBEE_POWER_EN="129"
# XBee 'RESET' pin
XBEE_GPIO_XBEE_RST="9" # reset
# XBee 'DTR'/SLEEP_RQ pin
XBEE_GPIO_XBEE_DTR="118" # sleep_rq

# XBee serial port
XBEE_SERIAL_PORT="/dev/ttymxc1"

# set_gpio_value <gpio_nr> <value>
set_gpio_value() {
	local SG_GPIONR="${1}"
	local SG_GPIOVAL="${2}"
	local SG_GPIOPATH="/sys/class/gpio/gpio${SG_GPIONR}"

	[ -d "${SG_GPIOPATH}" ] || printf "%s" "${SG_GPIONR}" > /sys/class/gpio/export
	printf out > "${SG_GPIOPATH}/direction" && sleep .2
	printf "%s" "${SG_GPIOVAL}" > "${SG_GPIOPATH}/value" && sleep .2
	[ -d "${SG_GPIOPATH}" ] && printf "%s" "${SG_GPIONR}" > /sys/class/gpio/unexport
}

# powercycle_gpio <gpio_nr>
powercycle_gpio() {
	set_gpio_value "${1}" 0
	set_gpio_value "${1}" 1
}

# log [logger parameters]
log() {
	logger -t xbee "$@"
}

# fail <message>
fail() {
	[ -n "${1}" ] && log -p 3 "cannot start because ${1}"

	exit 1
}

configure_serial_port() {
	stty -F "${XBEE_SERIAL_PORT}" 9600 cs8 -cstopb -parenb -crtscts
	sleep 1
}

enter_command_mode() {
	for _ in $(seq 3); do
		echo -n "+" > "${XBEE_SERIAL_PORT}"
		sleep 0.1
	done
	sleep 2
}

# send_xbee_at_command <at_command> <timeout>
send_xbee_at_command() {
	chat -t "${2}" '' "${1}" 'OK' > "${XBEE_SERIAL_PORT}" < "${XBEE_SERIAL_PORT}"
}

xbee_start() {
	# Power up XBee
	powercycle_gpio "${XBEE_GPIO_XBEE_POWER_EN}"

	# Reset XBee
	xbee_reset

	# Configure XBee serial port: 9600 8n1 and hw flow control
	configure_serial_port

	enter_command_mode

	# Set API mode
	send_xbee_at_command "ATAP1" 1
	send_xbee_at_command "ATAC" 1
	send_xbee_at_command "ATWR" 1
	send_xbee_at_command "ATCN" 1

	log "XBee initialized"
}

xbee_stop() {
	# Power down XBee
	set_gpio_value "${XBEE_GPIO_XBEE_POWER_EN}" 0

	log "XBee stopped"
}

xbee_reset() {
	# Power cycle XBEE_RESET_N
	powercycle_gpio "${XBEE_GPIO_XBEE_RST}"

	# Set low XBEE_DTR (XBee Sleep RQ)
	set_gpio_value ${XBEE_GPIO_XBEE_DTR} 0

	log "XBee reset"
}

get_xbee_state() {
	enter_command_mode

	send_xbee_at_command "AT" 1 && printf "on" || printf "off"
}

usage() {
	cat <<EOF

Usage: ${SW_SCRIPTNAME} <command> [command parameters]

Commands:
    XBee power control:
      on                             Turn on the interface
      off                            Turn off the interface
      reset                          Reset the XBee only if it is on
    XBee status:
      state                          Show XBee status
EOF
}

# power_cmd [on|off]
power_cmd() {
	case "${1}" in
		on) xbee_start ;;
		off) xbee_stop ;;
		reset) xbee_reset ;;
		*) log -s "Must specify 'on', 'off' or 'reset'" ;;
	esac
}

case "${1}" in
	help|'')
		usage
		;;
	on|off|reset)
		power_cmd "${1}"
		;;
	state)
		printf "%s\\n" "$(get_xbee_state)"
		;;
	*)
		usage
		exit 1
		;;
esac
