diff -Naur uClibc.org/extra/Configs/Config.in uClibc.new/extra/Configs/Config.in
--- uClibc.org/extra/Configs/Config.in	2012-05-15 17:20:09.000000000 +1000
+++ uClibc.new/extra/Configs/Config.in	2013-08-19 23:37:03.607557271 +1000
@@ -1440,6 +1440,20 @@
 
 	  Answer Y to enable locale support.  Most people will answer N.
 
+config UCLIBC_ICONV_NOLOCALE_HACK
+	bool "iconv nolocale hack"
+	depends on !UCLIBC_HAS_LOCALE
+	help
+	  Compile a version of iconv that doesn't need LOCALE support.
+
+config UCLIBC_ICONV_TRANSLIT_HACK
+	bool "iconv translit hack"
+	depends on UCLIBC_HAS_LOCALE || UCLIBC_ICONV_NOLOCALE_HACK
+	help
+	  Process translit requests as non-translit requests (ie., ignore the
+	  //TRANSLIT in names).  Useful if your application is not really using
+	  translit for real work.
+
 choice
 
 prompt "Locale data"
diff -Naur uClibc.org/include/iconv.h uClibc.new/include/iconv.h
--- uClibc.org/include/iconv.h	2012-05-15 17:20:09.000000000 +1000
+++ uClibc.new/include/iconv.h	2013-08-19 23:37:03.607557271 +1000
@@ -23,11 +23,6 @@
 #define __need_size_t
 #include <stddef.h>
 
-#ifndef __UCLIBC_HAS_LOCALE__
-#error Attempted to include iconv.h when uClibc was built without locale support.
-#endif
-
-
 __BEGIN_DECLS
 
 /* Identifier for conversion method from one codeset to another.  */
diff -Naur uClibc.org/libc/misc/wchar/Makefile.in uClibc.new/libc/misc/wchar/Makefile.in
--- uClibc.org/libc/misc/wchar/Makefile.in	2012-05-15 17:20:09.000000000 +1000
+++ uClibc.new/libc/misc/wchar/Makefile.in	2013-08-19 23:37:03.607557271 +1000
@@ -24,6 +24,7 @@
 	mbsnrtowcs.c wcsnrtombs.c wcwidth.c wcswidth.c
 
 CSRC-$(UCLIBC_HAS_LOCALE) += iconv.c
+CSRC-$(UCLIBC_ICONV_NOLOCALE_HACK) += iconv.c
 
 MISC_WCHAR_DIR := $(top_srcdir)libc/misc/wchar
 MISC_WCHAR_OUT := $(top_builddir)libc/misc/wchar
diff -Naur uClibc.org/libc/misc/wchar/wchar.c uClibc.new/libc/misc/wchar/wchar.c
--- uClibc.org/libc/misc/wchar/wchar.c	2012-05-15 17:20:09.000000000 +1000
+++ uClibc.new/libc/misc/wchar/wchar.c	2013-08-19 23:37:03.607557271 +1000
@@ -148,8 +148,10 @@
 #ifdef __CTYPE_HAS_UTF_8_LOCALES
 #error __CTYPE_HAS_UTF_8_LOCALES is defined!
 #endif
+#ifndef __UCLIBC_ICONV_NOLOCALE_HACK__
 #undef L__wchar_utf8sntowcs
 #undef L__wchar_wcsntoutf8s
+#endif
 
 #endif /* __UCLIBC_HAS_LOCALE__ */
 /**********************************************************************/
@@ -1245,12 +1247,19 @@
 #error unsupported endianness for iconv
 #endif
 
+#if defined(__UCLIBC_HAS_LOCALE__)
 #ifndef __CTYPE_HAS_8_BIT_LOCALES
 #error currently iconv requires 8 bit locales
 #endif
 #ifndef __CTYPE_HAS_UTF_8_LOCALES
 #error currently iconv requires UTF-8 locales
 #endif
+#else
+#ifdef __UCLIBC_ICONV_NOLOCALE_HACK__
+#define __CTYPE_HAS_8_BIT_LOCALES 1
+#define __CTYPE_HAS_UTF_8_LOCALES 1
+#endif
+#endif
 
 
 enum {
@@ -1281,8 +1290,15 @@
 		if (!strcasecmp((char*) (s + 2), name)) {
 			return s[1];
 		}
+#ifdef __UCLIBC_ICONV_TRANSLIT_HACK__
+		if (!strncasecmp((char*) (s + 2), name, strlen(s + 2)) &&
+				strcasecmp(&name[strlen(s + 2)], "//TRANSLIT") == 0) {
+			return s[1];
+		}
+#endif
 	}
 
+#if defined(__UCLIBC_HAS_LOCALE__)
 	/* The following is ripped from find_locale in locale.c. */
 
 	/* TODO: maybe CODESET_LIST + *s ??? */
@@ -1294,7 +1310,14 @@
 		if (!strcasecmp(__LOCALE_DATA_CODESET_LIST+*s, name)) {
 			return codeset;
 		}
+#ifdef __UCLIBC_ICONV_TRANSLIT_HACK__
+		if (!strncasecmp(__LOCALE_DATA_CODESET_LIST+*s, name, strlen(__LOCALE_DATA_CODESET_LIST+*s)) &&
+				strcasecmp(&name[strlen(__LOCALE_DATA_CODESET_LIST+*s)], "//TRANSLIT") == 0) {
+			return codeset;
+		}
+#endif
 	} while (*++s);
+#endif
 
 	return 0;			/* No matching codeset! */
 }
@@ -1452,6 +1475,7 @@
 			if (px->fromcodeset == IC_ASCII) { /* US-ASCII codeset */
 				goto ILLEGAL;
 			} else {			/* some other 8-bit ascii-extension codeset */
+#if defined(__UCLIBC_HAS_LOCALE__)
 				const __codeset_8_bit_t *c8b
 					= __locale_mmap->codeset_8_bit + px->fromcodeset - 3;
 				wc -= 0x80;
@@ -1461,6 +1485,9 @@
 				if (!wc) {
 					goto ILLEGAL;
 				}
+#else
+				goto ILLEGAL;
+#endif
 			}
 		}
 
@@ -1532,9 +1559,12 @@
 			} while (1);
 			inco = r;
 		} else if (((__uwchar_t)(wc)) < 0x80) {
+#if defined(__UCLIBC_HAS_LOCALE__)
 		CHAR_GOOD:
+#endif
 				**outbuf = wc;
 		} else {
+#if defined(__UCLIBC_HAS_LOCALE__)
 			if ((px->tocodeset != 0x01) && (wc <= Cwc2c_DOMAIN_MAX)) {
 				const __codeset_8_bit_t *c8b
 					= __locale_mmap->codeset_8_bit + px->tocodeset - 3;
@@ -1550,6 +1580,7 @@
 					goto CHAR_GOOD;
 				}
 			}
+#endif
 			**outbuf = '?';
 			++nrcount;
 		}
diff -Naur uClibc.org/Makefile.in uClibc.new/Makefile.in
--- uClibc.org/Makefile.in	2012-05-15 17:20:09.000000000 +1000
+++ uClibc.new/Makefile.in	2015-01-05 13:38:12.938722246 +1000
@@ -251,7 +251,10 @@
 HEADERS_RM-$(UCLIBC_HAS_GNU_GETOPT)$(UCLIBC_HAS_GETOPT_LONG) += getopt.h
 HEADERS_RM-$(UCLIBC_HAS_IPV6)                += netinet/ip6.h netinet/icmp6.h
 HEADERS_RM-$(UCLIBC_HAS_BACKTRACE)           += execinfo.h
-HEADERS_RM-$(UCLIBC_HAS_LOCALE)              += iconv.h bits/uClibc_ctype.h
+ifneq ($(UCLIBC_ICONV_NOLOCALE_HACK),y)
+HEADERS_RM-$(UCLIBC_HAS_LOCALE)              += iconv.h
+endif
+HEADERS_RM-$(UCLIBC_HAS_LOCALE)              += bits/uClibc_ctype.h
 HEADERS_RM-$(UCLIBC_HAS_PTY)                 += pty.h
 HEADERS_RM-$(UCLIBC_HAS_REALTIME)            += mqueue.h bits/mqueue.h sched.h \
 	bits/sched.h \
