From 6635c7cf7fe1b4e2363007978c3a3f4d92981e50 Mon Sep 17 00:00:00 2001
From: Samuel Brian <samuel.brian@digi.com>
Date: Thu, 4 Jun 2020 14:58:02 +1000
Subject: bond: added bonding support

The new bond.c is basically a copy of bridge.c plus the integration
for the Linux kernel operation on bond devices.
netifd handles bond interface membership the same way as for bridges.
---
 CMakeLists.txt |   2 +-
 bond.c         | 871 +++++++++++++++++++++++++++++++++++++++++++++++++
 config.c       |  27 ++
 device.h       |   1 +
 4 files changed, 900 insertions(+), 1 deletion(-)
 create mode 100644 bond.c

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1bfa196..4b4be65 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,7 +14,7 @@ SET(SOURCES
 	main.c utils.c system.c tunnel.c handler.c
 	interface.c interface-ip.c interface-event.c
 	iprule.c proto.c proto-static.c proto-shell.c
-	config.c device.c bridge.c vlan.c alias.c
+	config.c device.c bridge.c bond.c vlan.c alias.c
 	macvlan.c ubus.c vlandev.c wireless.c)
 
 
diff --git a/bond.c b/bond.c
new file mode 100644
index 0000000..1a25352
--- /dev/null
+++ b/bond.c
@@ -0,0 +1,871 @@
+/*
+ * netifd - network interface daemon
+ * Copyright (C) 2012 Felix Fietkau <nbd@openwrt.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <assert.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include "netifd.h"
+#include "device.h"
+#include "interface.h"
+#include "system.h"
+
+struct bond_config {
+	char *mode;
+	char *primary;
+	bool bond_empty;
+	uint32_t link_poll_interval;
+};
+
+enum {
+	BOND_ATTR_IFNAME,
+	BOND_ATTR_MODE,
+	BOND_ATTR_PRIMARY,
+	BOND_ATTR_BOND_EMPTY,
+	BOND_ATTR_LINK_POLL_INTERVAL,
+	__BOND_ATTR_MAX
+};
+
+static const struct blobmsg_policy bond_attrs[__BOND_ATTR_MAX] = {
+	[BOND_ATTR_IFNAME] = { "ifname", BLOBMSG_TYPE_ARRAY },
+	[BOND_ATTR_MODE] = { "mode", BLOBMSG_TYPE_STRING },
+	[BOND_ATTR_PRIMARY] = { "primary", BLOBMSG_TYPE_STRING },
+	[BOND_ATTR_BOND_EMPTY] = { "bond_empty", BLOBMSG_TYPE_BOOL },
+	[BOND_ATTR_LINK_POLL_INTERVAL] = { "link_poll_interval", BLOBMSG_TYPE_INT32 },
+};
+
+static const struct uci_blob_param_info bond_attr_info[__BOND_ATTR_MAX] = {
+	[BOND_ATTR_IFNAME] = { .type = BLOBMSG_TYPE_STRING },
+};
+
+static const struct uci_blob_param_list bond_attr_list = {
+	.n_params = __BOND_ATTR_MAX,
+	.params = bond_attrs,
+	.info = bond_attr_info,
+
+	.n_next = 1,
+	.next = { &device_attr_list },
+};
+
+static struct device *bond_create(const char *name, struct blob_attr *attr);
+static void bond_config_init(struct device *dev);
+static void bond_free(struct device *dev);
+static void bond_dump_info(struct device *dev, struct blob_buf *b);
+enum dev_change_type
+bond_reload(struct device *dev, struct blob_attr *attr);
+
+const struct device_type bond_device_type = {
+	.name = "Bond",
+	.config_params = &bond_attr_list,
+
+	.create = bond_create,
+	.config_init = bond_config_init,
+	.reload = bond_reload,
+	.free = bond_free,
+	.dump_info = bond_dump_info,
+};
+
+struct bond_state {
+	struct device dev;
+	device_state_cb set_state;
+
+	struct blob_attr *config_data;
+	struct bond_config config;
+	struct blob_attr *ifnames;
+	bool active;
+	bool force_active;
+
+	struct uloop_timeout retry;
+	struct bond_member *primary_port;
+	struct vlist_tree members;
+	int n_present;
+	int n_failed;
+};
+
+struct bond_member {
+	struct vlist_node node;
+	struct bond_state *bst;
+	struct device_user dev;
+	bool present;
+	char name[];
+};
+
+/*****************************************************************************/
+
+int system_bond_add(struct device *bond, struct bond_config *cfg);
+int system_bond_del(struct device *bond);
+int system_bond_addif(struct device *bond, struct device *dev);
+int system_bond_delif(struct device *bond, struct device *dev);
+
+static int system_sysctl_vwrite(const char *val, const char *path_fmt, va_list ap)
+{
+	char *path;
+	int ret;
+	int fd;
+
+	ret = vasprintf(&path, path_fmt, ap);
+	if (ret < 0)
+		return -1;
+
+	fd = open(path, O_WRONLY);
+	free(path);
+
+	if (fd < 0)
+		return -1;
+
+	ret = write(fd, val, strlen(val));
+	close(fd);
+	return ret < 0 ? -1 : 0;
+}
+
+static int system_sysctl_write(const char *val, const char *path_fmt, ...)
+{
+	va_list ap;
+	int ret;
+
+	va_start(ap, path_fmt);
+	ret = system_sysctl_vwrite(val, path_fmt, ap);
+	va_end(ap);
+	return ret;
+}
+
+static int system_sysctl_add(const char *val, const char *path_fmt, ...)
+{
+	va_list ap;
+	int ret;
+	char *valp;
+
+	if (asprintf(&valp, "+%s\n", val) == -1)
+		return -1;
+
+	va_start(ap, path_fmt);
+	ret = system_sysctl_vwrite(valp, path_fmt, ap);
+	va_end(ap);
+	free(valp);
+	return ret;
+}
+
+static int system_sysctl_del(const char *val, const char *path_fmt, ...)
+{
+	va_list ap;
+	int ret;
+	char *valp;
+
+	if (asprintf(&valp, "-%s\n", val) == -1)
+		return -1;
+
+	va_start(ap, path_fmt);
+	ret = system_sysctl_vwrite(valp, path_fmt, ap);
+	va_end(ap);
+	free(valp);
+	return ret;
+}
+
+
+int system_bond_add(struct device *bond, struct bond_config *cfg)
+{
+	int ret;
+	const char *mode = cfg->mode ?: "balance-rr";
+	char *link_poll_interval;
+
+	ret = system_sysctl_add(bond->ifname, "/sys/class/net/bonding_masters");
+	if (ret == -1 && errno != EEXIST) {
+		netifd_log_message(L_CRIT, "Failed to create bonding device '%s': %m",
+			bond->ifname);
+		return -1;
+	}
+
+	/* Can't set bond mode of up bonded device */
+	if (system_if_down(bond) != 0) {
+		netifd_log_message(L_CRIT, "Failed to down device '%s' before setting bond mode: %m",
+			bond->ifname);
+	}
+
+	ret = system_sysctl_write(mode, "/sys/class/net/%s/bonding/mode",
+		bond->ifname);
+	if (ret == -1) {
+		netifd_log_message(L_CRIT, "Failed to set '%s' bonding mode for device '%s': %m",
+			mode, bond->ifname);
+	}
+
+	if (asprintf(&link_poll_interval, "%u", cfg->link_poll_interval) != -1) {
+		ret = system_sysctl_write(link_poll_interval,
+			"/sys/class/net/%s/bonding/miimon", bond->ifname);
+		if (ret == -1) {
+			netifd_log_message(L_CRIT, "Failed to set '%s' link poll interval for device '%s': %m",
+				mode, bond->ifname);
+		}
+		free(link_poll_interval);
+	}
+
+	if (system_if_up(bond) != 0) {
+		netifd_log_message(L_CRIT, "Failed to up device '%s' after setting bond mode: %m",
+			bond->ifname);
+	}
+
+	return ret;
+}
+
+int system_bond_del(struct device *bond)
+{
+	int ret;
+
+	ret = system_sysctl_del(bond->ifname, "/sys/class/net/bonding_masters");
+	if (ret == -1) {
+		netifd_log_message(L_CRIT, "Failed to delete bonding device '%s': %m",
+			bond->ifname);
+		return -1;
+	}
+
+	return 0;
+}
+
+int system_bond_addif(struct device *bond, struct device *dev)
+{
+	int ret;
+	struct bond_state *bst;
+
+	bst = container_of(bond, struct bond_state, dev);
+
+	/* Can't add up interfaces to bonded device */
+	if (system_if_down(dev) != 0) {
+		netifd_log_message(L_CRIT, "Failed to down '%s' before adding to bonding device '%s': %m",
+			dev->ifname, bond->ifname);
+	}
+
+	if (system_if_down(bond) != 0) {
+		netifd_log_message(L_CRIT, "Failed to down bonding device '%s' before adding device '%s': %m",
+			bond->ifname, dev->ifname);
+	}
+
+	ret = system_sysctl_add(dev->ifname, "/sys/class/net/%s/bonding/slaves",
+		bond->ifname);
+	if (ret == -1) {
+		netifd_log_message(L_CRIT, "Failed to add '%s' to bonding device '%s': %m",
+			dev->ifname, bond->ifname);
+	}
+
+	if (bst->config.primary && strcmp(bst->config.primary, dev->ifname) == 0) {
+		int primary_ret = system_sysctl_write(dev->ifname,
+			"/sys/class/net/%s/bonding/primary", bond->ifname);
+		if (primary_ret == -1) {
+			netifd_log_message(L_CRIT, "Failed to set '%s' as primary on bonding device '%s': %m",
+				dev->ifname, bond->ifname);
+		}
+	}
+
+	if (system_if_up(dev) != 0) {
+		netifd_log_message(L_CRIT, "Failed to up '%s' after adding to bonding device '%s': %m",
+			dev->ifname, bond->ifname);
+	}
+
+	if (system_if_up(bond) != 0) {
+		netifd_log_message(L_CRIT, "Failed to up bonding device '%s' after adding device '%s': %m",
+			bond->ifname, dev->ifname);
+	}
+
+	return ret;
+}
+
+int system_bond_delif(struct device *bond, struct device *dev)
+{
+	int ret;
+
+	ret = system_sysctl_del(dev->ifname, "/sys/class/net/%s/bonding/slaves",
+		bond->ifname);
+	if (ret == -1) {
+		netifd_log_message(L_CRIT, "Failed to remove '%s' from bonding device '%s': %m",
+			dev->ifname, bond->ifname);
+		return -1;
+	}
+
+	/* Removing from bond brings the device down. Bring it back up. */
+	if (system_if_up(dev) != 0) {
+		netifd_log_message(L_CRIT, "Failed to up device '%s' after removing from bond '%s': %m",
+			dev->ifname, bond->ifname);
+	}
+
+	return 0;
+}
+
+/*****************************************************************************/
+
+static void
+bond_reset_primary(struct bond_state *bst)
+{
+	struct bond_member *bm;
+
+	if (!bst->primary_port &&
+	    (bst->dev.settings.flags & DEV_OPT_MACADDR))
+		return;
+
+	bst->primary_port = NULL;
+	bst->dev.settings.flags &= ~DEV_OPT_MACADDR;
+	vlist_for_each_element(&bst->members, bm, node) {
+		uint8_t *macaddr;
+
+		if (!bm->present)
+			continue;
+
+		bst->primary_port = bm;
+		if (bm->dev.dev->settings.flags & DEV_OPT_MACADDR)
+			macaddr = bm->dev.dev->settings.macaddr;
+		else
+			macaddr = bm->dev.dev->orig_settings.macaddr;
+		memcpy(bst->dev.settings.macaddr, macaddr, 6);
+		bst->dev.settings.flags |= DEV_OPT_MACADDR;
+		return;
+	}
+}
+
+static int
+bond_disable_member(struct bond_member *bm)
+{
+	struct bond_state *bst = bm->bst;
+
+	if (!bm->present)
+		return 0;
+
+	system_bond_delif(&bst->dev, bm->dev.dev);
+	device_release(&bm->dev);
+
+	device_broadcast_event(&bst->dev, DEV_EVENT_TOPO_CHANGE);
+
+	return 0;
+}
+
+static int
+bond_enable_interface(struct bond_state *bst)
+{
+	int ret;
+
+	if (bst->active)
+		return 0;
+
+	ret = system_bond_add(&bst->dev, &bst->config);
+	if (ret < 0)
+		return ret;
+
+	bst->active = true;
+	return 0;
+}
+
+static void
+bond_disable_interface(struct bond_state *bst)
+{
+	if (!bst->active)
+		return;
+
+	system_bond_del(&bst->dev);
+	bst->active = false;
+}
+
+static int
+bond_enable_member(struct bond_member *bm)
+{
+	struct bond_state *bst = bm->bst;
+	int ret;
+
+	if (!bm->present)
+		return 0;
+
+	ret = bond_enable_interface(bst);
+	if (ret)
+		goto error;
+
+	/* Disable IPv6 for bond members */
+	if (!(bm->dev.dev->settings.flags & DEV_OPT_IPV6)) {
+		bm->dev.dev->settings.ipv6 = 0;
+		bm->dev.dev->settings.flags |= DEV_OPT_IPV6;
+	}
+
+	ret = device_claim(&bm->dev);
+	if (ret < 0)
+		goto error;
+
+	ret = system_bond_addif(&bst->dev, bm->dev.dev);
+	if (ret < 0) {
+		D(DEVICE, "Bond device %s could not be added\n", bm->dev.dev->ifname);
+		goto error;
+	}
+
+	device_set_present(&bst->dev, true);
+	device_broadcast_event(&bst->dev, DEV_EVENT_TOPO_CHANGE);
+
+	return 0;
+
+error:
+	bst->n_failed++;
+	bm->present = false;
+	bst->n_present--;
+	device_release(&bm->dev);
+
+	return ret;
+}
+
+static void
+bond_remove_member(struct bond_member *bm)
+{
+	struct bond_state *bst = bm->bst;
+
+	if (!bm->present)
+		return;
+
+	if (bm == bst->primary_port)
+		bond_reset_primary(bst);
+
+	if (bst->dev.active)
+		bond_disable_member(bm);
+
+	bm->present = false;
+	bm->bst->n_present--;
+
+	if (bst->config.bond_empty)
+		return;
+
+	bst->force_active = false;
+	if (bst->n_present == 0)
+		device_set_present(&bst->dev, false);
+}
+
+static void
+bond_free_member(struct bond_member *bm)
+{
+	struct device *dev = bm->dev.dev;
+
+	bond_remove_member(bm);
+	device_remove_user(&bm->dev);
+
+	/*
+	 * When reloading the config and moving a device from one bond to
+	 * another, the other bond may have tried to claim this device
+	 * before it was removed here.
+	 * Ensure that claiming the device is retried by toggling its present
+	 * state
+	 */
+	if (dev->present) {
+		device_set_present(dev, false);
+		device_set_present(dev, true);
+	}
+
+	free(bm);
+}
+
+static void
+bond_check_retry(struct bond_state *bst)
+{
+	if (!bst->n_failed)
+		return;
+
+	uloop_timeout_set(&bst->retry, 100);
+}
+
+static void
+bond_member_cb(struct device_user *dev, enum device_event ev)
+{
+	struct bond_member *bm = container_of(dev, struct bond_member, dev);
+	struct bond_state *bst = bm->bst;
+
+	switch (ev) {
+	case DEV_EVENT_ADD:
+		assert(!bm->present);
+
+		bm->present = true;
+		bst->n_present++;
+
+		if (bst->n_present == 1)
+			device_set_present(&bst->dev, true);
+		if (bst->dev.active && !bond_enable_member(bm)) {
+			/*
+			 * Adding a bond member can overwrite the bond mtu
+			 * in the kernel, apply the bond settings in case the
+			 * bond mtu is set
+			 */
+			system_if_apply_settings(&bst->dev, &bst->dev.settings,
+						 DEV_OPT_MTU);
+		}
+
+		break;
+	case DEV_EVENT_REMOVE:
+		if (dev->hotplug) {
+			vlist_delete(&bst->members, &bm->node);
+			return;
+		}
+
+		if (bm->present)
+			bond_remove_member(bm);
+
+		break;
+	default:
+		return;
+	}
+}
+
+static int
+bond_set_down(struct bond_state *bst)
+{
+	struct bond_member *bm;
+
+	bst->set_state(&bst->dev, false);
+
+	vlist_for_each_element(&bst->members, bm, node)
+		bond_disable_member(bm);
+
+	bond_disable_interface(bst);
+
+	return 0;
+}
+
+static int
+bond_set_up(struct bond_state *bst)
+{
+	struct bond_member *bm;
+	int ret;
+
+	if (!bst->n_present) {
+		if (!bst->force_active)
+			return -ENOENT;
+
+		ret = bond_enable_interface(bst);
+		if (ret)
+			return ret;
+	}
+
+	bst->n_failed = 0;
+	vlist_for_each_element(&bst->members, bm, node)
+		bond_enable_member(bm);
+	bond_check_retry(bst);
+
+	if (!bst->force_active && !bst->n_present) {
+		/* initialization of all member interfaces failed */
+		bond_disable_interface(bst);
+		device_set_present(&bst->dev, false);
+		return -ENOENT;
+	}
+
+	bond_reset_primary(bst);
+	ret = bst->set_state(&bst->dev, true);
+	if (ret < 0)
+		bond_set_down(bst);
+
+	return ret;
+}
+
+static int
+bond_set_state(struct device *dev, bool up)
+{
+	struct bond_state *bst;
+
+	bst = container_of(dev, struct bond_state, dev);
+
+	if (up)
+		return bond_set_up(bst);
+	else
+		return bond_set_down(bst);
+}
+
+static struct bond_member *
+bond_create_member(struct bond_state *bst, struct device *dev, bool hotplug)
+{
+	struct bond_member *bm;
+
+	bm = calloc(1, sizeof(*bm) + strlen(dev->ifname) + 1);
+	if (!bm)
+		return NULL;
+
+	bm->bst = bst;
+	bm->dev.cb = bond_member_cb;
+	bm->dev.hotplug = hotplug;
+	strcpy(bm->name, dev->ifname);
+	bm->dev.dev = dev;
+	vlist_add(&bst->members, &bm->node, bm->name);
+	// Need to look up the bond member again as the above
+	// created pointer will be freed in case the bond member
+	// already existed
+	bm = vlist_find(&bst->members, dev->ifname, bm, node);
+	if (hotplug && bm)
+		bm->node.version = -1;
+
+	return bm;
+}
+
+static void
+bond_member_update(struct vlist_tree *tree, struct vlist_node *node_new,
+		     struct vlist_node *node_old)
+{
+	struct bond_member *bm;
+	struct device *dev;
+
+	if (node_new) {
+		bm = container_of(node_new, struct bond_member, node);
+
+		if (node_old) {
+			free(bm);
+			return;
+		}
+
+		dev = bm->dev.dev;
+		bm->dev.dev = NULL;
+		device_add_user(&bm->dev, dev);
+	}
+
+
+	if (node_old) {
+		bm = container_of(node_old, struct bond_member, node);
+		bond_free_member(bm);
+	}
+}
+
+
+static void
+bond_add_member(struct bond_state *bst, const char *name)
+{
+	struct device *dev;
+
+	dev = device_get(name, true);
+	if (!dev)
+		return;
+
+	bond_create_member(bst, dev, false);
+}
+
+static int
+bond_hotplug_add(struct device *dev, struct device *member)
+{
+	struct bond_state *bst = container_of(dev, struct bond_state, dev);
+
+	bond_create_member(bst, member, true);
+
+	return 0;
+}
+
+static int
+bond_hotplug_del(struct device *dev, struct device *member)
+{
+	struct bond_state *bst = container_of(dev, struct bond_state, dev);
+	struct bond_member *bm;
+
+	bm = vlist_find(&bst->members, member->ifname, bm, node);
+	if (!bm)
+		return UBUS_STATUS_NOT_FOUND;
+
+	vlist_delete(&bst->members, &bm->node);
+	return 0;
+}
+
+static int
+bond_hotplug_prepare(struct device *dev)
+{
+	struct bond_state *bst;
+
+	bst = container_of(dev, struct bond_state, dev);
+	bst->force_active = true;
+	device_set_present(&bst->dev, true);
+
+	return 0;
+}
+
+static const struct device_hotplug_ops bond_ops = {
+	.prepare = bond_hotplug_prepare,
+	.add = bond_hotplug_add,
+	.del = bond_hotplug_del
+};
+
+static void
+bond_free(struct device *dev)
+{
+	struct bond_state *bst;
+
+	bst = container_of(dev, struct bond_state, dev);
+	vlist_flush_all(&bst->members);
+	free(bst->config_data);
+	free(bst->config.mode);
+	free(bst->config.primary);
+	free(bst);
+}
+
+static void
+bond_dump_info(struct device *dev, struct blob_buf *b)
+{
+	struct bond_state *bst;
+	struct bond_member *bm;
+	void *list;
+
+	bst = container_of(dev, struct bond_state, dev);
+
+	system_if_dump_info(dev, b);
+	list = blobmsg_open_array(b, "bond-members");
+
+	vlist_for_each_element(&bst->members, bm, node)
+		blobmsg_add_string(b, NULL, bm->dev.dev->ifname);
+
+	blobmsg_close_array(b, list);
+}
+
+static void
+bond_config_init(struct device *dev)
+{
+	struct bond_state *bst;
+	struct blob_attr *cur;
+	int rem;
+
+	bst = container_of(dev, struct bond_state, dev);
+
+	if (bst->config.bond_empty) {
+		bst->force_active = true;
+		device_set_present(&bst->dev, true);
+	}
+
+	bst->n_failed = 0;
+	vlist_update(&bst->members);
+	if (bst->ifnames) {
+		blobmsg_for_each_attr(cur, bst->ifnames, rem) {
+			bond_add_member(bst, blobmsg_data(cur));
+		}
+	}
+	vlist_flush(&bst->members);
+	bond_check_retry(bst);
+}
+
+static void
+bond_apply_settings(struct bond_state *bst, struct blob_attr **tb)
+{
+	struct bond_config *cfg = &bst->config;
+	struct blob_attr *cur;
+
+	/* defaults */
+	cfg->bond_empty = false;
+	cfg->link_poll_interval = 0;
+
+	free(cfg->mode);
+	if ((cur = tb[BOND_ATTR_MODE])) {
+		cfg->mode = strdup(blobmsg_get_string(cur));
+	} else {
+		cfg->mode = NULL;
+	}
+
+	free(cfg->primary);
+	if ((cur = tb[BOND_ATTR_PRIMARY])) {
+		cfg->primary = strdup(blobmsg_get_string(cur));
+	} else {
+		cfg->primary = NULL;
+	}
+
+	if ((cur = tb[BOND_ATTR_BOND_EMPTY]))
+		cfg->bond_empty = blobmsg_get_bool(cur);
+
+	if ((cur = tb[BOND_ATTR_LINK_POLL_INTERVAL]))
+		cfg->link_poll_interval = blobmsg_get_u32(cur);
+}
+
+enum dev_change_type
+bond_reload(struct device *dev, struct blob_attr *attr)
+{
+	struct blob_attr *tb_dev[__DEV_ATTR_MAX];
+	struct blob_attr *tb_br[__BOND_ATTR_MAX];
+	enum dev_change_type ret = DEV_CONFIG_APPLIED;
+	unsigned long diff;
+	struct bond_state *bst;
+
+	BUILD_BUG_ON(sizeof(diff) < __BOND_ATTR_MAX / 8);
+	BUILD_BUG_ON(sizeof(diff) < __DEV_ATTR_MAX / 8);
+
+	bst = container_of(dev, struct bond_state, dev);
+	attr = blob_memdup(attr);
+
+	blobmsg_parse(device_attr_list.params, __DEV_ATTR_MAX, tb_dev,
+		blob_data(attr), blob_len(attr));
+	blobmsg_parse(bond_attrs, __BOND_ATTR_MAX, tb_br,
+		blob_data(attr), blob_len(attr));
+
+	bst->ifnames = tb_br[BOND_ATTR_IFNAME];
+	device_init_settings(dev, tb_dev);
+	bond_apply_settings(bst, tb_br);
+
+	if (bst->config_data) {
+		struct blob_attr *otb_dev[__DEV_ATTR_MAX];
+		struct blob_attr *otb_br[__BOND_ATTR_MAX];
+
+		blobmsg_parse(device_attr_list.params, __DEV_ATTR_MAX, otb_dev,
+			blob_data(bst->config_data), blob_len(bst->config_data));
+
+		diff = 0;
+		uci_blob_diff(tb_dev, otb_dev, &device_attr_list, &diff);
+		if (diff)
+		    ret = DEV_CONFIG_RESTART;
+
+		blobmsg_parse(bond_attrs, __BOND_ATTR_MAX, otb_br,
+			blob_data(bst->config_data), blob_len(bst->config_data));
+
+		diff = 0;
+		uci_blob_diff(tb_br, otb_br, &bond_attr_list, &diff);
+		if (diff & ~(1 << BOND_ATTR_IFNAME))
+		    ret = DEV_CONFIG_RESTART;
+
+		bond_config_init(dev);
+	}
+
+	free(bst->config_data);
+	bst->config_data = attr;
+	return ret;
+}
+
+static void
+bond_retry_members(struct uloop_timeout *timeout)
+{
+	struct bond_state *bst = container_of(timeout, struct bond_state, retry);
+	struct bond_member *bm;
+
+	bst->n_failed = 0;
+	vlist_for_each_element(&bst->members, bm, node) {
+		if (bm->present)
+			continue;
+
+		if (!bm->dev.dev->present)
+			continue;
+
+		bm->present = true;
+		bst->n_present++;
+		bond_enable_member(bm);
+	}
+}
+
+static struct device *
+bond_create(const char *name, struct blob_attr *attr)
+{
+	struct bond_state *bst;
+	struct device *dev = NULL;
+
+	bst = calloc(1, sizeof(*bst));
+	if (!bst)
+		return NULL;
+
+	dev = &bst->dev;
+	device_init(dev, &bond_device_type, name);
+	dev->config_pending = true;
+	bst->retry.cb = bond_retry_members;
+
+	bst->set_state = dev->set_state;
+	dev->set_state = bond_set_state;
+
+	dev->hotplug_ops = &bond_ops;
+
+	vlist_init(&bst->members, avl_strcmp, bond_member_update);
+	bst->members.keep_old = true;
+	bond_reload(dev, attr);
+
+	return dev;
+}
diff --git a/config.c b/config.c
index 5d3db9f..b4c421f 100644
--- a/config.c
+++ b/config.c
@@ -72,6 +72,26 @@ config_parse_bridge_interface(struct uci_section *s)
 	return 0;
 }
 
+static int
+config_parse_bond_interface(struct uci_section *s)
+{
+	char *name;
+
+	name = alloca(strlen(s->e.name) + 4);
+	sprintf(name, "bo-%s", s->e.name);
+	blobmsg_add_string(&b, "name", name);
+
+	uci_to_blob(&b, s, bond_device_type.config_params);
+	if (!device_create(name, &bond_device_type, b.head)) {
+		D(INTERFACE, "Failed to create bond for interface '%s'\n", s->e.name);
+		return -EINVAL;
+	}
+
+	blob_buf_init(&b, 0);
+	blobmsg_add_string(&b, "ifname", name);
+	return 0;
+}
+
 static void
 config_parse_interface(struct uci_section *s, bool alias)
 {
@@ -92,6 +112,11 @@ config_parse_interface(struct uci_section *s, bool alias)
 		if (config_parse_bridge_interface(s))
 			return;
 
+		bridge = true;
+	} else if (type && !strcmp(type, "bond")) {
+		if (config_parse_bond_interface(s))
+			return;
+
 		bridge = true;
 	}
 
@@ -180,6 +205,8 @@ config_init_devices(void)
 				devtype = &macvlan_device_type;
 			else if (!strcmp(type, "tunnel"))
 				devtype = &tunnel_device_type;
+			else if (!strcmp(type, "bond"))
+				devtype = &bond_device_type;
 		}
 
 		if (devtype)
diff --git a/device.h b/device.h
index 3001f10..b300b09 100644
--- a/device.h
+++ b/device.h
@@ -193,6 +193,7 @@ extern const struct device_type bridge_device_type;
 extern const struct device_type tunnel_device_type;
 extern const struct device_type macvlan_device_type;
 extern const struct device_type vlandev_device_type;
+extern const struct device_type bond_device_type;
 
 void device_lock(void);
 void device_unlock(void);
