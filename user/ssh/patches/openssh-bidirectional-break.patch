--- openssh-8.2p1.org/channels.h	2020-02-13 18:40:54.000000000 -0600
+++ openssh-8.2p1/channels.h	2020-06-09 13:37:09.657007000 -0500
@@ -188,6 +188,9 @@
 	void			*mux_ctx;
 	int			mux_pause;
 	int     		mux_downstream_id;
+
+	/* \377 escaped as \377\377 */
+	int				escaped;
 };
 
 #define CHAN_EXTENDED_IGNORE		0
--- openssh-8.2p1.org/channels.c	2020-02-13 18:40:54.000000000 -0600
+++ openssh-8.2p1/channels.c	2020-06-09 13:37:09.657007000 -0500
@@ -2998,7 +2998,7 @@
 channel_input_data(int type, u_int32_t seq, struct ssh *ssh)
 {
 	const u_char *data;
-	size_t data_len, win_len;
+	size_t data_len, win_len, i, escaped;
 	Channel *c = channel_from_packet_id(ssh, __func__, "data");
 	int r;
 
@@ -3021,6 +3021,14 @@
 	win_len = data_len;
 	if (c->datagram)
 		win_len += 4;  /* string length header */
+	else if (c->escaped) {
+		for (i = 0; i < data_len; i++) {
+			if (data[i] == '\377') {
+				escaped++;
+				win_len++;
+			}
+		}
+	}
 
 	/*
 	 * The sending side reduces its window as it sends data, so we
@@ -3049,6 +3057,17 @@
 		if ((r = sshbuf_put_string(c->output, data, data_len)) != 0)
 			fatal("%s: channel %d: append datagram: %s",
 			    __func__, c->self, ssh_err(r));
+	} else if (c->escaped && escaped > 0) {
+		r = 0;
+		for (i = 0; i < data_len && escaped > 0; i++) {
+			if (data[i] == '\377') {
+				r = sshbuf_put_u8(c->output, data[i]);
+				escaped--;
+			}
+			if (r != 0 || (r = sshbuf_put_u8(c->output, data[i])) != 0)
+				fatal("%s: channel %d: append data: %s",
+			    __func__, c->self, ssh_err(r));
+		}
 	} else if ((r = sshbuf_put(c->output, data, data_len)) != 0)
 		fatal("%s: channel %d: append data: %s",
 		    __func__, c->self, ssh_err(r));
--- openssh-8.2p1.org/clientloop.c	2020-06-09 14:19:46.360180633 -0500
+++ openssh-8.2p1/clientloop.c	2020-06-09 14:17:47.338880000 -0500
@@ -111,6 +111,7 @@
 #include "msg.h"
 #include "ssherr.h"
 #include "hostfile.h"
+#include "break-filter.h"
 
 /* import options */
 extern Options options;
@@ -140,6 +141,8 @@
  */
 extern char *forward_agent_sock_path;
 
+extern char const break_sequence[];
+
 /*
  * Flag to indicate that we have received a window change signal which has
  * not yet been processed.  This will cause a message indicating the new
@@ -1329,15 +1332,24 @@
 
 	session_ident = ssh2_chan_id;
 	if (session_ident != -1) {
+		struct Channel * c = channel_lookup(ssh, session_ident);
+
 		if (escape_char_arg != SSH_ESCAPECHAR_NONE) {
 			channel_register_filter(ssh, session_ident,
 			    client_simple_escape_filter, NULL,
 			    client_filter_cleanup,
 			    client_new_escape_filter_ctx(
 			    escape_char_arg));
+		} else if (options.bidirectional_break) {
+			channel_register_filter(ssh, session_ident,
+				simple_break_filter, NULL,
+				break_filter_cleanup,
+			    new_break_filter_ctx());
 		}
 		channel_register_cleanup(ssh, session_ident,
 		    client_channel_closed, 0);
+
+		c->escaped = options.bidirectional_break;
 	}
 
 	/* Main loop of the client for the interactive session mode. */
@@ -1807,6 +1819,15 @@
 		}
 		if ((r = sshpkt_get_end(ssh)) != 0)
 			goto out;
+	} else if (c->escaped && strcmp(rtype, "break") == 0) {
+		if ((r = sshpkt_get_u32(ssh, NULL)) != 0 || /* ignore */
+	    	(r = sshpkt_get_end(ssh)) != 0)
+			sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
+
+		if ((r = sshbuf_put(c->output, break_sequence, BREAK_SEQ_LEN)) != 0)
+			fatal("%s: channel %d: append data: %s",
+		    __func__, c->self, ssh_err(r));
+		success = 1;
 	}
 	if (reply && c != NULL && !(c->flags & CHAN_CLOSE_SENT)) {
 		if (!c->have_remote_id)
--- openssh-8.2p1.org/session.c	2020-06-09 14:19:46.360180633 -0500
+++ openssh-8.2p1/session.c	2020-06-09 13:37:09.661007000 -0500
@@ -96,6 +96,7 @@
 #include "monitor_wrap.h"
 #include "sftp.h"
 #include "atomicio.h"
+#include "break-filter.h"
 
 #if defined(KRB5) && defined(USE_AFS)
 #include <kafs.h>
@@ -144,6 +145,7 @@
 extern struct sshbuf *loginmsg;
 extern struct sshauthopt *auth_opts;
 extern char *tun_fwd_ifnames; /* serverloop.c */
+extern char const break_sequence[];
 
 /* original command from peer. */
 const char *original_command = NULL;
@@ -2118,7 +2120,7 @@
 }
 
 static int
-session_break_req(struct ssh *ssh, Session *s)
+session_break_req(struct ssh *ssh, Session *s, Channel *c)
 {
 	int r;
 
@@ -2126,8 +2128,13 @@
 	    (r = sshpkt_get_end(ssh)) != 0)
 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
 
-	if (s->ptymaster == -1 || tcsendbreak(s->ptymaster, 0) == -1)
+	if (c->escaped) {
+		if ((r = sshbuf_put(c->output, break_sequence, BREAK_SEQ_LEN)) != 0)
+			fatal("%s: channel %d: append data: %s",
+		    __func__, c->self, ssh_err(r));
+	} else if (s->ptymaster == -1 || tcsendbreak(s->ptymaster, 0) == -1)
 		return 0;
+
 	return 1;
 }
 
@@ -2280,6 +2287,13 @@
 	if (c->type == SSH_CHANNEL_LARVAL) {
 		if (strcmp(rtype, "shell") == 0) {
 			success = session_shell_req(ssh, s);
+			if (success && options.bidirectional_break) {
+				channel_register_filter(ssh, c->self,
+					simple_break_filter, NULL,
+					break_filter_cleanup,
+			    	new_break_filter_ctx());
+				c->escaped = 1;
+			}
 		} else if (strcmp(rtype, "exec") == 0) {
 			success = session_exec_req(ssh, s);
 		} else if (strcmp(rtype, "pty-req") == 0) {
@@ -2297,7 +2311,7 @@
 	if (strcmp(rtype, "window-change") == 0) {
 		success = session_window_change_req(ssh, s);
 	} else if (strcmp(rtype, "break") == 0) {
-		success = session_break_req(ssh, s);
+		success = session_break_req(ssh, s, c);
 	} else if (strcmp(rtype, "signal") == 0) {
 		success = session_signal_req(ssh, s);
 	}
--- openssh-8.2p1.org/break-filter.h	1969-12-31 18:00:00.000000000 -0600
+++ openssh-8.2p1/break-filter.h	2020-06-09 13:37:09.661007000 -0500
@@ -0,0 +1,17 @@
+#ifndef BREAK_FILTER_H
+#define BREAK_FILTER_H
+
+#define BREAK_SEQ_LEN 2
+
+struct ssh;
+
+int
+simple_break_filter(struct ssh *ssh, struct Channel *c, char *buf, int len);
+
+void
+break_filter_cleanup(struct ssh *ssh, int cid, void *ctx);
+
+void *
+new_break_filter_ctx(void);
+
+#endif
--- openssh-8.2p1.org/break-filter.c	1969-12-31 18:00:00.000000000 -0600
+++ openssh-8.2p1/break-filter.c	2020-06-09 13:37:09.661007000 -0500
@@ -0,0 +1,72 @@
+#include "includes.h"
+
+#include "break-filter.h"
+#include "openbsd-compat/sys-queue.h"
+#include "channels.h"
+#include "sshbuf.h"
+#include "xmalloc.h"
+#include "packet.h"
+#include "log.h"
+#include "ssherr.h"
+
+struct break_sequence {
+	int escape_pending;
+	int break_pending;
+	size_t break_off;
+};
+
+char const break_sequence[] = {'\377','\0'};
+
+int
+simple_break_filter(struct ssh *ssh, struct Channel *c, char *buf, int len)
+{
+	int r, bytes = 0;
+	u_int i;
+	u_char ch;
+	int * escape_pending = c->filter_ctx == NULL ?
+	    NULL : (int *)c->filter_ctx;
+
+	if (escape_pending == NULL || len <= 0)
+		return (0);
+
+	for (i = 0; i < (u_int)len; i++) {
+		/* Get one character at a time. */
+		ch = buf[i];
+		if (*escape_pending) {
+			*escape_pending = 0;
+
+			switch (ch) {
+			case '\0':
+				channel_request_start(ssh, c->self, "break", 0);
+				if ((r = sshpkt_put_u32(ssh, 1000)) != 0 ||
+				    (r = sshpkt_send(ssh)) != 0)
+					fatal("%s: send packet: %s", __func__, ssh_err(r));
+				continue;
+			case '\377':
+				if ((r = sshbuf_put_u8(c->input, '\377')) != 0)
+					fatal("%s: buffer error: %s", __func__, ssh_err(r));
+				bytes++;
+				continue;
+			}
+		} else if (ch == '\377') {
+			*escape_pending = 1;
+			continue;
+		}
+		if ((r = sshbuf_put_u8(c->input, ch)) != 0)
+			fatal("%s: buffer error: %s", __func__, ssh_err(r));
+		bytes++;
+	}
+	return bytes;
+}
+
+void
+break_filter_cleanup(struct ssh *ssh, int cid, void *ctx)
+{
+	free(ctx);
+}
+
+void *
+new_break_filter_ctx(void)
+{
+	return xcalloc(1, sizeof (int));
+}
--- openssh-8.2p1.org/servconf.h	2020-06-09 14:19:46.372180763 -0500
+++ openssh-8.2p1/servconf.h	2020-06-09 13:37:09.661007000 -0500
@@ -220,6 +220,7 @@
 	int	expose_userauth_info;
 	u_int64_t timing_secret;
 	char   *sk_provider;
+	int bidirectional_break;
 }       ServerOptions;
 
 /* Information about the incoming connection as used by Match */
--- openssh-8.2p1.org/servconf.c	2020-06-09 14:19:46.372180763 -0500
+++ openssh-8.2p1/servconf.c	2020-06-09 13:37:09.661007000 -0500
@@ -191,6 +191,7 @@
 	options->fingerprint_hash = -1;
 	options->disable_forwarding = -1;
 	options->expose_userauth_info = -1;
+	options->bidirectional_break = -1;
 }
 
 /* Returns 1 if a string option is unset or set to "none" or 0 otherwise. */
@@ -457,6 +458,8 @@
 		options->expose_userauth_info = 0;
 	if (options->sk_provider == NULL)
 		options->sk_provider = xstrdup("internal");
+	if (options->bidirectional_break == -1)
+		options->bidirectional_break = 0;
 
 	assemble_algorithms(options);
 
@@ -545,6 +548,7 @@
 	sAllowStreamLocalForwarding, sFingerprintHash, sDisableForwarding,
 	sVirtualUser,
 	sExposeAuthInfo, sRDomain, sPubkeyAuthOptions, sSecurityKeyProvider,
+	sBidirectionalBreak,
 	sDeprecated, sIgnore, sUnsupported
 } ServerOpCodes;
 
@@ -698,6 +702,7 @@
 	{ "rdomain", sRDomain, SSHCFG_ALL },
 	{ "casignaturealgorithms", sCASignatureAlgorithms, SSHCFG_ALL },
 	{ "securitykeyprovider", sSecurityKeyProvider, SSHCFG_GLOBAL },
+	{ "bidirectionalbreak", sBidirectionalBreak, SSHCFG_ALL },
 	{ NULL, sBadOption, 0 }
 };
 
@@ -2352,6 +2357,10 @@
 			*charptr = xstrdup(arg);
 		break;
 
+	case sBidirectionalBreak:
+		intptr = &options->bidirectional_break;
+		goto parse_flag;
+
 	case sDeprecated:
 	case sIgnore:
 	case sUnsupported:
@@ -2510,6 +2519,7 @@
 	M_CP_INTOPT(rekey_limit);
 	M_CP_INTOPT(rekey_interval);
 	M_CP_INTOPT(log_level);
+	M_CP_INTOPT(bidirectional_break);
 
 	/*
 	 * The bind_mask is a mode_t that may be unsigned, so we can't use
@@ -2818,6 +2828,7 @@
 	dump_cfg_fmtint(sStreamLocalBindUnlink, o->fwd_opts.streamlocal_bind_unlink);
 	dump_cfg_fmtint(sFingerprintHash, o->fingerprint_hash);
 	dump_cfg_fmtint(sExposeAuthInfo, o->expose_userauth_info);
+	dump_cfg_fmtint(sBidirectionalBreak, o->bidirectional_break);
 
 	/* string arguments */
 	dump_cfg_string(sPidFile, o->pid_file);
--- openssh-8.2p1.org/readconf.h	2020-02-13 18:40:54.000000000 -0600
+++ openssh-8.2p1/readconf.h	2020-06-09 13:37:09.661007000 -0500
@@ -168,6 +168,8 @@
 	char   *jump_extra;
 
 	char	*ignored_unknown; /* Pattern list of unknown tokens to ignore */
+
+	int bidirectional_break;
 }       Options;
 
 #define SSH_CANONICALISE_NO	0
--- openssh-8.2p1.org/readconf.c	2020-06-09 14:19:46.364180676 -0500
+++ openssh-8.2p1/readconf.c	2020-06-09 13:37:09.661007000 -0500
@@ -173,6 +173,7 @@
 	oFingerprintHash, oUpdateHostkeys, oHostbasedKeyTypes,
 	oPubkeyAcceptedKeyTypes, oCASignatureAlgorithms, oProxyJump,
 	oSecurityKeyProvider,
+	oBidirectionalBreak,
 	oIgnore, oIgnoredUnknownOption, oDeprecated, oUnsupported
 } OpCodes;
 
@@ -310,6 +311,7 @@
 	{ "ignoreunknown", oIgnoreUnknown },
 	{ "proxyjump", oProxyJump },
 	{ "securitykeyprovider", oSecurityKeyProvider },
+	{ "bidirectionalbreak", oBidirectionalBreak },
 
 	{ NULL, oBadOption }
 };
@@ -1788,6 +1790,10 @@
 			*charptr = xstrdup(arg);
 		break;
 
+	case oBidirectionalBreak:
+		intptr = &options->bidirectional_break;
+		goto parse_flag;
+
 	case oDeprecated:
 		debug("%s line %d: Deprecated option \"%s\"",
 		    filename, linenum, keyword);
@@ -1996,6 +2002,7 @@
 	options->update_hostkeys = -1;
 	options->hostbased_key_types = NULL;
 	options->pubkey_key_types = NULL;
+	options->bidirectional_break = -1;
 }
 
 /*
@@ -2179,6 +2186,8 @@
 	if (options->sk_provider == NULL)
 		options->sk_provider = xstrdup("$SSH_SK_PROVIDER");
 #endif
+	if (options->bidirectional_break == -1)
+		options->bidirectional_break = 0;
 
 	/* Expand KEX name lists */
 	all_cipher = cipher_alg_list(',', 0);
@@ -2721,6 +2730,7 @@
 	dump_cfg_fmtint(oVerifyHostKeyDNS, o->verify_host_key_dns);
 	dump_cfg_fmtint(oVisualHostKey, o->visual_host_key);
 	dump_cfg_fmtint(oUpdateHostkeys, o->update_hostkeys);
+	dump_cfg_fmtint(oBidirectionalBreak, o->bidirectional_break);
 
 	/* Integer options */
 	dump_cfg_int(oCanonicalizeMaxDots, o->canonicalize_max_dots);
--- openssh-8.2p1.org/Makefile.in	2020-06-09 14:19:46.356180589 -0500
+++ openssh-8.2p1/Makefile.in	2020-06-09 13:37:09.665007000 -0500
@@ -110,7 +110,7 @@
 	kexgexc.o kexgexs.o \
 	sntrup4591761.o kexsntrup4591761x25519.o kexgen.o \
 	sftp-realpath.o platform-pledge.o platform-tracing.o platform-misc.o \
-	sshbuf-io.o
+	sshbuf-io.o break-filter.o
 
 SKOBJS=	ssh-sk-client.o
 
