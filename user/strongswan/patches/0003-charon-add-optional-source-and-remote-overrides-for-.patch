From db627ec8a8e72bc6b23dc8ab00f4e6b4f448d01c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timo=20Ter=C3=A4s?= <timo.teras@iki.fi>
Date: Mon, 21 Sep 2015 13:41:58 +0300
Subject: [PATCH 1/3] charon: add optional source and remote overrides for
 initiate
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This introduces support for specifying optional IKE SA specific
source and remote address for child sa initiation. This allows
to initiate wildcard connection for known address via vici.

In addition this allows impler implementation of trap-any patches
and is a prerequisite for dmvpn support.

Signed-off-by: Timo Ter√§s <timo.teras@iki.fi>
---
 src/charon-cmd/cmd/cmd_connection.c           |  2 +-
 src/libcharon/control/controller.c            | 42 +++++++++++-
 src/libcharon/control/controller.h            |  3 +
 src/libcharon/plugins/stroke/stroke_control.c |  5 +-
 src/libcharon/plugins/vici/vici_config.c      |  2 +-
 src/libcharon/plugins/vici/vici_control.c     | 64 ++++++++++++++++---
 .../processing/jobs/start_action_job.c        |  2 +-
 src/libcharon/sa/ike_sa_manager.c             | 50 ++++++++++++++-
 src/libcharon/sa/ike_sa_manager.h             |  8 ++-
 src/libcharon/sa/trap_manager.c               | 44 +++++--------
 src/swanctl/commands/initiate.c               | 40 +++++++++++-
 11 files changed, 215 insertions(+), 47 deletions(-)

 /*
  * Copyright (C) 2014 Timo Ter<C3><A4>s <timo.teras@iki.fi>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
  * in the Software without restriction, including without limitation the rights
  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  * copies of the Software, and to permit persons to whom the Software is
  * furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be included in
  * all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  * THE SOFTWARE.
  */

Index: strongswan-5.9.13/src/charon-cmd/cmd/cmd_connection.c
===================================================================
--- strongswan-5.9.13.orig/src/charon-cmd/cmd/cmd_connection.c
+++ strongswan-5.9.13/src/charon-cmd/cmd/cmd_connection.c
@@ -439,6 +439,7 @@ static job_requeue_t initiate(private_cm
 	child_cfg = create_child_cfg(this, peer_cfg);
 
 	if (charon->controller->initiate(charon->controller, peer_cfg, child_cfg,
+				NULL, NULL,
 				controller_cb_empty, NULL, LEVEL_SILENT, 0, FALSE) != SUCCESS)
 	{
 		terminate(pid);
Index: strongswan-5.9.13/src/libcharon/control/controller.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/control/controller.c
+++ strongswan-5.9.13/src/libcharon/control/controller.c
@@ -108,6 +108,16 @@ struct interface_listener_t {
 	ike_sa_t *ike_sa;
 
 	/**
+	 * Our host hint.
+	 */
+	host_t *my_host;
+
+	/**
+	 * Other host hint.
+	 */
+	host_t *other_host;
+
+	/**
 	 * unique ID, used for various methods
 	 */
 	uint32_t id;
@@ -417,10 +427,15 @@ METHOD(job_t, initiate_execute, job_requ
 	ike_sa_t *ike_sa;
 	interface_listener_t *listener = &job->listener;
 	peer_cfg_t *peer_cfg = listener->peer_cfg;
+	host_t *my_host = listener->my_host;
+	host_t *other_host = listener->other_host;
 
 	ike_sa = charon->ike_sa_manager->checkout_by_config(charon->ike_sa_manager,
-														peer_cfg);
+														peer_cfg, my_host, other_host);
 	peer_cfg->destroy(peer_cfg);
+	DESTROY_IF(my_host);
+	DESTROY_IF(other_host);
+
 	if (!ike_sa)
 	{
 		DESTROY_IF(listener->child_cfg);
@@ -499,6 +514,7 @@ METHOD(job_t, initiate_execute, job_requ
 
 METHOD(controller_t, initiate, status_t,
 	private_controller_t *this, peer_cfg_t *peer_cfg, child_cfg_t *child_cfg,
+	host_t *my_host, host_t *other_host,
 	controller_cb_t callback, void *param, level_t max_level, u_int timeout,
 	bool limits)
 {
@@ -523,6 +539,8 @@ METHOD(controller_t, initiate, status_t,
 			.status = FAILED,
 			.child_cfg = child_cfg,
 			.peer_cfg = peer_cfg,
+			.my_host = my_host ? my_host->clone(my_host) : NULL,
+			.other_host = other_host ? other_host->clone(other_host) : NULL,
 			.lock = spinlock_create(),
 			.options.limits = limits,
 		},
Index: strongswan-5.9.13/src/libcharon/control/controller.h
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/control/controller.h
+++ strongswan-5.9.13/src/libcharon/control/controller.h
@@ -81,6 +81,8 @@ struct controller_t {
 	 *
 	 * @param peer_cfg		peer_cfg to use for IKE_SA setup
 	 * @param child_cfg		optional child_cfg to set up CHILD_SA from
+	 * @param my_host		optional address hint for source
+	 * @param other_host		optional address hint for destination
 	 * @param cb			logging callback
 	 * @param param			parameter to include in each call of cb
 	 * @param max_level		maximum log level for which cb is invoked
@@ -95,6 +97,7 @@ struct controller_t {
 	 */
 	status_t (*initiate)(controller_t *this,
 						 peer_cfg_t *peer_cfg, child_cfg_t *child_cfg,
+						 host_t *myhost, host_t *other_host,
 						 controller_cb_t callback, void *param,
 						 level_t max_level, u_int timeout, bool limits);
 
Index: strongswan-5.9.13/src/libcharon/plugins/stroke/stroke_control.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/plugins/stroke/stroke_control.c
+++ strongswan-5.9.13/src/libcharon/plugins/stroke/stroke_control.c
@@ -109,6 +109,7 @@ static void charon_initiate(private_stro
 	if (msg->output_verbosity < 0)
 	{
 		charon->controller->initiate(charon->controller, peer_cfg, child_cfg,
+									 NULL, NULL,
 									 NULL, NULL, 0, 0, FALSE);
 	}
 	else
@@ -117,7 +118,7 @@ static void charon_initiate(private_stro
 		status_t status;
 
 		status = charon->controller->initiate(charon->controller,
-							peer_cfg, child_cfg, (controller_cb_t)stroke_log,
+							peer_cfg, child_cfg, NULL, NULL, (controller_cb_t)stroke_log,
 							&info, msg->output_verbosity, this->timeout, FALSE);
 		switch (status)
 		{
Index: strongswan-5.9.13/src/libcharon/plugins/vici/vici_config.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/plugins/vici/vici_config.c
+++ strongswan-5.9.13/src/libcharon/plugins/vici/vici_config.c
@@ -2252,6 +2252,7 @@ static void run_start_action(private_vic
 		DBG1(DBG_CFG, "initiating '%s'", child_cfg->get_name(child_cfg));
 		charon->controller->initiate(charon->controller,
 					peer_cfg->get_ref(peer_cfg), child_cfg->get_ref(child_cfg),
+					NULL, NULL,
 					NULL, NULL, 0, 0, FALSE);
 	}
 }
Index: strongswan-5.9.13/src/libcharon/plugins/vici/vici_control.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/plugins/vici/vici_control.c
+++ strongswan-5.9.13/src/libcharon/plugins/vici/vici_control.c
@@ -176,6 +176,8 @@ CALLBACK(initiate, vici_message_t*,
 	peer_cfg_t *peer_cfg = NULL;
 	child_cfg_t *child_cfg;
 	char *child, *ike, *type, *sa;
+	char *my_host_str, *other_host_str;
+	host_t *my_host, *other_host;
 	int timeout;
 	bool limits;
 	controller_cb_t log_cb = NULL;
@@ -189,6 +191,8 @@ CALLBACK(initiate, vici_message_t*,
 	timeout = request->get_int(request, 0, "timeout");
 	limits = request->get_bool(request, FALSE, "init-limits");
 	log.level = request->get_int(request, 1, "loglevel");
+	my_host_str = request->get_str(request, NULL, "my-host");
+	other_host_str = request->get_str(request, NULL, "other-host");
 
 	if (!child && !ike)
 	{
@@ -201,27 +205,35 @@ CALLBACK(initiate, vici_message_t*,
 
 	type = child ? "CHILD_SA" : "IKE_SA";
 	sa = child ?: ike;
+	my_host = host_create_from_string(my_host_str, 0);
+	other_host = host_create_from_string(other_host_str, 0);
 
 	child_cfg = find_child_cfg(child, ike, &peer_cfg);
 
-	DBG1(DBG_CFG, "vici initiate %s '%s'", type, sa);
+	DBG1(DBG_CFG, "vici initiate %s '%s', me %H, other %H, limits %d", type, sa, my_host, other_host, limits);
 	if (!peer_cfg)
 	{
+		DESTROY_IF(my_host); DESTROY_IF(other_host);
 		return send_reply(this, "%s config '%s' not found", type, sa);
 	}
 	switch (charon->controller->initiate(charon->controller, peer_cfg, child_cfg,
+										 my_host, other_host,
 										 log_cb, &log, log.level, timeout, limits))
 	{
 		case SUCCESS:
+			DESTROY_IF(my_host); DESTROY_IF(other_host);
 			return send_reply(this, NULL);
 		case OUT_OF_RES:
+			DESTROY_IF(my_host); DESTROY_IF(other_host);
 			return send_reply(this, "%s '%s' not established after %dms", type,
 							  sa, timeout);
 		case INVALID_STATE:
+			DESTROY_IF(my_host); DESTROY_IF(other_host);
 			return send_reply(this, "establishing %s '%s' not possible at the "
 							  "moment due to limits", type, sa);
 		case FAILED:
 		default:
+			DESTROY_IF(my_host); DESTROY_IF(other_host);
 			return send_reply(this, "establishing %s '%s' failed", type, sa);
 	}
 }
Index: strongswan-5.9.13/src/libcharon/processing/jobs/start_action_job.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/processing/jobs/start_action_job.c
+++ strongswan-5.9.13/src/libcharon/processing/jobs/start_action_job.c
@@ -84,6 +84,7 @@ METHOD(job_t, execute, job_requeue_t,
 				charon->controller->initiate(charon->controller,
 											 peer_cfg->get_ref(peer_cfg),
 											 child_cfg->get_ref(child_cfg),
+											 NULL, NULL,
 											 NULL, NULL, 0, 0, FALSE);
 			}
 		}
Index: strongswan-5.9.13/src/libcharon/sa/ike_sa_manager.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/sa/ike_sa_manager.c
+++ strongswan-5.9.13/src/libcharon/sa/ike_sa_manager.c
@@ -1498,7 +1498,8 @@ typedef struct {
 } config_entry_t;
 
 METHOD(ike_sa_manager_t, checkout_by_config, ike_sa_t*,
-	private_ike_sa_manager_t *this, peer_cfg_t *peer_cfg)
+	private_ike_sa_manager_t *this, peer_cfg_t *peer_cfg,
+	host_t *my_host, host_t *other_host)
 {
 	enumerator_t *enumerator;
 	entry_t *entry;
@@ -1509,7 +1510,17 @@ METHOD(ike_sa_manager_t, checkout_by_con
 	u_int segment;
 	int i;
 
-	DBG2(DBG_MGR, "checkout IKE_SA by config");
+	if (my_host && my_host->get_port(my_host) == 0)
+	{
+		my_host->set_port(my_host, IKEV2_UDP_PORT);
+	}
+	if (other_host && other_host->get_port(other_host) == 0)
+	{
+		other_host->set_port(other_host, IKEV2_UDP_PORT);
+	}
+
+	DBG2(DBG_MGR, "checkout IKE_SA by config '%s', me %H, other %H",
+		 peer_cfg->get_name(peer_cfg), my_host, other_host);
 
 	if (!this->reuse_ikesa && peer_cfg->get_ike_version(peer_cfg) != IKEV1)
 	{	/* IKE_SA reuse disabled by config (not possible for IKEv1) */
@@ -1567,6 +1578,15 @@ METHOD(ike_sa_manager_t, checkout_by_con
 			continue;
 		}
 
+		if (my_host && !my_host->ip_equals(my_host, entry->ike_sa->get_my_host(entry->ike_sa)))
+		{
+			continue;
+		}
+		if (other_host && !other_host->ip_equals(other_host, entry->ike_sa->get_other_host(entry->ike_sa)))
+		{
+			continue;
+		}
+
 		current_peer = entry->ike_sa->get_peer_cfg(entry->ike_sa);
 		if (current_peer && current_peer->equals(current_peer, peer_cfg))
 		{
@@ -1593,6 +1613,10 @@ METHOD(ike_sa_manager_t, checkout_by_con
 		{
 			ike_sa->set_peer_cfg(ike_sa, peer_cfg);
 			checkout_new(this, ike_sa);
+			if (my_host || other_host)
+			{
+				ike_sa->update_hosts(ike_sa, my_host, other_host, TRUE);
+			}
 		}
 	}
 	charon->bus->set_sa(charon->bus, ike_sa);
Index: strongswan-5.9.13/src/libcharon/sa/ike_sa_manager.h
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/sa/ike_sa_manager.h
+++ strongswan-5.9.13/src/libcharon/sa/ike_sa_manager.h
@@ -123,7 +123,8 @@ struct ike_sa_manager_t {
 	ike_sa_t* (*checkout_by_message) (ike_sa_manager_t* this, message_t *message);
 
 	/**
-	 * Checkout an IKE_SA for initiation by a peer_config.
+	 * Checkout an IKE_SA for initiation by a peer_config and optional
+	 * source and remote host addresses.
 	 *
 	 * To initiate, a CHILD_SA may be established within an existing IKE_SA.
 	 * This call checks for an existing IKE_SA by comparing the configuration.
@@ -136,9 +137,12 @@ struct ike_sa_manager_t {
 	 * @note The peer_config is always set on the returned IKE_SA.
 	 *
 	 * @param peer_cfg			configuration used to find an existing IKE_SA
+	 * @param my_host			source host address for wildcard peer_cfg
+	 * @param other_host		remote host address for wildcard peer_cfg
 	 * @return					checked out/created IKE_SA
 	 */
-	ike_sa_t *(*checkout_by_config)(ike_sa_manager_t* this, peer_cfg_t *peer_cfg);
+	ike_sa_t *(*checkout_by_config)(ike_sa_manager_t* this, peer_cfg_t *peer_cfg,
+									host_t *my_host, host_t *other_host);
 
 	/**
 	 * Reset initiator SPI.
Index: strongswan-5.9.13/src/libcharon/sa/trap_manager.c
===================================================================
--- strongswan-5.9.13.orig/src/libcharon/sa/trap_manager.c
+++ strongswan-5.9.13/src/libcharon/sa/trap_manager.c
@@ -524,6 +524,7 @@ METHOD(trap_manager_t, acquire, void,
 	child_cfg_t *child;
 	ike_sa_t *ike_sa;
 	host_t *host;
+	host_t *my_host = NULL, *other_host = NULL;
 	uint32_t allocated_reqid;
 	bool wildcard, ignore = FALSE;
 
@@ -603,37 +604,27 @@ METHOD(trap_manager_t, acquire, void,
 	this->lock->unlock(this->lock);
 
 	if (wildcard)
-	{	/* the peer config would match IKE_SAs with other peers */
-		ike_sa = charon->ike_sa_manager->create_new(charon->ike_sa_manager,
-											peer->get_ike_version(peer), TRUE);
-		if (ike_sa)
-		{
-			ike_cfg_t *ike_cfg;
-			uint16_t port;
-			uint8_t mask;
-
-			ike_sa->set_peer_cfg(ike_sa, peer);
-			ike_cfg = ike_sa->get_ike_cfg(ike_sa);
-
-			port = ike_cfg->get_other_port(ike_cfg);
-			data->dst->to_subnet(data->dst, &host, &mask);
-			host->set_port(host, port);
-			ike_sa->set_other_host(ike_sa, host);
-
-			port = ike_cfg->get_my_port(ike_cfg);
-			data->src->to_subnet(data->src, &host, &mask);
-			host->set_port(host, port);
-			ike_sa->set_my_host(ike_sa, host);
-
-			charon->bus->set_sa(charon->bus, ike_sa);
-		}
-	}
-	else
 	{
-		ike_sa = charon->ike_sa_manager->checkout_by_config(
-											charon->ike_sa_manager, peer);
-	}
+		ike_cfg_t *ike_cfg;
+		uint16_t port;
+		uint8_t mask;
+
+		ike_cfg = peer->get_ike_cfg(peer);
+
+		port = ike_cfg->get_other_port(ike_cfg);
+		data->dst->to_subnet(data->dst, &other_host, &mask);
+		other_host->set_port(other_host, port);
+
+		port = ike_cfg->get_my_port(ike_cfg);
+		data->src->to_subnet(data->src, &my_host, &mask);
+		my_host->set_port(my_host, port);
+	}
+	ike_sa = charon->ike_sa_manager->checkout_by_config(
+											charon->ike_sa_manager, peer,
+											my_host, other_host);
 	peer->destroy(peer);
+	DESTROY_IF(my_host);
+	DESTROY_IF(other_host);
 
 	if (ike_sa)
 	{
Index: strongswan-5.9.13/src/swanctl/commands/initiate.c
===================================================================
--- strongswan-5.9.13.orig/src/swanctl/commands/initiate.c
+++ strongswan-5.9.13/src/swanctl/commands/initiate.c
@@ -39,6 +39,7 @@ static int initiate(vici_conn_t *conn)
 	vici_res_t *res;
 	command_format_options_t format = COMMAND_FORMAT_NONE;
 	char *arg, *child = NULL, *ike = NULL;
+	char *my_host = NULL, *other_host = NULL;
 	int ret = 0, timeout = 0, level = 1;
 
 	while (TRUE)
@@ -65,6 +66,12 @@ static int initiate(vici_conn_t *conn)
 			case 'l':
 				level = atoi(arg);
 				continue;
+			case 'S':
+				my_host = arg;
+				continue;
+			case 'R':
+				other_host = arg;
+				continue;
 			case EOF:
 				break;
 			default:
@@ -88,6 +95,14 @@ static int initiate(vici_conn_t *conn)
 	{
 		vici_add_key_valuef(req, "ike", "%s", ike);
 	}
+	if (my_host)
+	{
+		vici_add_key_valuef(req, "my-host", "%s", my_host);
+	}
+	if (other_host)
+	{
+		vici_add_key_valuef(req, "other-host", "%s", other_host);
+	}
 	if (timeout)
 	{
 		vici_add_key_valuef(req, "timeout", "%d", timeout * 1000);
@@ -134,6 +149,8 @@ static void __attribute__ ((constructor)
 			{"help",		'h', 0, "show usage information"},
 			{"child",		'c', 1, "initiate a CHILD_SA configuration"},
 			{"ike",			'i', 1, "initiate an IKE_SA, or name of child's parent"},
+			{"source",		'S', 1, "override source address"},
+			{"remote",		'R', 1, "override remote address"},
 			{"timeout",		't', 1, "timeout in seconds before detaching"},
 			{"raw",			'r', 0, "dump raw response message"},
 			{"pretty",		'P', 0, "dump raw response message in pretty print"},
