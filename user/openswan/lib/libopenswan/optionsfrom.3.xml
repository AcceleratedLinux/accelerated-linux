<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry>
<refmeta>
<refentrytitle>IPSEC_OPTIONSFROM</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>16 Oct 1998</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec optionsfrom</refname>
<refpurpose>read additional ``command-line'' options from file</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;freeswan.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>const char *<function>optionsfrom</function></funcdef>
    <paramdef>char * <parameter>filename</parameter></paramdef>
    <paramdef>int * <parameter>argcp</parameter></paramdef>
    <paramdef>char *** <parameter>argvp</parameter></paramdef>
    <paramdef>int <parameter>optind</parameter></paramdef>
    <paramdef>FILE * <parameter>errsto</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para><emphasis remap='I'>Optionsfrom</emphasis>
is called from within a
<citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry>
scan,
as the result of the appearance of an option (preferably
<option>--optionsfrom</option>)
to insert additional &ldquo;command-line&rdquo; arguments
into the scan immediately after
the option.
Typically this would be done to pick up options which are
security-sensitive and should not be visible to
<citerefentry><refentrytitle>ps</refentrytitle><manvolnum>1</manvolnum></citerefentry>
and similar commands,
and hence cannot be supplied as part
of the actual command line or the environment.</para>

<para><emphasis remap='I'>Optionsfrom</emphasis>
reads the additional arguments from the specified
<varname role='parameter'>filename</varname>,
allocates a new argument vector to hold pointers to the existing
arguments plus the new ones,
and amends
<emphasis remap='I'>argc</emphasis>
and
<emphasis remap='I'>argv</emphasis>
(via the pointers
<varname role='parameter'>argcp</varname>
and
<varname role='parameter'>argvp</varname>,
which must point to the
<emphasis remap='I'>argc</emphasis>
and
<emphasis remap='I'>argv</emphasis>
being supplied to
<citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry>)
accordingly.
<emphasis remap='I'>Optind</emphasis>
must be the index, in the original argument vector,
of the next argument.</para>

<para>If
<varname role='parameter'>errsto</varname>
is NULL,
<function>optionsfrom</function>
returns NULL for success and
a pointer to a string-literal error message for failure;
see DIAGNOSTICS.
If
<varname role='parameter'>errsto</varname>
is non-NULL and an error occurs,
<function>optionsfrom</function>
prints a suitable complaint onto the
<varname role='parameter'>errsto</varname>
descriptor and invokes
<emphasis remap='I'>exit</emphasis>
with an exit status of 2;
this is a convenience for cases where more sophisticated
responses are not required.</para>

<para>The text of existing arguments is not disturbed by
<function>optionsfrom</function>,
so pointers to them and into them remain valid.</para>

<para>The file of additional arguments is an ASCII text file.
Lines consisting solely of white space,
and lines beginning with
<emphasis remap='B'>#</emphasis>,
are comments and are ignored.
Otherwise, a line which does not begin with
<emphasis remap='B'>-</emphasis>
is taken to be a single argument;
if it both begins and ends with double-quote ("),
those quotes are stripped off (note, no other processing is done within
the line!).
A line beginning with
<emphasis remap='B'>-</emphasis>
is considered to contain multiple arguments separated by white space.</para>

<para>Because
<function>optionsfrom</function>
reads its entire file before the
<citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry>
scan is resumed, an
<function>optionsfrom</function>
file can contain another
<option>--optionsfrom</option>
option.
Obviously, infinite loops are possible here.
If
<varname role='parameter'>errsto</varname>
is non-NULL,
<function>optionsfrom</function>
considers it an error to be called more than 100 times.
If
<varname role='parameter'>errsto</varname>
is NULL,
loop detection is up to the caller
(and the internal loop counter is zeroed out).</para>
</refsect1>

<refsect1 id='example'><title>EXAMPLE</title>
<para>A reasonable way to invoke
<function>optionsfrom</function>
would be like so:</para>

<programlisting remap='.nf'>
#include &lt;getopt.h&gt;

struct option opts[] = {
	/* ... */
	"optionsfrom",	1,	NULL,	'+',
	/* ... */
};

int
main(argc, argv)
int argc;
char *argv[];
{
	int opt;
	extern char *optarg;
	extern int optind;

	while ((opt = getopt_long(argc, argv, "", opts, NULL)) != EOF)
		switch (opt) {
		/* ... */
		case '+':	/* optionsfrom */
			optionsfrom(optarg, &amp;argc, &amp;argv, optind, stderr);
			/* does not return on error */
			break;
		/* ... */
		}
	/* ... */
</programlisting> <!-- .fi -->
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='diagnostics'><title>DIAGNOSTICS</title>
<para>Errors in
<function>optionsfrom</function>
are:
unable to open file;
attempt to allocate temporary storage for argument or
argument vector failed;
read error in file;
line too long.</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Written for the FreeS/WAN project by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>The double-quote convention is rather simplistic.</para>

<para>Line length is currently limited to 1023 bytes,
and there is no continuation convention.</para>

<para>The restriction of error reports to literal strings
(so that callers don't need to worry about freeing them or copying them)
does limit the precision of error reporting.</para>

<para>The error-reporting convention lends itself
to slightly obscure code,
because many readers will not think of NULL as signifying success.</para>

<para>There is a certain element of unwarranted chumminess with
the insides of
<citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry>
here.
No non-public interfaces are actually used, but
<function>optionsfrom</function>
does rely on
<citerefentry><refentrytitle>getopt_long</refentrytitle><manvolnum>3</manvolnum></citerefentry>
being well-behaved in certain ways that are not actually
promised by the specs.</para>
</refsect1>
</refentry>

