<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry id='prng3'>
<refentryinfo><date>1 April 2002</date></refentryinfo>
<refmeta>
<refentrytitle>IPSEC_PRNG_INIT</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='date'>1 April 2002</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec prng_init</refname>
<refname>ipsec prng_bytes</refname>
<refname>ipsec prng_final</refname>
<refpurpose>initialize IPsec pseudorandom-number generator, get bytes from IPsec pseudorandom-number generator, close down IPsec pseudorandom-number generator</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;freeswan.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>void <function>prng_init</function></funcdef>
    <paramdef>struct prng * <parameter>prng</parameter></paramdef>
    <paramdef>const unsigned char * <parameter>key</parameter></paramdef>
    <paramdef>size_t <parameter>keylen</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>void <function>prng_bytes</function></funcdef>
    <paramdef>struct prng * <parameter>prng</parameter></paramdef>
    <paramdef>char * <parameter>dst</parameter></paramdef>
    <paramdef>size_t <parameter>dstlen</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>unsigned long <function>prng_count</function></funcdef>
    <paramdef>struct prng * <parameter>prng</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>void <function>prng_final</function></funcdef>
    <paramdef>struct prng * <parameter>prng</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='description'><title>DESCRIPTION</title>
<para><emphasis remap='I'>Prng_init</emphasis>
initializes a crypto-quality pseudo-random-number generator from a key;
<function>prng_bytes</function>
obtains pseudo-random bytes from it;
<function>prng_count</function>
reports the number of bytes extracted from it to date;
<function>prng_final</function>
closes it down.
It is the user's responsibility to initialize a PRNG before using it,
and not to use it again after it is closed down.</para>

<para><emphasis remap='I'>Prng_init</emphasis>
initializes,
or re-initializes,
the specified
<varname role='parameter'>prng</varname>
from the
<varname role='parameter'>key</varname>,
whose length is given by
<varname role='parameter'>keylen</varname>.
The user must allocate the
<emphasis remap='B'>struct prng</emphasis>
pointed to by
<varname role='parameter'>prng</varname>.
There is no particular constraint on the length of the key,
although a key longer than 256 bytes is unnecessary because
only the first 256 would be used.
Initialization requires on the order of 3000 integer operations,
independent of key length.</para>

<para><emphasis remap='I'>Prng_bytes</emphasis>
obtains
<varname role='parameter'>dstlen</varname>
pseudo-random bytes from the PRNG and puts them in
<emphasis remap='I'>buf</emphasis>.
This is quite fast,
on the order of 10 integer operations per byte.</para>

<para><emphasis remap='I'>Prng_count</emphasis>
reports the number of bytes obtained from the PRNG
since it was (last) initialized.</para>

<para><emphasis remap='I'>Prng_final</emphasis>
closes down a PRNG by
zeroing its internal memory,
obliterating all trace of the state used to generate its previous output.
This requires on the order of 250 integer operations.</para>

<para>The
<emphasis remap='B'>&lt;freeswan.h&gt;</emphasis>
header file supplies the definition of the
<varname role='parameter'>prng</varname>
structure.
Examination of its innards is discouraged, as they may change.</para>

<para>The PRNG algorithm
used by these functions is currently identical to that of RC4(TM).
This algorithm is cryptographically strong,
sufficiently unpredictable that even a hostile observer will
have difficulty determining the next byte of output from past history,
provided it is initialized from a reasonably large key composed of
highly random bytes (see
<citerefentry><refentrytitle>random</refentrytitle><manvolnum>4</manvolnum></citerefentry>).
The usual run of software pseudo-random-number generators
(e.g.
<citerefentry><refentrytitle>random</refentrytitle><manvolnum>3</manvolnum></citerefentry>)
are
<emphasis remap='I'>not</emphasis>
cryptographically strong.</para>

<para>The well-known attacks against RC4(TM),
e.g. as found in 802.11b's WEP encryption system,
apply only if multiple PRNGs are initialized with closely-related keys
(e.g., using a counter appended to a base key).
If such keys are used, the first few hundred pseudo-random bytes
from each PRNG should be discarded,
to give the PRNGs a chance to randomize their innards properly.
No useful attacks are known if the key is well randomized to begin with.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>random</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>random</refentrytitle><manvolnum>4</manvolnum></citerefentry>
<!-- .br -->
Bruce Schneier,
<emphasis remap='I'>Applied Cryptography</emphasis>, 2nd ed., 1996, ISBN 0-471-11709-9,
pp. 397-8.</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Written for the FreeS/WAN project by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>If an attempt is made to obtain more than 4e9 bytes
between initializations,
the PRNG will continue to work but
<function>prng_count</function>'s
output will stick at
<literal>4000000000</literal>.
Fixing this would require a longer integer type and does
not seem worth the trouble,
since you should probably re-initialize before then anyway...</para>

<para>&ldquo;RC4&rdquo; is a trademark of RSA Data Security, Inc.</para>
</refsect1>
</refentry>

