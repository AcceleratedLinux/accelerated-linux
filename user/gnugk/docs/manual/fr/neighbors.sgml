<!-- French translation from neighbors.sgml v1.1 -->

<sect>Configuration des Voisins
<p>
<sect1>Section &lsqb;RasSrv::Neighbors&rsqb;
<label id="neighbor">
<p>
Si la destination d'un ARQ est inconnue, le gatekeeper envoie des LRQs &#224; ses
voisins pour demander si ils ont le terminal destination. Un voisin est
s&#233;lectionn&#233; si un de ses pr&#233;fixes correspond &#224; la destination ou
il a le pr&#233;fixe ``<tt/*/''. Plus d'un pr&#233;fixe peut &#234;tre indiqu&#233;.
Vous pouvez utiliser les caract&#232;res sp&#233;ciaux ``<tt/./'' et ``<tt/!/''
comme joker ou pour d&#233;sactiver un pr&#233;fixe donn&#233;.

Inversement, le gatekeeper r&#233;pondra uniquement aux LRQs envoy&#233;s par des
voisins d&#233;finis dans cette section.
Si vous indiquer un pr&#233;fixe vide, aucun LRQ ne sera envoy&#233; &#224; ce voisin,
mais le gatekeeper acceptera les LRQs en provenant. Par pr&#233;fixe vide on entend
un point-virgule ajout&#233; &#224; l'entr&#233;e du voisin. Exemple:<newline>
<newline>
<tt/	GK1=192.168.0.5;/<newline>
<newline>
Si vous omettez le point-virgule, les LRQs seront toujours envoy&#233;s &#224; ce voisin.

Le champ <tt/password/ est utilis&#233; pour authentifier les LRQs de ce voisin.
Se reporter &#224; la section <ref id="gkauth" name="[Gatekeeper::Auth]"> pour de
plus amples d&#233;tails.

La gestion des voisins a chang&#233; de fa&#231;on significative entre la version 2.0
et la version 2.2.
Les voisins peuvent &#234;tre indiqu&#233;s de deux fa&#231;ons - l'ancienne et la
nouvelle.

<descrip>
<tag/Entr&#233;e dans le vieux format:/
<tt>GKID=ip[:port;prefixes;password;dynamic]</tt>
<p>
<tag/Exemple:/
<tt/GK1=192.168.0.5;*/<newline>
<tt/GK2=10.0.1.1:1719;035,036;gk2/<newline>
<tt/GK3=gk.citron.com.tw;;gk3;1/
</descrip>

<descrip>
<tag/Entr&#233;e dans le nouveau format:/
<tt>GKID="GnuGK" | "CiscoGK" | "ClarentGK" | "GlonetGK"</tt>
<p>
<tag/Exemple:/
<tt/[RasSrv::Neighbors]/<newline>
<tt/GK1=CiscoGK/<newline>
<tt/GK2=GnuGK/<newline>
<newline>
<tt/[Neighbor::GK1]/<newline>
<tt/GatekeeperIdentifier=GK1/<newline>
<tt/Host=192.168.1.1/<newline>
<tt/SendPrefixes=02/<newline>
<tt/AcceptPrefixes=*/<newline>
<tt/ForwardLRQ=always/<newline>
<newline>
<tt/[Neighbor::GK2]/<newline>
<tt/GatekeeperIdentifier=GK2/<newline>
<tt/Host=192.168.1.2/<newline>
<tt/SendPrefixes=03,0048/<newline>
<tt/AcceptPrefixes=0049,001/<newline>
<tt/ForwardHopCount=2/<newline>
<tt/ForwardLRQ=depends/<newline>
<newline>
</descrip>

Dans le nouveau format la section <tt/[RasSrv::Neighbors]/ indique uniquement les types
de gatekeeper et la configuration de chaque voisin est plac&#233;e dans une section
s&#233;par&#233;e.


<sect1>Section &lsqb;RasSrv::LRQFeatures&rsqb;
<p>
D&#233;finit certains caract&#233;ristiques de LRQ et LCF.
<itemize>
<item><tt/NeighborTimeout=1/<newline>
Default: <tt/2/
<p>
Pause en secondes pour attendre les r&#233;ponses des voisins.
Si aucune r&#233;ponse de tous les voisins apr&323; cette pause, le gatekeeper
enverra un ARJ au terminal envoyant l'ARQ.

<item><tt/ForwardHopCount=2/<newline>
D&#233;fault: <tt>N/A</tt>
<p>
Si le gatekeeper re&#231;oit un LRQ dont la destination est inconnue, il peut
transmettre ce message &#224; ces voisins.
Quand le gatekeeper re&#231;oit un LRQ et d&#233;cide que le message doit &#234;tre
transmis &#224; un autre gatekeeper, il commence par d&#233;cr&#233;menter le champ
<bf/hopCount/ du LRQ.
Si <bf/hopCount/ atteint 0, le gatekeeper ne transmettra pas le message.
Cette option d&#233;finit le nombre de gatekeeper au travers desquels un LRQ peut se
propager. Il faut noter que ceci n'affecte que l'&#233;metteur du LRQ, pas celui qui
transmet. Ce param&#232;tre peut &#234;tra annul&#233; par la configuration d'un
voisin donn&#233;.

<item><tt/AlwaysForwardLRQ=1/<newline>
D&#233;fault: <tt>0</tt>
<p>
Force le gatekeeper &#224; transmettre un LRQ m&#234;me si il n'y a pas de champ
<bf/hopCount/ dans le LRQ. Pour &#233;viter les boucles de LRQ, vous devriez utiliser
cette option avec prudence. Cette option est utilis&#233;e uniquement pour l'ancien
format (2.0) de configuration de voisins, le nouveau lit le param&#232;tre depuis une
section de configuration sp&#233;cifique au voisin.

<item><tt/AcceptForwardedLRQ=1/<newline>
D&#233;fault: <tt/1/
<p>
Indique si on doit accepter un LRQ transmis depuis les voisins.
Ce param&#232;tre peut &#234;tre annul&#233; par la configuration d'un voisin donn&#233;.

<item><tt/ForwardResponse=0/<newline>
D&#233;fault: <tt/0/
<p>
Si le gatekeeper transmet le message LRQ re&#231;u il peut d&#233;cider soit de
recevoir la r&#233;ponse LCF ou de la laisser voyager jusqu'&#224; l'&#233;metteur
du LRQ. Positionner cette option &#224; 1 si le gatekeeper doit recevoir les messages
LCF pour les LRQs transf&#233;r&#233;s. Ce param&#232;tre peut &#234;tre annul&#233;
par la configuration d'un voisin donn&#233;.

<item><tt/ForwardLRQ=always | never | depends/<newline>
D&#233;fault: <tt/depends/
<p>
Ce param&#232;tre d&#233;cide si le LRQ devrait &#234;tre transmis ou non. <tt/always/
transmet le LRQ &#224; chaque fois, <tt/never/ bloque la transmission de LRQ,
<tt/depends/ indique au gatekeeper de ne transmettre un LRQ seulement si son
hop count est sup&#233;rieur &#224; 1. Ce param&#232;tre peut &#234;tre annul&#233;
par la configuration d'un voisin donn&#233;.
</itemize>

<sect2>Section &lsqb;Neighbor::...&rsqb;
<p>
Les sections commen&#231;ant par <tt/[Neighbor::/ sont pour la configuration d'un
voisin donn&#233;.

<itemize>
<item><tt/GatekeeperIdentifier=GKID/<newline>
D&#233;fault: <tt>N/A</tt>
<p>
Identifiant du gatekeeper pour ce voisin. Si cette option n'est pas indiqu&#233;e
l'identifiant est obtenu avec la deuxi&#232;me partie du nom de la section
<tt/Neighbor::/.

<item><tt/Host=192.168.1.1/<newline>
D&#233;fault: <tt>N/A</tt>
<p>
Une adresse IP pour ce voisin.

<item><tt/Password=secret/<newline>
D&#233;fault: <tt>N/A</tt>
<p>
Un mot de passe &#224; utiliser pour valider les jetons de crypto re&#231;us des LRQs
entrants.
<tt/Ce n'est pas encore impl&#233;ment&#233;/.

<item><tt/Dynamic=0/<newline>
D&#233;fault: <tt>0</tt>
<p>
1 signifie que l'adresse IP de ce voisin peut changer.

<item><tt/SendPrefixes=004,002:=1,001:=2/<newline>
D&#233;fault: <tt>N/A</tt>
<p>
Une liste de pr&#233;fixes pour lesquels le voisin s'attend &#224; recevoir des LRQs.
Si '*' est indiqu&#233;e, les LRQs seront toujours envoy&#233;s &#224; ce voisin.
Une priorit&#233; peut &#234;tre donn&#233;e &#224; chaque pr&#233;fixe de chaque
voisin (en utilisant la syntaxe :=), ainsi dans le cas de plusieurs LCD re&#231;us de
plusieurs voisins, celui avec la priorit&#233; la plus &#233;lev&#233;e sera choisi
pour router l'appel.
On peut aussi indiquer au gatekeeper d'envoyer un LRQ &#224; ce voisin en se basant
sur un type d'alias:<newline>
SendPrefixes=h323_ID,dialedDigits,001<newline>

<item><tt/AcceptPrefixes=*/<newline>
D&#233;fault: <tt>*</tt>
<p>
Une liste de pr&#233;fixes que le gatekeeper acceptera dans les LRQs re&#231;s de ce
voisin. Si '*' est indiqu&#233, tous les LRQs seront accept&#233;s de ce voisin.
On peut aussi indiquer au gatekeeper d'accepter un LRQ de ce voisin en se basant sur
un type d'alias:<newline>
AcceptPrefixes=dialedDigits<newline>

<item><tt/ForwardHopCount=2/<newline>
D&#233;fault: <tt>N/A</tt>
<p>
Si le gatekeeper re&#231;oit un LRQ dont la destination est inconnue, il peut
transmettre ce message &#224; ces voisins.
Quand le gatekeeper re&#231;oit un LRQ et d&#233;cide que le message doit &#234;tre
transmis &#224; un autre gatekeeper, il commence par d&#233;cr&#233;menter le champ
<bf/hopCount/ du LRQ.
Si <bf/hopCount/ atteint 0, le gatekeeper ne transmettra pas le message.
Cette option d&#233;finit le nombre de gatekeeper au travers desquels un LRQ peut se
propager. Il faut noter que ceci n'affecte que l'&#233;metteur du LRQ, pas celui qui
transmet.

<item><tt/AcceptForwardedLRQ=1/<newline>
D&#233;fault: <tt/1/
<p>
Indique si on accepte un LRQ transmis par ce voisin.

<item><tt/ForwardResponse=0/<newline>
D&#233;fault: <tt/0/
<p>
Si le gatekeeper transmet le message LRQ re&#231;u il peut d&#233;cider soit de
recevoir la r&#233;ponse LCF ou de la laisser voyager jusqu'&#224; l'&#233;metteur
du LRQ. Positionner cette option &#224; 1 si le gatekeeper doit recevoir les messages
LCF pour les LRQs transf&#233;r&#233;s.

<item><tt/ForwardLRQ=always | never | depends/<newline>
D&#233;fault: <tt/depends/
<p>
Ce param&#232;tre d&#233;cide si le LRQ devrait &#234;tre transmis ou non. <tt/always/
transmet le LRQ &#224; chaque fois, <tt/never/ bloque la transmission de LRQ,
<tt/depends/ indique au gatekeeper de ne transmettre un LRQ seulement si son
hop count est sup&#233;rieur &#224; 1.

</itemize>
