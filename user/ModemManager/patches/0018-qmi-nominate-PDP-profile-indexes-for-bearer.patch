From: Samuel Brian <samuel.brian@digi.com>
Date: Mon, 18 Feb 2019 09:50:29 +1000
Subject: qmi: nominate PDP profile indexes for bearer

Previously, ModemManager did not specify the "profile index" for each bearer
it tried to connect on the same modem. The profile index corresponds to the
entry in the AT+CGDCONT? list that the QMI commands would affect.

This meant that (in a dual APN setup) the bearers would all try to use the
"default profile number" (3 on Verizon firmware, 1 on others) which, in some
scenarios (locked to 4G?), would trigger disconnections.
E.g. Bearer 1 connects, Bearer 2 connects causing Bearer 1 to disconnect,
Bearer 1 reconnects causing Bearer 2 to disconnect, and so on.

Now, the user can nominate a profile index when creating the bearer e.g.
  mmcli ... --create-bearer='apn=vzwinternet,number=3'
and if not specified, the bearer finds the default profile number and uses
the chosen data port to offset it. E.g.:
  default profile number = 1
  wwan0 profile index = 1
  wwan1 profile index = 2
---
 src/mm-bearer-qmi.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/src/mm-bearer-qmi.c b/src/mm-bearer-qmi.c
index 88c778f2..ac19e15d 100644
--- a/src/mm-bearer-qmi.c
+++ b/src/mm-bearer-qmi.c
@@ -426,6 +426,7 @@ typedef struct {
     MMBearerQmi *self;
     ConnectStep step;
     MMPort *data;
+    guint data_profile_index;
     MMPortQmi *qmi;
     gboolean explicit_qmi_open;
     gchar *user;
@@ -688,6 +689,14 @@ build_start_network_input (ConnectContext *ctx)
             NULL);
     }
 
+    if (ctx->data_profile_index) {
+        mm_obj_dbg (ctx->data,
+            "using 3GPP profile index %d for APN %s",
+            ctx->data_profile_index,
+            ctx->apn);
+        qmi_message_wds_start_network_input_set_profile_index_3gpp (input, ctx->data_profile_index, NULL);
+    }
+
     return input;
 }
 
@@ -1671,6 +1680,7 @@ _connect (MMBaseBearer *_self,
     MMPortQmi *qmi = NULL;
     GError *error = NULL;
     const gchar *apn;
+    const gchar *number;
     GTask *task;
     GCancellable *operation_cancellable = NULL;
 
@@ -1745,6 +1755,13 @@ _connect (MMBaseBearer *_self,
     ctx->step = CONNECT_STEP_FIRST;
     ctx->ip_method = MM_BEARER_IP_METHOD_UNKNOWN;
 
+    number = mm_bearer_properties_get_number (mm_base_bearer_peek_config (MM_BASE_BEARER (self)));
+    if (number && *number) {
+        ctx->data_profile_index = g_ascii_strtoull (number, NULL, 10);
+        if (ctx->data_profile_index > 16)
+            ctx->data_profile_index = 0;
+    }
+
     g_object_get (self,
                   MM_BASE_BEARER_CONFIG, &properties,
                   NULL);
