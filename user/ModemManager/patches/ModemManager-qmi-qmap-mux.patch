Support QMAP muxed data traffic on QMI modems.

This relies on the modem being registered by the system according to the
following:

  1. Muxed data ports must be named using a VLAN convention (e.g. wwan0.1,
     wwan0.2, ...) because the mux id gets parsed out of the name.
  2. Set ID_MM_PORT_IGNORE="1" on the master data port.
  3. The QMI port must be tagged ID_MM_PORT_QMI_QMAP="1" using udev.
     To nominate the USB endpoint of the data port that the QMI port
     corresponds to, set ID_MM_PORT_QMI_QMAP_DATA_EP using udev.
     Considering the data port (wwan) and control port (cdc-wdm) are (always?)
     on the same USB interface, ID_MM_PORT_QMI_QMAP_DATA_EP="%E{.MM_USBIFNUM}"
     is sufficient.

--- ModemManager/src/mm-port-qmi.c	2019-03-01 13:27:53.390425638 +1000
+++ ModemManager/src/mm-port-qmi.c	2019-03-01 14:01:01.615471442 +1000
@@ -192,6 +192,7 @@
     PORT_OPEN_STEP_OPEN_WITHOUT_DATA_FORMAT,
     PORT_OPEN_STEP_GET_KERNEL_DATA_FORMAT,
     PORT_OPEN_STEP_ALLOCATE_WDA_CLIENT,
+    PORT_OPEN_STEP_SET_QMAP_PROTOCOL,
     PORT_OPEN_STEP_GET_WDA_DATA_FORMAT,
     PORT_OPEN_STEP_CHECK_DATA_FORMAT,
     PORT_OPEN_STEP_SET_KERNEL_DATA_FORMAT,
@@ -277,6 +278,32 @@
 }
 
 static void
+set_data_format_ready (QmiClientWda *client,
+                       GAsyncResult *res,
+                       GTask *task)
+{
+    PortOpenContext *ctx;
+    QmiMessageWdaSetDataFormatOutput *output;
+    GError *error = NULL;
+    /* TODO: Check protocol in response message ?
+     * QmiWdaDataAggregationProtocol data_aggregation_protocol;
+     */
+
+    ctx = g_task_get_task_data (task);
+    output = qmi_client_wda_set_data_format_finish (client, res, &error);
+    if (!output || !qmi_message_wda_set_data_format_output_get_result (output, &error)) {
+        mm_err ("Failed to set data format: %s\n", error->message);
+        g_error_free (error);
+    }
+
+    if (output)
+        qmi_message_wda_set_data_format_output_unref (output);
+
+    ctx->step++;
+    port_open_step (task);
+}
+
+static void
 allocate_client_wda_ready (QmiDevice *device,
                            GAsyncResult *res,
                            GTask *task)
@@ -436,6 +463,46 @@
                                     task);
         return;
 
+    case PORT_OPEN_STEP_SET_QMAP_PROTOCOL: {
+        MMKernelDevice *kernel_device;
+
+        kernel_device = mm_port_peek_kernel_device (MM_PORT (self));
+        if (mm_kernel_device_get_property_as_boolean (kernel_device, "ID_MM_PORT_QMI_QMAP")) {
+            QmiMessageWdaSetDataFormatInput *input;
+            guint32 ep_iface_num;
+
+            if (mm_kernel_device_has_property (kernel_device, "ID_MM_PORT_QMI_QMAP_DATA_EP")) {
+                /* A udev rule has identified which USB interface number the corresponding
+                 * data port is on */
+                ep_iface_num = mm_kernel_device_get_property_as_int_hex (kernel_device,
+                                                                        "ID_MM_PORT_QMI_QMAP_DATA_EP");
+            } else {
+                /* Fallback. This seems to work a lot anyway. */
+                ep_iface_num = 0;
+            }
+
+            input = qmi_message_wda_set_data_format_input_new ();
+            qmi_message_wda_set_data_format_input_set_link_layer_protocol (input, QMI_WDA_LINK_LAYER_PROTOCOL_RAW_IP, NULL);
+            qmi_message_wda_set_data_format_input_set_uplink_data_aggregation_protocol (input, QMI_WDA_DATA_AGGREGATION_PROTOCOL_QMAP, NULL);
+            qmi_message_wda_set_data_format_input_set_downlink_data_aggregation_protocol (input, QMI_WDA_DATA_AGGREGATION_PROTOCOL_QMAP, NULL);
+            qmi_message_wda_set_data_format_input_set_endpoint_info (input, QMI_DATA_ENDPOINT_TYPE_HSUSB, ep_iface_num, NULL);
+            /* Set these to some large numbers. The modem will clamp them to what it can handle */
+            qmi_message_wda_set_data_format_input_set_downlink_data_aggregation_max_size (input, 32768, NULL);
+            qmi_message_wda_set_data_format_input_set_downlink_data_aggregation_max_datagrams (input, 32, NULL);
+
+            mm_dbg ("Setting data port on USB interface number %d to use QMAP protocol...", ep_iface_num);
+            qmi_client_wda_set_data_format (QMI_CLIENT_WDA (ctx->wda),
+                                            input,
+                                            10,
+                                            g_task_get_cancellable (task),
+                                            (GAsyncReadyCallback)set_data_format_ready,
+                                            task);
+            qmi_message_wda_set_data_format_input_unref (input);
+            return;
+        }
+        ctx->step++;
+    }
+
     case PORT_OPEN_STEP_GET_WDA_DATA_FORMAT:
         /* If we have WDA client, query current data format */
         g_assert (ctx->wda);
--- ModemManager/src/mm-bearer-qmi.c	2019-03-01 13:27:53.478426520 +1000
+++ ModemManager/src/mm-bearer-qmi.c	2019-03-01 14:04:08.056701220 +1000
@@ -396,12 +396,14 @@
     CONNECT_STEP_IP_METHOD,
     CONNECT_STEP_IPV4,
     CONNECT_STEP_WDS_CLIENT_IPV4,
+    CONNECT_STEP_BIND_MUX_IPV4,
     CONNECT_STEP_IP_FAMILY_IPV4,
     CONNECT_STEP_ENABLE_INDICATIONS_IPV4,
     CONNECT_STEP_START_NETWORK_IPV4,
     CONNECT_STEP_GET_CURRENT_SETTINGS_IPV4,
     CONNECT_STEP_IPV6,
     CONNECT_STEP_WDS_CLIENT_IPV6,
+    CONNECT_STEP_BIND_MUX_IPV6,
     CONNECT_STEP_IP_FAMILY_IPV6,
     CONNECT_STEP_ENABLE_INDICATIONS_IPV6,
     CONNECT_STEP_START_NETWORK_IPV6,
@@ -415,6 +417,8 @@
     MMPort *data;
     guint data_profile_index;
     MMPortQmi *qmi;
+    guint32 mux_id;
+    guint32 data_ep_iface_num;
     gchar *user;
     gchar *password;
     gchar *apn;
@@ -949,6 +953,32 @@
 }
 
 static void
+bind_mux_data_port_ready (QmiClientWds *client,
+                          GAsyncResult *res,
+                          GTask *task)
+{
+    ConnectContext *ctx;
+    GError *error = NULL;
+    QmiMessageWdsBindMuxDataPortOutput *output;
+
+    ctx = g_task_get_task_data (task);
+
+    output = qmi_client_wds_bind_mux_data_port_finish (client, res, &error);
+    if (!output || !qmi_message_wds_bind_mux_data_port_output_get_result (output, &error)) {
+        mm_err ("Failed to bind mux data port: %s\n", error->message);
+        g_error_free (error);
+    }
+
+    if (output)
+        qmi_message_wds_bind_mux_data_port_output_unref (output);
+
+    /* Keep on */
+    ctx->step++;
+    connect_context_step (task);
+}
+
+
+static void
 set_ip_family_ready (QmiClientWds *client,
                      GAsyncResult *res,
                      GTask *task)
@@ -1225,11 +1255,11 @@
     if (ctx->running_ipv4)
         ctx->client_ipv4 = QMI_CLIENT_WDS (mm_port_qmi_get_client (qmi,
                                                                    QMI_SERVICE_WDS,
-                                                                   MM_PORT_QMI_FLAG_WDS_IPV4));
+                                                                   MM_PORT_QMI_FLAG_WDS_IPV4 + ctx->mux_id));
     else
         ctx->client_ipv6 = QMI_CLIENT_WDS (mm_port_qmi_get_client (qmi,
                                                                    QMI_SERVICE_WDS,
-                                                                   MM_PORT_QMI_FLAG_WDS_IPV6));
+                                                                   MM_PORT_QMI_FLAG_WDS_IPV6 + ctx->mux_id));
 
     /* Keep on */
     ctx->step++;
@@ -1256,6 +1286,18 @@
     connect_context_step (task);
 }
 
+static guint32
+get_mux_id(MMPort *data)
+{
+    const char *name;
+    guint64 v = G_MAXUINT64;
+
+    name = mm_port_get_device (data);
+    if (name && (name = strchr (name, '.')) && name[1])
+        v = g_ascii_strtoull (name + 1, NULL, 10);
+    return v < G_MAXUINT32 ? v : 0;
+}
+
 static void
 connect_context_step (GTask *task)
 {
@@ -1329,12 +1371,12 @@
 
         client = mm_port_qmi_get_client (ctx->qmi,
                                          QMI_SERVICE_WDS,
-                                         MM_PORT_QMI_FLAG_WDS_IPV4);
+                                         MM_PORT_QMI_FLAG_WDS_IPV4 + ctx->mux_id);
         if (!client) {
             mm_dbg ("Allocating IPv4-specific WDS client");
             mm_port_qmi_allocate_client (ctx->qmi,
                                          QMI_SERVICE_WDS,
-                                         MM_PORT_QMI_FLAG_WDS_IPV4,
+                                         MM_PORT_QMI_FLAG_WDS_IPV4 + ctx->mux_id,
                                          cancellable,
                                          (GAsyncReadyCallback)qmi_port_allocate_client_ready,
                                          task);
@@ -1346,6 +1388,30 @@
         ctx->step++;
     }
 
+    case CONNECT_STEP_BIND_MUX_IPV4:
+        /* Associate the QMAP-muxed data port with the allocated WDS client. */
+        if (ctx->mux_id) {
+            QmiMessageWdsBindMuxDataPortInput *input;
+
+            mm_dbg ("Binding IPv4 WDS client to mux id %d on data port on USB interface number %d", ctx->mux_id, ctx->data_ep_iface_num);
+            input = qmi_message_wds_bind_mux_data_port_input_new ();
+            qmi_message_wds_bind_mux_data_port_input_set_endpoint_info (input, QMI_DATA_ENDPOINT_TYPE_HSUSB, ctx->data_ep_iface_num, NULL);
+            qmi_message_wds_bind_mux_data_port_input_set_mux_id (input, ctx->mux_id, NULL);
+            qmi_message_wds_bind_mux_data_port_input_set_client_type (input, QMI_WDS_CLIENT_TYPE_TETHERED, NULL);
+
+            qmi_client_wds_bind_mux_data_port (ctx->client_ipv4,
+                                               input,
+                                               10,
+                                               cancellable,
+                                               (GAsyncReadyCallback) bind_mux_data_port_ready,
+                                               task);
+            qmi_message_wds_bind_mux_data_port_input_unref (input);
+            return;
+        }
+
+        /* Just fall down */
+        ctx->step++;
+
     case CONNECT_STEP_IP_FAMILY_IPV4:
         /* If client is new enough, select IP family */
         if (!ctx->no_ip_family_preference &&
@@ -1428,12 +1494,12 @@
 
         client = mm_port_qmi_get_client (ctx->qmi,
                                          QMI_SERVICE_WDS,
-                                         MM_PORT_QMI_FLAG_WDS_IPV6);
+                                         MM_PORT_QMI_FLAG_WDS_IPV6 + ctx->mux_id);
         if (!client) {
             mm_dbg ("Allocating IPv6-specific WDS client");
             mm_port_qmi_allocate_client (ctx->qmi,
                                          QMI_SERVICE_WDS,
-                                         MM_PORT_QMI_FLAG_WDS_IPV6,
+                                         MM_PORT_QMI_FLAG_WDS_IPV6 + ctx->mux_id,
                                          cancellable,
                                          (GAsyncReadyCallback)qmi_port_allocate_client_ready,
                                          task);
@@ -1445,6 +1511,30 @@
         ctx->step++;
     }
 
+    case CONNECT_STEP_BIND_MUX_IPV6:
+        /* Associate the QMAP-muxed data port with the allocated WDS client. */
+        if (ctx->mux_id) {
+            QmiMessageWdsBindMuxDataPortInput *input;
+
+            mm_dbg ("Binding IPv6 WDS client to mux id %d on data port on USB interface number %d", ctx->mux_id, ctx->data_ep_iface_num);
+            input = qmi_message_wds_bind_mux_data_port_input_new ();
+            qmi_message_wds_bind_mux_data_port_input_set_endpoint_info (input, QMI_DATA_ENDPOINT_TYPE_HSUSB, ctx->data_ep_iface_num, NULL);
+            qmi_message_wds_bind_mux_data_port_input_set_mux_id (input, ctx->mux_id, NULL);
+            qmi_message_wds_bind_mux_data_port_input_set_client_type (input, QMI_WDS_CLIENT_TYPE_TETHERED, NULL);
+
+            qmi_client_wds_bind_mux_data_port (ctx->client_ipv6,
+                                               input,
+                                               10,
+                                               cancellable,
+                                               (GAsyncReadyCallback) bind_mux_data_port_ready,
+                                               task);
+            qmi_message_wds_bind_mux_data_port_input_unref (input);
+            return;
+        }
+
+        /* Just fall down */
+        ctx->step++;
+
     case CONNECT_STEP_IP_FAMILY_IPV6:
 
         g_assert (ctx->no_ip_family_preference == FALSE);
@@ -1669,6 +1759,19 @@
             ctx->data_profile_index = 0;
     }
 
+    ctx->mux_id = get_mux_id (data);
+    if (ctx->mux_id) {
+        MMKernelDevice *kernel_device;
+        /* Find the QMAP data endpoint using the same method as in mm-port-qmi.c */
+        kernel_device = mm_port_peek_kernel_device (MM_PORT (qmi));
+        if (mm_kernel_device_has_property (kernel_device, "ID_MM_PORT_QMI_QMAP_DATA_EP")) {
+            ctx->data_ep_iface_num = mm_kernel_device_get_property_as_int_hex (kernel_device,
+                                                          "ID_MM_PORT_QMI_QMAP_DATA_EP");
+        } else {
+            ctx->data_ep_iface_num = 0;
+        }
+    }
+
     g_object_get (self,
                   MM_BASE_BEARER_CONFIG, &properties,
                   NULL);
@@ -1921,6 +2024,7 @@
                                                                            ctx->client_ipv4,
                                                                            FALSE,
                                                                            &self->priv->packet_service_status_ipv4_indication_id);
+            if (self->priv->event_report_ipv4_indication_id)
             cleanup_event_report_unsolicited_events (self,
                                                      ctx->client_ipv4,
                                                      &self->priv->event_report_ipv4_indication_id);
@@ -1950,6 +2054,7 @@
                                                                            ctx->client_ipv6,
                                                                            FALSE,
                                                                            &self->priv->packet_service_status_ipv6_indication_id);
+            if (self->priv->event_report_ipv6_indication_id)
             cleanup_event_report_unsolicited_events (self,
                                                      ctx->client_ipv6,
                                                      &self->priv->event_report_ipv6_indication_id);
