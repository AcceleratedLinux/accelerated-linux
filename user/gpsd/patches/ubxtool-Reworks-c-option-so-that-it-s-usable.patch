From 5c03d3ce2e68bea96abede4378cc0c3a930ca28c Mon Sep 17 00:00:00 2001
From: whagstro <walter.hagstrom@digi.com>
Date: Wed, 5 Jan 2022 13:24:39 -0500
Subject: [PATCH] ubxtool: Reworks -c option so that it's usable.

It appears that the -c code was more or less inherited from zerk and
essentially useless for the UBX message format.  This reworks it so
that the argument is a comma-separated list of hex bytes giving the
class, ID, and any payload.  The header, length, and checksum are
added automatically, making it reasonably convenient to specify
arbitrary commands.  The only limitation is the need to specify
multibyte quantities as individual bytes.

derived from: e2d066957943218cd95406d211bf6360a8f5a3a7
---
 ubxtool | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/ubxtool b/ubxtool
index ba3aa590e..8ea783163 100755
--- a/ubxtool
+++ b/ubxtool
@@ -29,7 +29,9 @@ usage: ubxtool [OPTIONS] [server[:port[:device]]]
 from __future__ import absolute_import, print_function, division
 
 import binascii      # for binascii.hexlify()
+from functools import reduce
 import getopt        # for getopt.getopt(), to parse CLI options
+import operator      # for or_
 import os            # for os.environ
 import socket        # for socket.error
 import stat          # for stat.S_ISBLK()
@@ -2352,13 +2354,22 @@ try:
         gps_model.send_set_speed(opts['set_speed'])
 
     elif opts['command'] is not None:
-        # zero length is OK to send
-        # add trailing new line
-        opts['command'] += "\n"
-
+        cmd_list = opts['command'].split(',')
+        try:
+            cmd_data = [int(x, 16) for x in cmd_list]
+        except ValueError:
+            badarg = True
+        else:
+            data_or = reduce(operator.or_, cmd_data)
+            badarg = data_or != data_or & 0xFF
+        if badarg or len(cmd_list) < 2:
+            sys.stderr.write('%s: Argument format (hex bytes) is'
+                             ' class,id[,payload...]\n' % PROG_NAME)
+            sys.exit(1)
+        payload = bytearray(cmd_data[2:])
         if VERB_QUIET < opts['verbosity']:
             sys.stderr.write('%s: command %s\n' % (PROG_NAME, opts['command']))
-        gps_model.gps_send_raw(opts['command'])
+        gps_model.gps_send(cmd_data[0], cmd_data[1], payload)
 
     exit_code = io_handle.read(opts)
 
-- 
2.30.2

