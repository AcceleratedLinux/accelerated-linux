Add ash command to setuid of the *current* process.
Can be used by root to change to less privileged user.

--- busybox.orig/shell/ash.c	2019-12-05 16:26:50.764785897 +1000
+++ busybox/shell/ash.c	2019-12-05 11:40:06.396372408 +1000
@@ -10093,6 +10093,9 @@
 static int umaskcmd(int, char **) FAST_FUNC;
 static int unsetcmd(int, char **) FAST_FUNC;
 static int ulimitcmd(int, char **) FAST_FUNC;
+static int setuidcmd(int, char **) FAST_FUNC;
+static int setgidcmd(int, char **) FAST_FUNC;
+static int setgroupscmd(int, char **) FAST_FUNC;
 
 #define BUILTIN_NOSPEC          "0"
 #define BUILTIN_SPECIAL         "1"
@@ -10174,6 +10177,9 @@
 	{ BUILTIN_SPEC_REG_ASSG "readonly", exportcmd  },
 	{ BUILTIN_SPEC_REG      "return"  , returncmd  },
 	{ BUILTIN_SPEC_REG      "set"     , setcmd     },
+	{ BUILTIN_SPEC_REG      "setgid"  , setgidcmd  },
+	{ BUILTIN_SPEC_REG      "setgroups", setgroupscmd },
+	{ BUILTIN_SPEC_REG      "setuid"  , setuidcmd  },
 	{ BUILTIN_SPEC_REG      "shift"   , shiftcmd   },
 	{ BUILTIN_REGULAR       "socketpair", socketpaircmd },
 #if BASH_SOURCE
@@ -14297,6 +14303,88 @@
 	return shell_builtin_ulimit(argv);
 }
 
+static int FAST_FUNC
+setuidcmd(int argc UNUSED_PARAM, char **argv)
+{
+	int status;
+	struct passwd *pwd;
+
+	argv++;
+	if (*argv == NULL) {
+		ash_msg("username expected");
+		return 1;
+	}
+
+	pwd = getpwnam(*argv);
+	if (pwd == NULL) {
+		ash_msg("user '%s' not found", *argv);
+		return 1;
+	}
+
+	status = setuid(pwd->pw_uid);
+	if (status != 0) {
+		ash_msg("setuid failed: %m");
+		return 1;
+	}
+	return 0;
+}
+
+static int FAST_FUNC
+setgidcmd(int argc UNUSED_PARAM, char **argv)
+{
+	int status;
+	struct group *grp;
+
+	argv++;
+	if (*argv == NULL) {
+		ash_msg("group expected");
+		return 1;
+	}
+
+	grp = getgrnam(*argv);
+	if (grp == NULL) {
+		ash_msg("group '%s' not found", *argv);
+		return 1;
+	}
+
+	status = setgid(grp->gr_gid);
+	if (status != 0) {
+		ash_msg("setgid failed: %m");
+		return 1;
+	}
+	return 0;
+}
+
+static int FAST_FUNC
+setgroupscmd(int argc, char **argv)
+{
+	int status, i, gi;
+	struct group *group;
+	gid_t *groups;
+
+	argv++;
+	argc--;
+	groups = ckmalloc(argc * sizeof(*groups));
+
+	for (i = 0, gi = 0; i < argc; i++) {
+		group = getgrnam(argv[i]);
+		if (group != NULL) {
+			groups[gi++] = group->gr_gid;
+		} else if ((groups[gi] = strtoul(argv[i], NULL, 10)) != 0) {
+			gi++;
+		} else {
+			ash_msg("group '%s' not found", argv[i]);
+		}
+	}
+
+	status = setgroups(gi, groups);
+	if (status == -1) {
+		ash_msg("setgroups failed: %m");
+		return 1;
+	}
+	return 0;
+}
+
 /* ============ main() and helpers */
 
 /*
