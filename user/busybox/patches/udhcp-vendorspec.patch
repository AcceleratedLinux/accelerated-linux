Author: David Leonard <david.leonard@opengear.com>
Date:   Wed Jan 21 15:00:02 2015 +1000

    OG-762 add vendorspec option (43) handling to udhcpc
    
    Decode option 43 (vendorspec) and pass suboptions (strings) to the
    script as envvars ${vendorspec_1} etc.

Author: David Leonard <david.leonard@opengear.com>
Date:   Mon Jul 25 15:36:45 2016 +1000

    OG-1141 udhcpc: fix off-by-one
    
    fixes bug where $vendorspec_2 was sometimes empty
Author: Greg Ungerer <greg.ungerer@digi.com>
Date:   Thu 07 Oct 2021 00:45:51 AEST

    udhcpc: rework for new busybox version

    An import of busybox-1.34.1 meant a reworking of this support was
    required. Behavior is identical, except now the environmeht also
    contains an "opt43=" string as well (meaning we are more compatible
    with the original busybox/udhcpc behavior).

diff -Naur busybox-1.36.1/networking/udhcp/common.c busybox-1.36.1.new/networking/udhcp/common.c
--- busybox-1.36.1/networking/udhcp/common.c	2021-01-01 20:52:27.000000000 +1000
+++ busybox-1.36.1.new/networking/udhcp/common.c	2021-10-07 00:20:12.778021518 +1000
@@ -45,6 +45,7 @@
 	{ OPTION_STRING_HOST                      , 0x28 }, /* DHCP_NIS_DOMAIN    */
 	{ OPTION_IP | OPTION_LIST                 , 0x29 }, /* DHCP_NIS_SERVER    */
 	{ OPTION_IP | OPTION_LIST     | OPTION_REQ, 0x2a }, /* DHCP_NTP_SERVER    */
+	{ OPTION_TLV| OPTION_LIST                 , 0x2b }, /* DHCP_VENDOR_SPEC   */
 	{ OPTION_IP | OPTION_LIST                 , 0x2c }, /* DHCP_WINS_SERVER   */
 	{ OPTION_U32                              , 0x33 }, /* DHCP_LEASE_TIME    */
 	{ OPTION_IP                               , 0x36 }, /* DHCP_SERVER_ID     */
@@ -116,6 +117,7 @@
 	"nisdomain" "\0"        /* DHCP_NIS_DOMAIN      */
 	"nissrv" "\0"           /* DHCP_NIS_SERVER      */
 	"ntpsrv" "\0"           /* DHCP_NTP_SERVER      */
+	"vendorspec" "\0"       /* DHCP_VENDOR_SPEC     */
 	"wins" "\0"             /* DHCP_WINS_SERVER     */
 	"lease" "\0"            /* DHCP_LEASE_TIME      */
 	"serverid" "\0"         /* DHCP_SERVER_ID       */
@@ -562,6 +564,7 @@
 	struct option_set **opt_list = arg;
 	char *opt;
 	char *str;
+	char *endptr;
 	const struct dhcp_optflag *optflag;
 	struct dhcp_optflag userdef_optflag;
 	unsigned optcode;
@@ -620,6 +623,17 @@
 			if (retval)
 				retval = udhcp_str2nip(val, buffer + 4);
 			break;
+		case OPTION_TLV:
+			buffer[0] = bb_strtou(val, &endptr, 0);
+			retval = (endptr[0] == ':'); /* <tag>:<value> */
+			if (retval) {
+				length = strlen(endptr + 1);
+				if (length > 253) length = 253;
+				buffer[1] = length;
+				memcpy(buffer + 2, endptr + 1, length);
+				length += 2;
+			}
+			break;
  case_OPTION_STRING:
 		case OPTION_STRING:
 		case OPTION_STRING_HOST:
diff -Naur busybox-1.36.1/networking/udhcp/common.h busybox-1.36.1.new/networking/udhcp/common.h
--- busybox-1.36.1/networking/udhcp/common.h	2021-01-01 20:52:27.000000000 +1000
+++ busybox-1.36.1.new/networking/udhcp/common.h	2021-09-28 15:58:00.876875649 +1000
@@ -94,6 +94,7 @@
 enum {
 	OPTION_IP = 0,
 	OPTION_IP_PAIR,
+	OPTION_TLV,     /* tag-length-value sub options */
 	OPTION_STRING,
 	/* Opts of STRING_HOST type will be sanitized before they are passed
 	 * to udhcpc script's environment: */
@@ -154,6 +155,7 @@
 //#define DHCP_NIS_DOMAIN       0x28
 //#define DHCP_NIS_SERVER       0x29
 //#define DHCP_NTP_SERVER       0x2a
+#define DHCP_VENDOR_SPEC        0x2b
 //#define DHCP_WINS_SERVER      0x2c
 #define DHCP_REQUESTED_IP       0x32 /* 50: sent by client if specific IP is wanted */
 #define DHCP_LEASE_TIME         0x33 /* 51: 32bit big-endian */
diff -Naur busybox-1.36.1/networking/udhcp/dhcpc.c busybox-1.36.1.new/networking/udhcp/dhcpc.c
--- busybox-1.36.1/networking/udhcp/dhcpc.c	2021-01-01 20:52:27.000000000 +1000
+++ busybox-1.36.1.new/networking/udhcp/dhcpc.c	2021-10-07 00:42:25.243275599 +1000
@@ -126,6 +126,7 @@
 	[OPTION_IP_PAIR         ] = sizeof("255.255.255.255 ") * 2,
 	[OPTION_STATIC_ROUTES   ] = sizeof("255.255.255.255/32 255.255.255.255 "),
 	[OPTION_6RD             ] = sizeof("132 128 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff 255.255.255.255 "),
+	[OPTION_TLV             ] = 1,
 	[OPTION_STRING          ] = 1,
 	[OPTION_STRING_HOST     ] = 1,
 #if ENABLE_FEATURE_UDHCP_RFC3397
@@ -474,6 +475,43 @@
 	return NULL;
 }
 
+/* Allocate and fill multiple envvars with the sub-values of an options */
+static void tlv_putenv(uint8_t *option, const char *opt_name)
+{
+	uint8_t *optend = option + option[OPT_LEN - 2];
+	uint8_t *p;
+
+	for (p = option; p < optend; ) {
+		uint8_t code = p[OPT_CODE];
+		uint8_t len = p[OPT_LEN];
+		uint8_t *data = p + OPT_DATA;
+		char *new_opt;
+		int ofs;
+
+		if (code == 0) {
+       			p++;
+			continue;
+		}
+		if (code == 255)
+			break;
+		if (data + len > optend) {
+			uint8_t maxlen = optend - data;
+			bb_perror_msg("overlong TLV %s.%u (%u > %u), ignoring",
+				opt_name, code, len, maxlen);
+			break;
+		}
+
+		new_opt = xmalloc(strlen(opt_name) + 6 + len);
+		ofs = sprintf(new_opt, "%s_%d=", opt_name, code);
+		memcpy(new_opt + ofs, data, len);
+		new_opt[ofs + len] = 0;
+
+		putenvp(new_opt);
+
+		p += OPT_DATA + len;
+	}
+}
+
 /* put all the parameters into the environment */
 static void fill_envp(struct dhcp_packet *packet)
 {
@@ -503,6 +541,12 @@
 		opt_item = concat_option(data, len, code);
 		opt_name = get_optname(code, &dh);
 		if (opt_name) {
+			if ((dh->flags & OPTION_TYPE_MASK) == OPTION_TLV) {
+				optptr = udhcp_get_option(packet, code);
+				tlv_putenv(optptr, opt_name);
+				goto noname;
+			}
+
 			new_opt = xmalloc_optname_optval(opt_item, dh, opt_name);
 			if (opt_item->code == DHCP_SUBNET && opt_item->len == 4) {
 				/* Generate extra envvar for DHCP_SUBNET, $mask */
@@ -512,6 +556,7 @@
 			}
 		} else {
 			unsigned ofs;
+noname:
 			new_opt = xmalloc(sizeof("optNNN=") + 1 + opt_item->len*2);
 			ofs = sprintf(new_opt, "opt%u=", opt_item->code);
 			bin2hex(new_opt + ofs, (char *)opt_item->data, opt_item->len)[0] = '\0';
