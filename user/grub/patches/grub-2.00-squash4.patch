--- grub-2.00/grub-core/fs/squash4.c.org	2015-10-01 15:45:30.522816983 +1000
+++ grub-2.00/grub-core/fs/squash4.c	2015-10-01 15:48:43.762820108 +1000
@@ -216,6 +216,129 @@
   } stack[1];
 };
 
+#define CACHE_BUF_LEN 4096
+#define CACHE_SIZE 4
+
+struct grub_cache
+{
+  grub_uint64_t addr;
+  grub_off_t off;
+  grub_size_t len;
+  char *buf;
+};
+
+static void *alloc_cache(void)
+{
+  struct grub_cache *cache;
+  int i, siz;
+
+  siz = sizeof(struct grub_cache) * CACHE_SIZE;
+  cache = grub_malloc(siz);
+  if (cache)
+    {
+      memset(cache, 0, siz);
+      cache[0].buf = grub_malloc(CACHE_BUF_LEN * CACHE_SIZE);
+      if (cache[0].buf)
+	{
+	  for (i = 1; i < CACHE_SIZE; i++)
+	    cache[i].buf = cache[0].buf + (i * CACHE_BUF_LEN);
+	} else {
+	   grub_free(cache);
+	   cache = NULL;
+	}
+    }
+
+  return cache;
+}
+
+static int
+find_cache (struct grub_cache *cache, grub_uint64_t addr, grub_off_t off,
+	    grub_size_t len)
+{
+  struct grub_cache *ce;
+  int i;
+
+  if (!cache)
+    return -1;
+  if (len > CACHE_BUF_LEN)
+    return -1;
+
+  for (i = 0; i < CACHE_SIZE; i++)
+    {
+      ce = &cache[i];
+      if (addr == ce->addr)
+	{
+	  if ((off >= ce->off) && ((off + len) < (ce->off + ce->len)))
+	    return i;
+	}
+    }
+
+  return -1;
+}
+
+static grub_ssize_t
+data_decompress (struct grub_squash_data *data, grub_uint64_t addr,
+		 grub_size_t insize, grub_off_t off,
+		 char *outbuf, grub_size_t len)
+{
+  static struct grub_cache *cache = NULL;
+  static int cnxt = 0;
+  grub_ssize_t rc;
+  grub_err_t err;
+  char *block;
+  int i;
+
+  if (!cache)
+    cache = alloc_cache();
+
+  i = find_cache(cache, addr, off, len);
+  if (i >= 0)
+    {
+      /* Cache hit, copy cached data and return */
+      memcpy(outbuf, cache[i].buf + off - cache[i].off, len);
+      return (grub_ssize_t) len;
+    }
+
+    /* Must read block and decompress */
+    block = grub_malloc (insize);
+    if (!block)
+      return -1;
+    err = grub_disk_read (data->disk,
+			  addr >> GRUB_DISK_SECTOR_BITS,
+			  addr & (GRUB_DISK_SECTOR_SIZE - 1),
+			  insize, block);
+    if (err)
+      {
+	grub_free (block);
+	return -1;
+      }
+
+  if (cache && (len < CACHE_BUF_LEN))
+    {
+      /* Cache new decompressed data */
+      rc = data->decompress (block, insize, off, cache[cnxt].buf, CACHE_BUF_LEN, data);
+      if (rc > 0)
+	{
+	  cache[cnxt].addr = addr;
+	  cache[cnxt].off = off;
+	  cache[cnxt].len = rc;
+
+	  if (rc > (grub_ssize_t)len)
+	    rc = len;
+	  memcpy(outbuf, cache[cnxt].buf, rc);
+
+	  if (++cnxt >= CACHE_SIZE)
+	    cnxt = 0;
+	}
+    } else {
+      /* Too big to cache, just read and decompress block */
+      rc = data->decompress (block, insize, off, outbuf, len, data);
+    }
+
+  grub_free (block);
+  return rc;
+}
+
 static grub_err_t
 read_chunk (struct grub_squash_data *data, void *buf, grub_size_t len,
 	    grub_uint64_t chunk_start, grub_off_t offset)
@@ -254,29 +377,10 @@
 	}
       else
 	{
-	  char *tmp;
 	  grub_size_t bsize = grub_le_to_cpu16 (d) & ~SQUASH_CHUNK_FLAGS; 
 	  grub_disk_addr_t a = chunk_start + 2;
-	  tmp = grub_malloc (bsize);
-	  if (!tmp)
-	    return grub_errno;
-	  /* FIXME: buffer uncompressed data.  */
-	  err = grub_disk_read (data->disk, (a >> GRUB_DISK_SECTOR_BITS),
-				a & (GRUB_DISK_SECTOR_SIZE - 1),
-				bsize, tmp);
-	  if (err)
-	    {
-	      grub_free (tmp);
-	      return err;
-	    }
-
-	  if (data->decompress (tmp, bsize, offset,
-				buf, csize, data) < 0)
-	    {
-	      grub_free (tmp);
+	  if (data_decompress (data, a, bsize, offset, buf, csize) < 0)
 	      return grub_errno;
-	    }
-	  grub_free (tmp);
 	}
       len -= csize;
       offset += csize;
@@ -745,7 +849,7 @@
 {
   grub_err_t err;
   grub_off_t cumulated_uncompressed_size = 0;
-  grub_uint64_t a = 0;
+  grub_uint64_t aa, a = 0;
   grub_size_t i;
   grub_size_t origlen = len;
 
@@ -823,32 +927,16 @@
       if (!(ino->block_sizes[i]
 	    & grub_cpu_to_le32_compile_time (SQUASH_BLOCK_UNCOMPRESSED)))
 	{
-	  char *block;
 	  grub_size_t csize;
 	  csize = grub_le_to_cpu32 (ino->block_sizes[i]) & ~SQUASH_BLOCK_FLAGS;
-	  block = grub_malloc (csize);
-	  if (!block)
-	    return -1;
-	  err = grub_disk_read (data->disk,
-				(ino->cumulated_block_sizes[i] + a)
-				>> GRUB_DISK_SECTOR_BITS,
-				(ino->cumulated_block_sizes[i] + a)
-				& (GRUB_DISK_SECTOR_SIZE - 1),
-				csize, block);
-	  if (err)
-	    {
-	      grub_free (block);
-	      return -1;
-	    }
-	  if (data->decompress (block, csize, boff, buf, curread, data)
+	  aa = ino->cumulated_block_sizes[i] + a;
+	  if (data_decompress (data, aa, csize, boff, buf, curread)
 	      != (grub_ssize_t) curread)
 	    {
-	      grub_free (block);
 	      if (!grub_errno)
 		grub_error (GRUB_ERR_BAD_FS, "incorrect compressed chunk");
 	      return -1;
 	    }
-	  grub_free (block);
 	}
       else
 	err = grub_disk_read (data->disk, 
@@ -905,33 +993,16 @@
     b = grub_le_to_cpu32 (ino->ino.long_file.offset) + off;
   else
     b = grub_le_to_cpu32 (ino->ino.file.offset) + off;
-  
-  /* FIXME: cache uncompressed chunks.  */
+
   if (compressed)
     {
-      char *block;
-      block = grub_malloc (grub_le_to_cpu32 (frag.size));
-      if (!block)
-	return -1;
-      err = grub_disk_read (data->disk,
-			    a >> GRUB_DISK_SECTOR_BITS,
-			    a & (GRUB_DISK_SECTOR_SIZE - 1),
-			    grub_le_to_cpu32 (frag.size), block);
-      if (err)
-	{
-	  grub_free (block);
-	  return -1;
-	}
-      if (data->decompress (block, grub_le_to_cpu32 (frag.size),
-			    b, buf, len, data)
+      if (data_decompress (data, a, grub_le_to_cpu32 (frag.size), b, buf, len)
 	  != (grub_ssize_t) len)
 	{
-	  grub_free (block);
 	  if (!grub_errno)
 	    grub_error (GRUB_ERR_BAD_FS, "incorrect compressed chunk");
 	  return -1;
 	}
-      grub_free (block);
     }
   else
     {
