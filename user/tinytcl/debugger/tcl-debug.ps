%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 12 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "3" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(3) 553 27 T
0 18 Q
(Intr) 72 177.67 T
(oduction) 102.65 177.67 T
1 12 Q
0.48 (T) 72 156.67 P
0.48 (cl [1][2] is a language speci\336cally intended for) 78.49 156.67 P
2.75 (generic application control.  In some applica-) 72 142.67 P
6.1 (tions it dominates the user) 72 128.67 P
6.1 (\325) 222.76 128.67 P
6.1 (s view of the) 226.09 128.67 P
0.56 (application.  Expect [3][4] is a good example of) 72 114.67 P
0.81 (this.  Expect is always executing T) 72 100.67 P
0.81 (cl statements) 242.9 100.67 P
1.46 (\320 usually from a script.  When the script ends,) 72 86.67 P
(Expect ends.) 72 72.67 T
1.37 (This type of application is common.  W) 324 157.83 P
1.37 (ith this) 523.64 157.83 P
1.07 (heavy reliance on T) 324 143.83 P
1.07 (cl, it is useful to have a de-) 421.28 143.83 P
2.76 (bugger that understands T) 324 129.83 P
2.76 (cl.  For example, it) 456.35 129.83 P
0.77 (should be able to single-step and print values at) 324 115.83 P
(user discretion.) 324 101.83 T
0.59 (The debugger described herein works in exactly) 324 82.83 P
2.15 (this way) 324 68.83 P
2.15 (.  It works best with applications like) 365.69 68.83 P
126 225 504 684 R
7 X
V
0 24 Q
0 X
(A Debugger for T) 148.87 668 T
(cl Applications) 328.53 668 T
2 14 Q
(Don Libes) 286.04 632.67 T
1 F
(National Institute of Standards and T) 182.77 611.67 T
(echnology) 388.93 611.67 T
2 F
(Abstract) 291.29 548.67 T
1 12 Q
0.51 (T) 126 529 P
0.51 (cl is a language speci\336cally intended for generic application control.  By us-) 132.49 529 P
2.79 (ing it, application programmers escape the dilemma of whether to design) 126 515 P
2.36 (sophisticated application-speci\336c languages or whether to build tools more) 126 501 P
0.5 (quickly but that are limited in \337exibility) 126 487 P
0.5 (.  T) 320.13 487 P
0.5 (cl is easy for application program-) 336.62 487 P
0.49 (mers to use, however) 126 473 P
0.49 (, up to now) 228.91 473 P
0.49 (, there has been no general-purpose debugger) 283.58 473 P
(for application users.) 126 459 T
1.88 (This paper describes an implementation of a debugger for T) 126 440 P
1.88 (cl applications.) 429.5 440 P
1.02 (The debugger has a typical front-end but with some extremely unusual com-) 126 426 P
0.37 (mands, in part because of the features and limitations of T) 126 412 P
0.37 (cl.  The debugger is) 407.61 412 P
1.47 (modeless, allowing users to issue T) 126 398 P
1.47 (cl and application commands along with) 302.42 398 P
0.58 (debugger commands.  Each type of command may invoke the other) 126 384 P
0.58 (, allowing) 455.44 384 P
(debugging to be programmed, dynamically or in advance.) 126 370 T
0.43 (The debugger is written in C and is very fast.  When linked in but not used, it) 126 351 P
0.99 (does not slow applications at all.  The debugger requires no modi\336cations to) 126 337 P
(the T) 126 323 T
(cl core, and can be plugged into applications with little ef) 150.14 323 T
(fort.) 425.4 323 T
(Keywords: T) 126 285 T
(cl, Tk, T) 188.11 285 T
(ool Command Language, Expect, debugger) 228.58 285 T
(, interpreter) 436.62 285 T
2 F
0.57 (Reprinted fr) 126 247 P
0.57 (om Pr) 184.42 247 P
0.57 (oceedings of the 1993 T) 214.2 247 P
0.57 (cl/Tk W) 329.96 247 P
0.57 (orkshop, Berkeley) 366.4 247 P
0.57 (, CA, June) 452.9 247 P
(10-1) 126 233 T
(1, 1993.) 147.1 233 T
FMENDPAGE
%%EndPage: "3" 2
%%Page: "4" 2
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(4) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
0.6 (Expect that sequentially execute T) 54 730 P
0.6 (cl commands,) 220.77 730 P
0.81 (although it can also be used with any T) 54 716 P
0.81 (cl appli-) 247.55 716 P
(cation.) 54 702 T
2.39 (This paper has three parts.  The \336rst part de-) 54 683 P
-0.12 (scribes the debugger in terms of how it is used in) 54 669 P
-0.08 (a typical application.   The second part of the pa-) 54 655 P
8.03 (per describes how the debugger can be) 54 641 P
1.48 (integrated into T) 54 627 P
1.48 (cl applications.  The third part) 136.06 627 P
1.36 (describes the design and implementation of the) 54 613 P
(debugger) 54 599 T
(.) 97.97 599 T
0 18 Q
(V) 54 567 T
(iew by the Application User) 66.32 567 T
1 12 Q
1.35 (This section of the paper is a debugger tutorial) 54 546 P
1.34 (which shows the application user) 54 532 P
1.34 (\325) 219.02 532 P
1.34 (s view of the) 222.36 532 P
0.84 (debugger) 54 518 P
0.84 (.  For the sake of concreteness, Expect) 97.97 518 P
2.08 ([1] will be used as the application.  However) 54 504 P
2.08 (,) 285 504 P
2.8 (any other application using the debugger will) 54 490 P
(work similarly) 54 476 T
(.) 123.51 476 T
0 F
(Starting the Debugger) 54 454 T
1 F
0.93 (The debugger is initially invoked in an applica-) 54 435 P
0.75 (tion-dependent way) 54 421 P
0.75 (.  In Expect, the debugger is) 148.9 421 P
(started by using the \337ag \322-D 1\323.  For example:) 54 407 T
3 11 Q
(% expect -D 1 script) 72 388.67 T
1 12 Q
2.78 (If the system supports the #! mechanism, the) 54 374 P
(script may also be started as:) 54 360 T
3 11 Q
(% script -D 1) 72 341.67 T
1 12 Q
0.25 (In either case, additional ar) 54 327 P
0.25 (guments may be sup-) 184.99 327 P
(plied as usual.) 54 313 T
1.72 (The user is prompted for a command.  At this) 54 294 P
1.73 (point either Expect commands, T) 54 280 P
1.73 (cl commands,) 219.65 280 P
0.48 (or debugger commands may be entered.  This is) 54 266 P
-0.25 (true at all other times that the user is prompted as) 54 252 P
(well.  The debugger is modeless.) 54 238 T
1.5 (The following T) 54 219 P
1.5 (cl commands illustrate that the) 134.77 219 P
(debugger evaluates T) 54 205 T
(cl commands as usual.) 155.74 205 T
3 11 Q
(expect2.1> set m {a b c}) 72 186.67 T
(a b c) 72 175.67 T
(expect2.2> llength $m) 72 164.67 T
(3) 72 153.67 T
(expect2.3>) 72 142.67 T
1 12 Q
1.21 (The command prompt is changeable by the ap-) 54 128 P
-0.09 (plication or user) 54 114 P
-0.09 (.  Here, the second number is the) 131.1 114 P
2.41 (T) 54 100 P
2.41 (cl history identi\336er) 60.49 100 P
2.41 (.  The \336rst number is the) 155.93 100 P
(depth of the evaluation stack.) 54 86 T
0.51 (In the context of a script, the initial depth of the) 306 730 P
0.02 (evaluation stack is 1 but the debugger always in-) 306 716 P
0.02 (troduces a new level to the stack.  Hence, we see) 306 702 P
(a \3222\323 in the prompt.) 306 688 T
0.54 (Expect also allows the application to take initial) 306 669 P
1.31 (control.  By using the \337ag \322-D 0\323, the applica-) 306 655 P
0.39 (tion runs until the user presses ^C at which time) 306 641 P
0.69 (the debugger begins running.  The remainder of) 306 627 P
1.97 (this tutorial will assume that the debugger has) 306 613 P
(started up immediately from the \337ag \322-D 1\323.) 306 599 T
0 F
(Command Overview and Philosophy) 306 577 T
1 F
(The debugger commands are:) 306 558 T
352.64 537.69 324 537.69 2 L
V
0.59 H
0 Z
N
(Name) 324 539 T
424.96 537.69 369 537.69 2 L
V
N
(Description) 369 539 T
(s) 338.11 523 T
(step into procedure) 369 523 T
(n) 338.11 508 T
(step over procedure) 369 508 T
(r) 338.11 493 T
(return from procedure) 369 493 T
(b) 338.11 478 T
(set, clear) 369 478 T
(, or show breakpoint) 411.14 478 T
(c) 338.11 463 T
(continue) 369 463 T
(w) 338.11 448 T
(show stack) 369 448 T
(u) 338.11 433 T
(move scope up) 369 433 T
(d) 338.11 418 T
(move scope down) 369 418 T
(h) 338.11 403 T
(help) 369 403 T
0.12 (The debugger commands are all one letter) 306 386 P
0.12 (. Short) 507.89 386 P
0.7 (procedure names are desirable in an interactive-) 306 372 P
1.31 (only application such as the debugger) 306 358 P
1.31 (.  In con-) 492.77 358 P
1.9 (trast, scripted applications rarely use one-letter) 306 344 P
2.03 (commands.  The chances of name con\337ict be-) 306 330 P
0.03 (tween the debugger and scripted applications are) 306 316 P
(very low) 306 302 T
(.) 347.52 302 T
2.5 (The command names are very similar and, in) 306 283 P
0.19 (some cases, identical to other popular debuggers) 306 269 P
0.54 (\050gdb, dbx, etc.\051.  Existing T) 306 255 P
0.54 (cl procedures are di-) 440.13 255 P
0.23 (rectly usable so there are no new commands, for) 306 241 P
-0.14 (example, to print variables since T) 306 227 P
-0.14 (cl already pro-) 470.35 227 P
2.58 (vides such commands \050e.g., set, puts, parray\051.) 306 213 P
1.76 (The intent of the debugger is that it should be) 306 199 P
0.83 (easy to learn and use, and otherwise stay out of) 306 185 P
(the way) 306 171 T
(.) 342.86 171 T
0.03 (The debugger uses the application\325) 306 152 P
0.03 (s top-level in-) 473.32 152 P
0.47 (teractor) 306 138 P
0.47 (.  In the case of Expect, for example, the) 341.97 138 P
-0.03 (debugger uses Expect\325) 306 124 P
-0.03 (s interact command which) 413.85 124 P
(prompts for commands and evaluates them.) 306 110 T
3.8 (For the purposes of describing the debugger) 306 91 P
0.02 (commands, the following script is assumed to be) 306 77 P
2.34 (named) 306 63 P
2 F
2.34 (debug-test.exp) 343.31 63 P
1 F
2.34 (.) 412.92 63 P
1 10 Q
1.95 (1) 415.92 67.8 P
1 12 Q
2.34 (  The script doesn\325) 420.92 63 P
2.34 (t do) 519.33 63 P
FMENDPAGE
%%EndPage: "4" 3
%%Page: "5" 3
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(5) 553 27 T
1 12 Q
2.4 (anything useful.  It merely serves to illustrate) 72 730 P
(how the debugger is used.) 72 716 T
3 11 Q
(set b 1) 90 697.67 T
(proc p4 {x} {) 90 675.67 T
(return [) 126 664.67 T
(    expr 5+[expr 1+$x]]) 126 653.67 T
(}) 90 642.67 T
(set z [) 90 620.67 T
(   expr 1+[expr 2+[p4 $b]]) 90 609.67 T
(]) 90 598.67 T
(proc p3 {} {) 90 576.67 T
(set m 0) 126 565.67 T
(}) 90 554.67 T
(proc p2 {} {) 90 532.67 T
(set c 4) 126 521.67 T
(p3) 126 510.67 T
(set d 5) 126 499.67 T
(}) 90 488.67 T
(proc p1 {} {) 90 466.67 T
(set a 2) 126 455.67 T
(p2) 126 444.67 T
(set a 3) 126 433.67 T
(set a 5) 126 422.67 T
(}) 90 411.67 T
(p1) 90 389.67 T
(set k 7) 90 378.67 T
(p1) 90 367.67 T
1 12 Q
0.43 (If the debugger is started at the beginning of the) 72 353 P
2.1 (script, no statements have been executed.  T) 72 339 P
2.1 (cl) 297.34 339 P
(and application commands have global scope.) 72 325 T
3 11 Q
(% expect -D 1 debug-test.exp) 90 306.67 T
(1: set b 1) 90 295.67 T
(expect2.1>) 90 284.67 T
1 12 Q
0.98 (When a new command is about to be executed,) 72 270 P
-0.02 (the debugger prints the command.  It is preceded) 72 256 P
1.78 (by the evaluation stack level.  \322set b 1\323 is the) 72 242 P
-0.05 (\336rst line in the script.  It has not yet been execut-) 72 228 P
(ed.  \322info exists\323 con\336rms this.) 72 214 T
3 11 Q
(expect2.1> info exists b) 90 195.67 T
(0) 90 184.67 T
0 14 Q
(The \322n\323 command \320 \322Next\323) 72 161.67 T
1 12 Q
0.36 (The) 72 142 P
2 F
0.36 (n) 94.01 142 P
1 F
0.36 ( command executes the pending command) 100.01 142 P
1.26 (\320 in this case \322set b 1\323 \320 and displays the next) 72 128 P
(command to be executed.) 72 114 T
3 11 Q
(expect2.2> n) 90 95.67 T
(1: proc p4 {} {) 90 84.67 T
72 66 306 81 C
81 79 225 79 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
(1. Italics indicate something being de\336ned.) 90 59.33 T
3 11 Q
(return [) 378 730.67 T
(expr 5+[expr 1+$x]]) 414 719.67 T
(}) 342 708.67 T
(expect2.3> info exists b) 342 697.67 T
(1) 342 686.67 T
1 12 Q
-0.15 (The command \322info exists b\323 con\336rms that b has) 324 672 P
1.58 (been set.  The procedure p4 is about to be de-) 324 658 P
(\336ned.) 324 644 T
3 11 Q
(expect2.4> n) 342 625.67 T
(4: p4 $b) 342 614.67 T
(expect5.5>) 342 603.67 T
1 12 Q
1.9 (The procedure p4 has now been de\336ned.  The) 324 589 P
0.32 (next command to be executed is p4 itself.  It ap-) 324 575 P
(pears in the statement:) 324 561 T
3 11 Q
(set z [) 342 542.67 T
(expr 1+[expr 2+[p4 $b]]) 378 531.67 T
(]) 342 520.67 T
1 12 Q
0.11 (The three sets of braces introduce three new lev-) 324 506 P
0.23 (els on the evaluation stack, hence the stack level) 324 492 P
0.62 (in which p4 is about to be executed is shown as) 324 478 P
(\3224\323.) 324 464 T
1 10 Q
(1) 343.64 468.8 T
1 12 Q
1.88 (Notice that the evaluation stack level does not) 324 445 P
2.22 (af) 324 431 P
2.22 (fect the scope.  W) 333.1 431 P
2.22 (e are still in the top-level) 427.3 431 P
(scope and b is still visible.) 324 417 T
3 11 Q
(expect5.5> info exists b) 342 398.67 T
(1) 342 387.67 T
1 12 Q
0.4 (The ar) 324 373 P
0.4 (gument to p4 is $b.  The value of this can) 355.15 373 P
(be evaluated by using set or puts.) 324 359 T
3 11 Q
(expect5.6> set b) 342 340.67 T
(1) 342 329.67 T
(expect5.7> puts $b) 342 318.67 T
(1) 342 307.67 T
1 12 Q
2.19 (Another n command executes p4, popping the) 324 293 P
0.21 (stack one level.  Additional n commands contin-) 324 279 P
0.15 (ue evaluation of the \322set z\323 command, each time) 324 265 P
(popping the stack one level.) 324 251 T
3 11 Q
(expect5.8> n) 342 232.67 T
(3: expr 2+[p4 $b]) 342 221.67 T
(expect4.9> n) 342 210.67 T
(2: expr 1+[expr 2+[p4 $b]]) 342 199.67 T
(expect3.10> n) 342 188.67 T
(1: set z [) 342 177.67 T
(expr 1+[expr 2+[p4 $b]]) 378 166.67 T
(]) 342 155.67 T
(expect2.11>) 342 144.67 T
324 90 558 105 C
333 103 477 103 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.85 (1. Whether the word \322stack\323 refers to procedure) 342 83.33 P
2.31 (call stack or evaluation stack should either be) 342 71.33 P
(explicit or clearly implied by context.) 342 59.33 T
FMENDPAGE
%%EndPage: "5" 4
%%Page: "6" 4
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(6) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
0 14 Q
(The \322s\323 command \320 \322Step\323) 54 728.67 T
1 12 Q
0.7 (The n command executes a procedure atomical-) 54 709 P
-0.16 (ly) 54 695 P
-0.16 (.  It is possible to step into a procedure with the) 62.55 695 P
2 F
(s) 54 681 T
1 F
( command.) 58.67 681 T
1.97 (W) 54 662 P
1.97 (e\325ll rewind this scenario to just before p4 is) 64.36 662 P
(about to be executed.) 54 648 T
1 10 Q
(1) 155.92 652.8 T
3 11 Q
(4: p4 $b) 72 629.67 T
(expect5.5> s) 72 618.67 T
(7: expr 1+$x) 72 607.67 T
(expect8.6>) 72 596.67 T
1 12 Q
0.17 (\322expr 1+$x\323 is the \336rst command to be executed) 54 582 P
0.48 (inside of p4.  It is nested inside of two brackets,) 54 568 P
-0.22 (plus the procedure call of p4, so the stack level is) 54 554 P
(increased by three.) 54 540 T
0.5 (After the s command, the debugger stops before) 54 521 P
0.1 (the \336rst command in the procedure and waits for) 54 507 P
(more interactive commands.) 54 493 T
1.46 (If the command that is about to be executed is) 54 474 P
(not a procedure, then s and n behave identically) 54 460 T
(.) 282.04 460 T
1.78 (Both s and n take an optional ar) 54 441 P
1.78 (gument in the) 218.48 441 P
2.26 (form of a number describing how many com-) 54 427 P
(mands to execute.) 54 413 T
(For example:) 54 394 T
3 11 Q
(s 2) 72 375.67 T
(s 100) 72 364.67 T
(s $b) 72 353.67 T
(s [expr 2+[p4 $b]]) 72 342.67 T
1 12 Q
2.62 (The ar) 54 328 P
2.62 (guments are evaluated according to the) 87.37 328 P
1.71 (usual T) 54 314 P
1.71 (cl rules because s and n are commands) 90.51 314 P
(known to T) 54 300 T
(cl.) 108.46 300 T
1.92 (The debugger will not interrupt procedures in-) 54 281 P
1.35 (voked from the command-line.  This is usually) 54 267 P
1.99 (the desired behavior) 54 253 P
1.99 (, although it is possible to) 154.76 253 P
(change this.) 54 239 T
0 14 Q
(The \322w\323 Command \320 \322Wher) 54 213.67 T
(e\323) 226.32 213.67 T
1 12 Q
0.9 (In the current scenario, we are about to execute) 54 194 P
1.97 (\322expr 1+$x\323 in the procedure p4.  W) 54 180 P
1.97 (e can re-) 242.78 180 P
0.18 (mind ourselves of this by displaying the stack of) 54 166 P
(procedure scopes using the) 54 152 T
2 F
(w) 186.56 152 T
1 F
( command.) 194.56 152 T
3 11 Q
(7: expr 1+$x) 72 133.67 T
(expect8.6> w) 72 122.67 T
( 0: expect -D 1 debug-test.exp) 72 111.67 T
(*1: p4 1) 72 100.67 T
54 78 288 93 C
63 91 207 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.29 (1. There is no actual command to \322rewind\323 com-) 72 71.33 P
(mands, alas.) 72 59.33 T
3 11 Q
( 7: expr 1+1) 324 730.67 T
1 12 Q
0.45 (The \336rst line describes scope 0.  This is the top-) 306 716 P
1.64 (level scope of the \336le itself, and the command) 306 702 P
0.83 (used to invoke the program is shown.  The sec-) 306 688 P
6.73 (ond line describes scope 1 which is the) 306 674 P
-0.15 (invocation of procedure p4.  The last line is not a) 306 660 P
0.93 (scope but just repeats the evaluation stack level) 306 646 P
(and the command about to be executed.) 306 632 T
1.55 (Notice that when w prints commands, they are) 306 613 P
0.26 (displayed using the literal values of each param-) 306 599 P
9.91 (eter) 306 585 P
9.91 (.  In contrast, when the debugger) 323.32 585 P
0.26 (automatically prints out the next command to be) 306 571 P
-0.19 (executed, the command is printed as it was origi-) 306 557 P
2.77 (nally entered in the script.  For example, the) 306 543 P
4.36 (debugger initially stopped and printed \322expr) 306 529 P
0.68 (1+$w\323, but the same instruction shows as \322expr) 306 515 P
(1+1\323 in the output from the w command.) 306 501 T
0 14 Q
(The Curr) 306 475.67 T
(ent Scope) 362.88 475.67 T
1 12 Q
1.4 (Executing fourteen steps \050via \322s 14\323\051 brings us) 306 456 P
(to the \336rst command in procedure p3.) 306 442 T
3 11 Q
(expect8.8> s 14) 324 423.67 T
(4: set m 0) 324 412.67 T
(expect5.9> w) 324 401.67 T
( 0: expect -D 1 debug-test.exp) 324 390.67 T
( 1: p1) 324 379.67 T
( 2: p2) 324 368.67 T
(*3: p3) 324 357.67 T
( 4: set m 0) 324 346.67 T
1 12 Q
0.03 (The asterisk denotes that p3 is the) 306 332 P
2 F
0.03 (curr) 471.8 332 P
0.03 (ent scope) 492 332 P
1 F
0.03 (.) 537 332 P
0.78 (W) 306 318 P
0.78 (e can now execute T) 316.36 318 P
0.78 (cl commands appropriate) 417.2 318 P
2.56 (to the scope of p3.  This includes commands) 306 304 P
(such as global, uplevel, and upvar) 306 290 T
(.) 468.22 290 T
3 11 Q
(expect5.10> uplevel {set c}) 324 271.67 T
(4) 324 260.67 T
0 14 Q
3.37 (The \322u\323 and \322d\323 commands \320 \322Up\323) 306 237.67 P
(and \322Down\323) 306 221.67 T
1 12 Q
0.02 (The current scope can be changed by the u and d) 306 202 P
0.02 (commands.) 306 188 P
2 F
0.02 (u) 367 188 P
1 F
0.02 ( moves the current scope up, while) 373 188 P
2 F
1.26 (d) 306 174 P
1 F
1.26 ( moves it down.  Interactive variable accesses) 312 174 P
(always refer to the current scope.) 306 160 T
3 11 Q
(expect5.11> u) 324 141.67 T
(expect5.12> w) 324 130.67 T
( 0: expect -D 1 debug-test.exp) 324 119.67 T
( 1: p1) 324 108.67 T
(*2: p2) 324 97.67 T
( 3: p3) 324 86.67 T
( 4: set m 0) 324 75.67 T
(expect5.13> set c) 324 64.67 T
FMENDPAGE
%%EndPage: "6" 5
%%Page: "7" 5
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(7) 553 27 T
3 11 Q
(4) 90 730.67 T
1 12 Q
2.01 (Both u and d accept an ar) 72 716 P
2.01 (gument representing) 205.73 716 P
-0.15 (the number of scopes by which to move.  For ex-) 72 702 P
(ample, \322u 2\323 moves from scope 2 to scope 0.) 72 688 T
3 11 Q
(expect5.14> u 2) 90 669.67 T
(expect5.15> w) 90 658.67 T
(*0: expect -D 1 debug-test.exp) 90 647.67 T
( 1: p1) 90 636.67 T
( 2: p2) 90 625.67 T
( 3: p3) 90 614.67 T
( 4: set m 0) 90 603.67 T
1 12 Q
-0.17 (An absolute scope is also accepted in the form of) 72 589 P
(\322#\323 followed by a scope number) 72 575 T
(, such as \322#3\323.) 227.06 575 T
3 11 Q
(expect5.16> u #3) 90 556.67 T
(expect5.17> w) 90 545.67 T
( 0: expect -D 1 debug-test.exp) 90 534.67 T
( 1: p1) 90 523.67 T
( 2: p2) 90 512.67 T
(*3: p3) 90 501.67 T
( 4: set m 0) 90 490.67 T
1 12 Q
0.83 (When an absolute scope is named, either u or d) 72 476 P
0.5 (may be used, irrespective of which direction the) 72 462 P
(new scope lies.) 72 448 T
0.96 (Moving the scope does not af) 72 429 P
0.96 (fect the command) 218.15 429 P
0.25 (that is about to be executed.  If a command such) 72 415 P
0.58 (as s or n is given, the current scope is automati-) 72 401 P
5.7 (cally reset to whereever is appropriate for) 72 387 P
(execution of the new command.) 72 373 T
0 14 Q
(The \322r\323 Command \320 \322Return\323) 72 347.67 T
1 12 Q
0.45 (The) 72 328 P
2 F
0.45 (r) 94.1 328 P
1 F
0.45 ( command completes execution of the cur-) 98.77 328 P
0.28 (rent procedure.  In other words, it stops after the) 72 314 P
(current procedure returns.) 72 300 T
3 11 Q
(expect5.18> r) 90 281.67 T
(3: set d 5) 90 270.67 T
(expect4.19> w) 90 259.67 T
( 0: expect -D 1 debug-test.exp) 90 248.67 T
( 1: p1) 90 237.67 T
(*2: p2) 90 226.67 T
( 3: set d 5) 90 215.67 T
(expect4.20> r) 90 204.67 T
(2: set a 3) 90 193.67 T
(expect3.21> w) 90 182.67 T
( 0: expect -D 1 debug-test.exp) 90 171.67 T
(*1: p1) 90 160.67 T
( 2: set a 3) 90 149.67 T
(expect3.22> r) 90 138.67 T
(1: set k 7) 90 127.67 T
(expect2.23> w) 90 116.67 T
(*0: expect -D 1 debug-test.exp) 90 105.67 T
( 1: set k 7) 90 94.67 T
(expect2.24> r) 90 83.67 T
(nowhere to return to) 90 72.67 T
0 14 Q
(The \322c\323 Command \320 \322Continue\323) 324 728.67 T
1 12 Q
3.25 (The) 324 709 P
2 F
3.25 (c) 348.9 709 P
1 F
3.25 ( command lets execution of commands) 354.22 709 P
1.92 (continue without having to single-step.  In the) 324 695 P
0.43 (scenario so far) 324 681 P
0.43 (, given a command anywhere, the) 394.31 681 P
-0.22 (program would continue until the script ends and) 324 667 P
(the shell prompt appears.) 324 653 T
3 11 Q
(expect2.25> c) 342 634.67 T
(%) 342 623.67 T
1 12 Q
-0.22 (The c command is also useful in other ways.  Af-) 324 609 P
4.86 (ter setting breakpoints, the program can be) 324 595 P
-0.27 (continued until it hits a breakpoint.  The program) 324 581 P
0.4 (can also be continued until a signal occurs, such) 324 567 P
(as by the user pressing ^C.) 324 553 T
0 14 Q
(The \322b\323 Command \320 \322Br) 324 527.67 T
(eakpoint\323) 475.34 527.67 T
1 12 Q
1.6 (Prior commands have shown how to execute a) 324 508 P
1.75 (\336xed number of commands or procedure calls.) 324 494 P
2.12 (In contrast, breakpoints provide a way to stop) 324 480 P
0.97 (execution upon a condition.  The conditions in-) 324 466 P
(clude:) 324 452 T
(\245) 341.5 433 T
(line number and \336lename matching) 358.49 433 T
(\245) 341.5 417 T
(expression testing) 358.49 417 T
(\245) 341.5 401 T
(command and ar) 358.49 401 T
(gument name matching) 438.21 401 T
0 F
(Br) 324 379 T
(eakpoint by Line Number and Filename) 337.11 379 T
0 10 Q
(1) 542.02 383.8 T
1 12 Q
1.31 (Line numbers and \336lenames are the most com-) 324 360 P
1.05 (mon way to specify a breakpoint.  This form is) 324 346 P
-0.14 (correspondingly the most compact.  For example) 324 332 P
4.63 (the following command causes execution to) 324 318 P
(break before executing line 7.) 324 304 T
3 11 Q
(expect2.26> b 7) 342 285.67 T
(0) 342 274.67 T
1 12 Q
0.5 (After creation of a breakpoint, an integer identi-) 324 260 P
1.23 (fying the breakpoint is printed.  The reason for) 324 246 P
(this will be described later) 324 232 T
(.) 449.92 232 T
0.76 (By default, the line number refers to the \336le as-) 324 213 P
-0.02 (sociated with the current scope.  A \336lename may) 324 199 P
1.67 (be used to refer to a dif) 324 185 P
1.67 (ferent \336le.  A colon is) 445.05 185 P
(used to separate the \336lename and line number) 324 171 T
(.) 542.84 171 T
3 11 Q
(expect2.27> b foo.exp:7) 342 152.67 T
324 102 558 117 C
333 115 477 115 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
1.16 (1. Breakpoints by line number and \336lename are) 342 95.33 P
0.21 (not currently supported.  See \322Line Numbers\323 on) 342 83.33 P
3.62 (page) 342 71.33 P
3.62 (13 and \322Current Limitations and Future) 363.37 71.33 P
(W) 342 59.33 T
(ork\323 on page) 350.64 59.33 T
(15.) 404.76 59.33 T
FMENDPAGE
%%EndPage: "7" 6
%%Page: "8" 6
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(8) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
(Br) 54 730 T
(eakpoint by Expr) 67.11 730 T
(ession) 156.2 730 T
1 F
0.41 (It is possible to break at a line only when an ex-) 54 711 P
3.11 (pression is true.  For example, the following) 54 697 P
2.74 (command causes execution to break at line 7) 54 683 P
(only when foo is greater than three.) 54 669 T
3 11 Q
(expect2.28> b 7 if {$foo>3}) 72 650.67 T
1 12 Q
0.21 (Expressions are the usual T) 54 636 P
0.21 (cl syntax and may be) 185.9 636 P
(arbitrarily complex.) 54 622 T
0.03 (No breakpointing occurs inside of the evaluation) 54 603 P
0.24 (of breakpoint expressions \050unless another break-) 54 589 P
(point dictates this\051.) 54 575 T
0 F
(Br) 54 553 T
(eakpoint by Pattern Match) 67.11 553 T
1 F
1.35 (It is also possible to de\336ne breakpoints by pat-) 54 534 P
2.67 (tern matching on the command or ar) 54 520 P
2.67 (guments.) 244.36 520 P
-0.12 (Regular expressions are introduced by the \337ag \322-) 54 506 P
3.04 (regexp\323 \050commonly abbreviated \322-re\323\051) 54 492 P
1 10 Q
2.53 (1) 249.28 496.8 P
1 12 Q
3.04 (.  The) 254.28 492 P
2.54 (following command stops if the string p4 ap-) 54 478 P
(pears within the command:) 54 464 T
3 11 Q
(expect2.29> b -re "p4") 72 445.67 T
(0) 72 434.67 T
1 12 Q
1.48 (W) 54 420 P
1.48 (ith our sample \336le, we can see the results of) 64.84 420 P
(this:) 54 406 T
3 11 Q
(% expect -D 1 debug-test.exp) 72 387.67 T
(1: set b 1) 72 376.67 T
(expect2.1> b -re "p4") 72 365.67 T
(0) 72 354.67 T
(expect2.2> c) 72 343.67 T
(breakpoint 0: -re "p4") 72 332.67 T
(1: proc p4 {x} {) 72 321.67 T
(        return [) 72 310.67 T
(expr 5+[expr 1+$x]]) 144 299.67 T
(}) 72 288.67 T
(expect2.3> c) 72 277.67 T
(breakpoint 0: -re "p4") 72 266.67 T
(4: p4 $b) 72 255.67 T
(expect5.4> c) 72 244.67 T
(breakpoint 0: -re "p4") 72 233.67 T
(3: expr 2+[p4 $b]) 72 222.67 T
(expect4.5> c) 72 211.67 T
(breakpoint 0: -re "p4") 72 200.67 T
(2: expr 1+[expr 2+[p4 $b]]) 72 189.67 T
1 12 Q
0.14 (The \336rst breakpoint occurred upon the de\336nition) 54 175 P
-0.01 (of p4.  The second occurred when p4 was called.) 54 161 P
54 126 288 141 C
63 139 207 139 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
1.05 (1. The debugger permits all \337ags to be abbrevi-) 72 119.33 P
0.67 (ated to the smallest unique pre\336x.  For example,) 72 107.33 P
0.85 (\322-regexp\323 can actually be abbreviated \322-r\323.  The) 72 95.33 P
-0.1 (usual quoting conventions around patterns should) 72 83.33 P
0.6 (be observed.  In this example, the quotes around) 72 71.33 P
(p4 can be omitted.) 72 59.33 T
1 12 Q
0.17 (T) 306 730 P
0.17 (wo more breakpoints occurred only because p4) 312.49 730 P
(was mentioned in the command.) 306 716 T
0.05 (W) 306 697 P
0.05 (ith appropriate regular expressions, any one of) 316.84 697 P
0.8 (these can be selected by itself.  For example, to) 306 683 P
(stop only on de\336nitions:) 306 669 T
3 11 Q
(expect2.1> b -re "proc p4 ") 324 650.67 T
1 12 Q
(T) 306 636 T
(o stop only on a call to p4 itself:) 312.49 636 T
3 11 Q
(expect2.2> b -re "^p4 ") 324 617.67 T
1 12 Q
(T) 306 603 T
(o stop only on commands which call p4:) 312.49 603 T
3 11 Q
(expect2.3> b -re "\134\134\134[p4 ") 324 584.67 T
1 12 Q
0.64 (The complexity of this last example is, perhaps,) 306 570 P
1.13 (somewhat ameliorated by the unlikelihood of it) 306 556 P
1.87 (ever being used.  It is more shown simply for) 306 542 P
0.52 (completeness.  The point is, the ability to match) 306 528 P
(on regular expressions is extremely powerful.) 306 514 T
0.64 (Multi-line patterns may be matched in the usual) 306 495 P
(way \320 using characters such as \134n and \134r) 306 481 T
(.) 495.86 481 T
1 10 Q
(2) 498.85 485.8 T
1 12 Q
2.8 (Glob-style matching is available by using the) 306 462 P
-0.13 (\337ag -glob instead of -regexp.  It works exactly as) 306 448 P
1 (in T) 306 434 P
1 (cl\325) 325.82 434 P
1 (s case command.  Since glob matches an) 337.81 434 P
2.4 (entire string by default, the equivalents to the) 306 420 P
1.56 (previous example look slightly dif) 306 406 P
1.56 (ferent.  Note) 476.6 406 P
(the asterisks.) 306 392 T
(T) 306 373 T
(o stop only on de\336nitions:) 312.49 373 T
3 11 Q
(expect2.4> b -glob "proc p4 *") 324 354.67 T
1 12 Q
(On calls to p4:) 306 340 T
3 11 Q
(expect2.5> b -glob "p4") 324 321.67 T
1 12 Q
(On commands which call p4:) 306 307 T
3 11 Q
(expect2.6> b -glob "*\134\134\134[p4 *") 324 288.67 T
1 12 Q
1.02 (Expressions can be combined with patterns just) 306 274 P
0.2 (as if they were with line numbers.  For example,) 306 260 P
0.41 (to break on a call to p4 only when foo is greater) 306 246 P
(than three:) 306 232 T
3 11 Q
-0.31 (expect2.7> b -glob p4 if {$foo>3}) 324 213.67 P
1 12 Q
4.76 (Regular expression patterns save the strings) 306 199 P
2.6 (which matched any patterns in the array) 306 185 P
2 F
2.6 (dbg) 519.01 185 P
1 F
2.6 (.) 537 185 P
0.77 (The part of the command matched by the entire) 306 171 P
1.42 (pattern is saved in $dbg\0500\051.  Up to 9 parenthe-) 306 157 P
1.81 (sized subpattern matches are stored in $dbg\0501\051) 306 143 P
(through $dbg\0509\051.) 306 129 T
306 102 540 117 C
315 115 459 115 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.53 (2. Using braces instead of double quotes permits) 324 95.33 P
1.31 (the previous pattern to be simpli\336ed to {\134[p4 }.) 324 83.33 P
2.39 (However) 324 71.33 P
2.39 (, the braces prevent the possibility of) 360.23 71.33 P
-0.17 (explicitly matching escaped characters such as \134n.) 324 59.33 P
FMENDPAGE
%%EndPage: "8" 7
%%Page: "9" 7
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(9) 553 27 T
1 12 Q
1.9 (For example, the name of a variable being set) 72 730 P
1.69 (can be accessed as $dbg\0501\051 after the following) 72 716 P
(breakpoint:) 72 702 T
3 11 Q
(expect2.8> b -re {^set \050[^ ]\051+ }) 90 683.67 T
1 12 Q
0.17 (This can be used to construct more sophisticated) 72 669 P
0.81 (breakpoints.  For example, the following break-) 72 655 P
2.36 (point occurs only when the variable being set) 72 641 P
(was already set.) 72 627 T
3 11 Q
-0.22 (expect2.9> b -re {^set \050[^ ]\051+ }) 90 608.67 P
(if {info exists $dbg\0501\051}) 90 597.67 T
0 12 Q
(Br) 72 578 T
(eakpoint Actions) 85.11 578 T
1 F
-0.17 (Breakpoints may trigger actions.  The default ac-) 72 559 P
0.46 (tion prints the breakpoint id and de\336nition.  It is) 72 545 P
0.04 (possible to replace this action with any T) 72 531 P
0.04 (cl state-) 268.32 531 P
1.31 (ment.  As an example, the following command) 72 517 P
1.8 (de\336nes a breakpoint which prints a descriptive) 72 503 P
2.45 (message whenever the variable a is being de-) 72 489 P
(\336ned:) 72 475 T
3 11 Q
-0.22 (expect2.1> b -re "^set a " then {) 90 456.67 P
(+>) 90 445.67 T
(puts "a is being set") 126 445.67 T
3 9 Q
(1) 264.43 450.07 T
3 11 Q
(+>) 90 434.67 T
(puts "old value of a = $a") 126 434.67 T
(+> }) 90 423.67 T
1 12 Q
(When run, it looks like this:) 72 409 T
3 11 Q
(expect2.2> c) 90 390.67 T
(a is being set) 90 379.67 T
(2: set a 2) 90 368.67 T
(expect3.3> c) 90 357.67 T
(a is being set) 90 346.67 T
(old value of a = 2) 90 335.67 T
(2: set a 3) 90 324.67 T
(expect3.4> c) 90 313.67 T
(a is being set) 90 302.67 T
(old value of a = 3) 90 291.67 T
(2: set a 5) 90 280.67 T
1 12 Q
2.88 (Each time the breakpoint occurs, the old and) 72 266 P
1.95 (new value of a are displayed.  Notice that the) 72 252 P
0.56 (\336rst time the breakpoint occurred, a was not de-) 72 238 P
0.87 (\336ned.  In this case, $a was meaningless and the) 72 224 P
1.73 (puts command was not executed.  If there had) 72 210 P
1.86 (been further statements in the breakpoint, they) 72 196 P
2.4 (would also have been skipped.  Implicit error) 72 182 P
(messages generated by actions are discarded.) 72 168 T
1.17 (Error messages generated in breakpoint expres-) 72 149 P
0.31 (sions are also discarded.  It is assumed that such) 72 135 P
-0.26 (errors are just variables temporarily out of scope.) 72 121 P
72 78 306 93 C
81 91 225 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
-0.13 (1. Expect prompts with \322+>\323 when an incomplete) 90 71.33 P
(command has been entered.) 90 59.33 T
1 12 Q
3.08 (By default, breakpoints stop execution of the) 324 730 P
-0.29 (program.  It is possible to tell the debugger not to) 324 716 P
1.71 (stop by using the commands c, s, n, or r from) 324 702 P
(within an action.) 324 688 T
0.26 (This can be used to trace variables.  T) 324 669 P
0.26 (o illustrate) 506.77 669 P
-0.06 (a dif) 324 655 P
-0.06 (ferent ef) 345.37 655 P
-0.06 (fect, the following breakpoint prints) 385.37 655 P
0.15 (out the name of each procedure as it is being de-) 324 641 P
(\336ned.) 324 627 T
3 11 Q
-1.35 (expect2.1> b -re \322proc \050p.\051\323 then) 342 608.67 P
({) 342 597.67 T
(+>) 342 586.67 T
(puts \322proc $dbg\0501\051 defined\323) 378 586.67 T
(+>) 342 575.67 T
(c) 378 575.67 T
(+> }) 342 564.67 T
(0) 342 553.67 T
1 12 Q
-0.1 (The c command in the last line, allows execution) 324 539 P
(to continue after each breakpoint.) 324 525 T
3 11 Q
(expect2.2> c) 342 506.67 T
(proc p4 defined) 342 495.67 T
(proc p3 defined) 342 484.67 T
(proc p2 defined) 342 473.67 T
(proc p1 defined) 342 462.67 T
1 12 Q
-0.08 (The following breakpoint causes the debugger to) 324 448 P
1.11 (break after the return of any procedure that has) 324 434 P
(called p4.) 324 420 T
3 11 Q
(expect2.1> b -glob "p4" then "r") 342 401.67 T
1 12 Q
3.13 (The following command prints out the string) 324 387 P
2.12 (\322entering p4\323 when p4 is invoked.  Execution) 324 373 P
(continues for four more steps after that.) 324 359 T
3 11 Q
(expect2.2> b -re "^p4 " then {) 342 340.67 T
(+>) 342 329.67 T
(puts "entering p4") 378 329.67 T
(+>) 342 318.67 T
(s 4) 378 318.67 T
(+> }) 342 307.67 T
1 12 Q
0.02 (Multiple breakpoints can occur on the same line.) 324 293 P
-0.07 (All corresponding actions are executed.  At most) 324 279 P
1.09 (one debugger command will be executed, how-) 324 265 P
6.25 (ever) 324 251 P
6.25 (.  For example, if breakpoints trigger) 343.98 251 P
0.23 (commands containing both \322s 1\323 and \322s 2\323, only) 324 237 P
0.87 (the second \050or last in general\051 will have any ef-) 324 223 P
(fect.) 324 209 T
0 F
-0.14 (Limitations in Br) 324 187 P
-0.14 (eakpoints Actions and Inter-) 412.14 187 P
(active Commands) 324 173 T
1 F
2.23 (Debugger commands speci\336ed in a breakpoint) 324 154 P
1.22 (action occur only after all the breakpoints have) 324 140 P
1.8 (completed.  For example, the following break-) 324 126 P
0.05 (point appears to print out the old and new values) 324 112 P
(of every variable about to be set.) 324 98 T
3 11 Q
-0.22 (expect2.1> b -re {^set \050[^ ]+\051 }) 342 79.67 P
(then {) 342 68.67 T
(+>) 342 57.67 T
(puts \322old $dbg\0501\051 = [set) 378 57.67 T
FMENDPAGE
%%EndPage: "9" 8
%%Page: "10" 8
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(10) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
3 11 Q
($dbg\0501\051]\323) 72 730.67 T
(+>) 72 719.67 T
(n) 108 719.67 T
(+>) 72 708.67 T
(puts \322new $dbg\0501\051 = [set) 108 708.67 T
($dbg\0501\051]\323) 72 697.67 T
(+> }) 72 686.67 T
1 12 Q
1.28 (However) 54 672 P
1.28 (, the debugger does not actual execute) 97.48 672 P
1.02 (the next procedure call in the program until the) 54 658 P
2.83 (breakpoint action completes.  This breakpoint) 54 644 P
1.42 (therefore prints the old value twice, incorrectly) 54 630 P
(claiming that the latter is the new value.) 54 616 T
3 11 Q
(expect4.7> c) 72 597.67 T
(old a = 2) 72 586.67 T
(new a = 2) 72 575.67 T
1 12 Q
-0.05 (In this case, it is possible to get the new value by) 54 561 P
1.97 (just omitting the last puts.  The debugger will) 54 547 P
0.27 (then automatically print the new value as part of) 54 533 P
(echoing the next command to be executed.) 54 519 T
3 11 Q
(expect4.7>) 72 500.67 T
(old a = 2) 72 489.67 T
(2: set a 3) 72 478.67 T
1 12 Q
1.78 (This example illustrates a limitation of the de-) 54 464 P
1.65 (bugger) 54 450 P
1.65 (.  The debugger does not use a separate) 86.65 450 P
1.64 (thread of control, and therefore does not allow) 54 436 P
0.59 (arbitrary automation of its own commands.  For) 54 422 P
1.8 (more discussion on these limitations see \322Cur-) 54 408 P
(rent Limitations and Future W) 54 394 T
(ork\323 on page) 198.95 394 T
(15.) 263.9 394 T
0 F
(General Form of Br) 54 372 T
(eakpoints) 156.04 372 T
1 F
0.02 (Expressions and actions may be combined.  This) 54 353 P
1.95 (follows the syntax of T) 54 339 P
1.95 (cl\325) 172.23 339 P
1.95 (s if-then \050no \322else\323\051.) 184.23 339 P
0.86 (For example, the following command prints the) 54 325 P
(value of $foo whenever it is non-zero.) 54 311 T
3 11 Q
(expect2.1> b if {$foo} then {) 72 292.67 T
(puts "foo = $foo") 108 281.67 T
(}) 72 270.67 T
1 12 Q
2.58 (The general form of the breakpoint command) 54 256 P
0.69 (permits up to one location \050speci\336ed by pattern,) 54 242 P
2.36 (or line number and \336lename\051, one expression,) 54 228 P
0.63 (and one action.  They must appear in this order) 54 214 P
0.63 (,) 285 214 P
(but are all optional.) 54 200 T
3.31 (If a location is provided or the if-expression) 54 181 P
0.53 (doesn\325) 54 167 P
0.53 (t look like a line number and/or \336lename,) 85.76 167 P
1.13 (the \322if\323 token may be omitted.  If an if-expres-) 54 153 P
2.12 (sion has already appeared, the \322then\323 token is) 54 139 P
0.74 (also optional.  For example, the following com-) 54 125 P
(mands have the same ef) 54 111 T
(fect:) 168.36 111 T
3 11 Q
(expect2.1> b if {$foo} then {) 72 92.67 T
(+>) 72 81.67 T
(puts "foo = $foo") 108 81.67 T
(+>}) 72 70.67 T
(0) 72 59.67 T
(expect2.2> b {$foo} {) 324 730.67 T
(+>) 324 719.67 T
(puts "foo = $foo") 360 719.67 T
(+>}) 324 708.67 T
(1) 324 697.67 T
1 12 Q
1.91 (When the \336rst ar) 306 683 P
1.91 (gument resembles both a line) 391.79 683 P
-0.13 (number and expression, it is assumed to be a line) 306 669 P
0.02 (number) 306 655 P
0.02 (.  The following command breaks on line) 341.98 655 P
(17:) 306 641 T
3 11 Q
(expect2.3> b 17) 324 622.67 T
(2) 324 611.67 T
0 12 Q
(Listing Br) 306 592 T
(eakpoints) 358.1 592 T
1 F
2.43 (If no ar) 306 573 P
2.43 (guments are supplied, the b command) 345.95 573 P
0.4 (lists all breakpoints.  The following example as-) 306 559 P
0.81 (sumes the previous three breakpoints have been) 306 545 P
2.48 (set and creates two more.  Notice that break-) 306 531 P
(points zero and one are identical.) 306 517 T
3 11 Q
(expect2.4> b -re "^p4") 324 498.67 T
(3) 324 487.67 T
(expect2.5> b zz.exp:17 if {$foo}) 324 476.67 T
(4) 324 465.67 T
(expect2.6> b) 324 454.67 T
-0.38 (breakpoint 4: zz.exp:23 if {$foo}) 324 443.67 P
(breakpoint 3: -re "^p4" if {^p4}) 324 432.67 T
(breakpoint 2: b 17) 324 421.67 T
(breakpoint 1: if {$foo} then {) 324 410.67 T
(puts "foo = $foo") 360 399.67 T
(}) 324 388.67 T
(breakpoint 0: if {$foo} then {) 324 377.67 T
(puts "foo = $foo") 360 366.67 T
(}) 324 355.67 T
1 12 Q
0.73 (Each breakpoint is identi\336ed by an integer) 306 341 P
0.73 (.  For) 512.89 341 P
1.55 (example, breakpoint four occurs if $foo is true) 306 327 P
(just before line 23 is executed in \336le zz.exp.) 306 313 T
2.25 (When multiple breakpoints occur on the same) 306 294 P
1.98 (line, the actions are executed in the order that) 306 280 P
(they are listed by the b command.) 306 266 T
0 F
(Deleting Br) 306 244 T
(eakpoints) 364.74 244 T
1 F
1.02 (A breakpoint can be deleted with the command) 306 225 P
1.5 (\322b -#\323 where # is the breakpoint number) 306 211 P
1.5 (.  The) 509.36 211 P
(following command deletes breakpoint 4.) 306 197 T
3 11 Q
(expect2.7> b -4) 324 178.67 T
1 12 Q
1.12 (All breakpoints may be deleted by omitting the) 306 164 P
(number) 306 150 T
(.  For example:) 341.98 150 T
3 11 Q
(expect2.8> b -) 324 131.67 T
0 14 Q
(The \322h\323 command \320 \322Help\323) 306 108.67 T
1 12 Q
1.02 (The) 306 89 P
2 F
1.02 (h) 328.67 89 P
1 F
1.02 ( command prints a short listing of debug-) 334.66 89 P
4.61 (ger commands, ar) 306 75 P
4.61 (guments and other helpful) 400.6 75 P
(information.) 306 61 T
FMENDPAGE
%%EndPage: "10" 9
%%Page: "11" 9
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(11) 548.01 27 T
0 14 Q
(Changing Pr) 72 728.67 T
(ogram Behavior) 148.33 728.67 T
1 12 Q
0.4 (When the debugger is active, the variable dbg is) 72 709 P
0.31 (de\336ned in the global scope.  When the debugger) 72 695 P
0.16 (is not active, dbg is not de\336ned.  This allows T) 72 681 P
0.16 (cl) 297.34 681 P
1.4 (applications to behave dif) 72 667 P
1.4 (ferently when the de-) 199.56 667 P
(bugger is running.) 72 653 T
0 14 Q
(Changing Debugger Behavior) 72 627.67 T
1 12 Q
0.21 (By default, long commands are truncated so that) 72 608 P
0.32 (the debugger can \336t them on a line.  This occurs) 72 594 P
1.1 (when the debugger prints out a command to be) 72 580 P
0.28 (executed and also in the listing from the w com-) 72 566 P
(mand.) 72 552 T
2.35 (The w command has a -width \337ag which can) 72 533 P
-0.13 (change the current printing width.  It takes a new) 72 519 P
1.5 (width as an ar) 72 505 P
1.5 (gument.  For example to display) 143.24 505 P
(long commands \050such as procedure de\336nitions\051:) 72 491 T
3 11 Q
(expect2.2> w -w 300) 90 472.67 T
1 12 Q
2.75 (Because of the parameter substitutions, the w) 72 458 P
3.58 (command may try to display extremely long) 72 444 P
(lines.  Imagine the following script:) 72 430 T
3 11 Q
(puts [exec cat /etc/passwd]) 90 411.67 T
1 12 Q
1.64 (When the debugger is run, w command output) 72 397 P
2.92 (will be truncated unless the printing width is) 72 383 P
(quite lar) 72 369 T
(ge.) 111.42 369 T
3 11 Q
(2: exec cat /etc/passwd) 90 350.67 T
(expect3.1> s) 90 339.67 T
(1: puts [exec cat /etc/passwd]) 90 328.67 T
(expect2.2> w) 90 317.67 T
(*0: expect -D 1 debug-test3.exp) 90 306.67 T
-0.51 ( 1: puts {root:Xu.VjBHD/xM7E:0:1:) 90 295.67 P
(Operator:/:/bin/csh) 90 284.67 T
(nobody:*:65534:65534::/...) 90 273.67 T
(expect2.3> w -w 200) 90 262.67 T
(expect2.4> w) 90 251.67 T
(*0: expect -D 1 debug-test3.exp) 90 240.67 T
-0.51 ( 1: puts {root:Xu.VjBHD/xM7E:0:1:) 90 229.67 P
(Operator:/:/bin/csh) 90 218.67 T
(nobody:*:65534:65534::/:) 90 207.67 T
(daemon:*:1:1::/:) 90 196.67 T
(sys:*:2:2::/:/bin/csh) 90 185.67 T
(bin:*:3:3::/bin:) 90 174.67 T
(uucp:*:4:8::/var/spool/uucppubli) 90 163.67 T
(c:) 90 152.67 T
(news:*:6:6::/var/spool/news:/) 90 141.67 T
(bin...) 90 130.67 T
(expect2.5>) 90 119.67 T
1 12 Q
-0.17 (When output is truncated, an ellipsis is appended) 72 105 P
-0.02 (to the end.  The default width is 75 which allows) 72 91 P
1.39 (some space at the beginning of the line for the) 72 77 P
(procedure call depth information.) 72 63 T
2.5 (By default, no other output formatting is per-) 324 730 P
2.5 (formed.  But even short statements can cause) 324 716 P
1.74 (lots of scrolling.  The following declaration of) 324 702 P
0.06 (p4 is less then 75 characters but still takes sever-) 324 688 P
(al lines.) 324 674 T
3 11 Q
(% expect -D 1 debug-test.exp) 342 655.67 T
(set b 1) 342 644.67 T
(expect2.1> s) 342 633.67 T
(1: proc p4 {} {) 342 622.67 T
(return [) 378 611.67 T
(expr 5+[expr 1+$x]]) 414 600.67 T
(}) 342 589.67 T
1 12 Q
0.21 (The -compress \337ag with ar) 324 575 P
0.21 (gument 1 tells the de-) 453.21 575 P
6.63 (bugger to display control characters using) 324 561 P
(escape sequences.  For example:) 324 547 T
3 11 Q
(expect2.2> w -c 1) 342 528.67 T
(expect2.3> w) 342 517.67 T
(*0: expect -D 1 debug-test.exp) 342 506.67 T
-3.13 ( 1: proc p4 {x} {\134n\134treturn [\134n\134t) 342 495.67 P
(expr 5+[expr 1+$x]]\134n}) 342 484.67 T
1 12 Q
1.25 (The compressed output is useful for preventing) 324 470 P
1.64 (excessive scrolling, and also for displaying the) 324 456 P
0.02 (precise characters that should be used in order to) 324 442 P
(match patterns in breakpoints.) 324 428 T
0.81 (T) 324 409 P
0.81 (o revert to uncompressed output, use the same) 330.49 409 P
(\337ag with value 0.) 324 395 T
3 11 Q
(expect2.4> w -c 0) 342 376.67 T
1 12 Q
0.04 (W) 324 362 P
0.04 (ith no value speci\336ed, \337ags to the w command) 334.84 362 P
(print out the current value.) 324 348 T
3 11 Q
(expect2.5> w -c) 342 329.67 T
(0) 342 318.67 T
(expect2.6> w -w) 342 307.67 T
(75) 342 296.67 T
0 18 Q
(V) 324 267 T
(iew of the Application) 336.32 267 T
(Pr) 324 247 T
(ogrammer) 342.66 247 T
1 12 Q
-0.21 (This section describes how to incorporate the de-) 324 226 P
(bugger into a T) 324 212 T
(cl application.) 396.78 212 T
3.56 (1\051 Include the \336le) 324 193 P
2 F
3.56 (Dbg.h) 426.18 193 P
1 F
3.56 ( in any source that) 455.82 193 P
(makes calls to the debugger) 324 179 T
(.) 456.58 179 T
3 11 Q
(#include "Dbg.h") 342 160.67 T
1 12 Q
2.77 (2\051 T) 324 146 P
2.77 (o start the debugger) 346.24 146 P
2.77 (, call) 448.99 146 P
2 F
2.77 (Dbg_On) 480.84 146 P
1 F
2.77 (.  This) 522.15 146 P
1.39 (does not have to be called at program start but) 324 132 P
(can be called at any time.) 324 118 T
1 10 Q
(1) 445.9 122.8 T
324 90 558 105 C
333 103 477 103 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
1.12 (1. Dbg_On should not be called directly from a) 342 83.33 P
0.64 (signal handler but indirectly through T) 342 71.33 P
0.64 (cl\325) 499.11 71.33 P
0.64 (s signal) 509.1 71.33 P
(handling mechanism.) 342 59.33 T
FMENDPAGE
%%EndPage: "11" 10
%%Page: "12" 10
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(12) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
3 11 Q
(void) 72 730.67 T
(Dbg_On\050) 72 719.67 T
(Tcl_Interp *interp,) 108 708.67 T
(int immediate\051;) 108 697.67 T
1 12 Q
0.69 (If the \322immediate\323 parameter is 1, the debugger) 54 683 P
3.65 (begins interacting with the user immediately) 54 669 P
3.65 (.) 285 669 P
0.6 (Otherwise, the debugger waits until a new com-) 54 655 P
4.33 (mand is about to be executed by T) 54 641 P
4.33 (cl_Eval.) 248.36 641 P
0.14 (Forcing the debugger to begin interacting imme-) 54 627 P
2.02 (diately is useful in slow systems calls such as) 54 613 P
(\322read\323.) 54 599 T
(T) 54 580 T
(ypical places to call Dbg_On are:) 60.49 580 T
0 F
(SIGINT Handler) 54 558 T
1 F
0.73 (By invoking Dbg_On on receipt of a signal, the) 54 539 P
-0.06 (user can gain control at any time during program) 54 525 P
(execution.) 54 511 T
2.5 (As an example, Expect enables this using the) 54 492 P
0.53 (command-line ar) 54 478 P
0.53 (gument -D 0.  Once the debug-) 135.92 478 P
3.72 (ger is running, SIGINT can still be used to) 54 464 P
(regain control.) 54 450 T
0 F
(Pr) 54 428 T
(ogram Start-up) 66.44 428 T
1 F
1.07 (By invoking Dbg_On at program start, the user) 54 409 P
(gains control over the application immediately) 54 395 T
(.) 276.74 395 T
-0.16 (As an example, Expect uses the ar) 54 376 P
-0.16 (gument \322-D 1\323) 217.04 376 P
(to start this way) 54 362 T
(.) 129.51 362 T
0 F
(By Application Command) 54 340 T
1 F
1.4 (Dbg_On may be called by an application com-) 54 321 P
2.98 (mand.  A script may then start the debugger) 54 307 P
2.69 (interaction when the command appears in the) 54 293 P
(script.) 54 279 T
0.74 (The debugger does not create a command name) 54 260 P
0.43 (association because it has to exist in order to in-) 54 246 P
0.13 (voke the debugger) 54 232 P
0.13 (.  Also, because this is the one) 142.19 232 P
2.07 (command name that will always be present in) 54 218 P
1.48 (the application, choosing it is best done by the) 54 204 P
0.41 (application writer) 54 190 P
0.41 (.  An example de\336nition might) 138.69 190 P
0.91 (be the name \322debugger\323, using the ar) 54 176 P
0.91 (guments 0) 237.45 176 P
0.94 (and 1 similarly to the -D \337ag, described earlier) 54 162 P
0.94 (.) 285 162 P
-0.02 (But all sorts of other behavior could conceivably) 54 148 P
(be envisioned.) 54 134 T
2 F
1.41 (Dbg_Off) 54 115 P
1 F
1.41 ( disables any activity by the debugger) 95.98 115 P
1.41 (.) 285 115 P
0.47 (All debugger command names and variables are) 54 101 P
1.07 (removed from the interpreter) 54 87 P
1.07 (.  Dbg_On may be) 195.44 87 P
3.44 (called repeatedly without error before calling) 54 73 P
(Dbg_Of) 54 59 T
(f.) 93.09 59 T
3 11 Q
(void) 324 730.67 T
(Dbg_Off\050) 324 719.67 T
(Tcl_Interp *interp\051;) 360 708.67 T
2 12 Q
0.07 (Dbg_Active) 306 694 P
1 F
0.07 ( returns 1 or 0 depending on whether) 362.62 694 P
(the debugger is on or of) 306 680 T
(f.) 420.03 680 T
3 11 Q
(int) 324 661.67 T
(Dbg_Active\050) 324 650.67 T
(Tcl_Interp *interp\051;) 360 639.67 T
1 12 Q
0.81 (Several functions are available to customize the) 306 625 P
(debugger) 306 611 T
(.  They are described below) 349.97 611 T
(.) 481.74 611 T
2 F
5.07 (Dbg_Ar) 306 592 P
5.07 (gcAr) 344.2 592 P
5.07 (gv) 367.07 592 P
1 F
5.07 ( informs the debugger of the) 378.39 592 P
0.31 (command line used to invoke the application.  It) 306 578 P
-0.18 (is used to display the \336rst line of the stack.  If the) 306 564 P
2.59 (\322copy\323 parameter is 1, the ar) 306 550 P
2.59 (gv array will be) 456.62 550 P
0.66 (copied to a new area of memory) 306 536 P
0.66 (.  This is useful) 463.73 536 P
2.75 (with applications \050e.g., Tk\051 which modify the) 306 522 P
(ar) 306 508 T
(gv array) 315.1 508 T
(.) 353.95 508 T
3 11 Q
(char **) 324 489.67 T
(Dbg_ArgcArgv\050) 324 478.67 T
(int argc,) 360 467.67 T
(char *argv[],) 360 456.67 T
(int copy\051;) 360 445.67 T
1 12 Q
0.43 (A pointer to the new memory is returned so that) 306 431 P
-0.05 (it can be freed when the debugger is no longer in) 306 417 P
0.22 (use.  The individual elements are not reallocated) 306 403 P
2.71 (and should not be freed.  0 is returned if no) 306 389 P
(memory is allocated.) 306 375 T
2 F
2.8 (Dbg_Interactor) 306 356 P
1 F
2.8 ( names a function that will be) 381.28 356 P
(called by the debugger to interact with the user) 306 342 T
(.) 530.51 342 T
3 11 Q
(Dbg_InterProc *) 324 323.67 T
(Dbg_Interactor\050) 324 312.67 T
(Tcl_Interp interp,) 360 301.67 T
(Dbg_InterProc *) 360 290.67 T
(interactor\051) 458.88 290.67 T
1 12 Q
0.92 (Dbg_Interactor allows the debugger to have the) 306 276 P
1.02 (same look and feel as that of the application it-) 306 262 P
-0.15 (self.  For instance, Expect uses its own interactor) 306 248 P
(by calling:) 306 234 T
3 11 Q
(Dbg_Interactor\050) 324 215.67 T
(interp,) 360 204.67 T
(exp_interact\051;) 360 193.67 T
2 12 Q
(Dbg_InterPr) 306 179 T
(oc) 367.51 179 T
1 F
( is de\336ned as:) 378.84 179 T
3 11 Q
(typedef int \050Dbg_InterProc\051) 324 160.67 T
(\050Tcl_Interp *interp\051;) 360 149.67 T
1 12 Q
0.29 (If an application has no interactor) 306 135 P
0.29 (, a very simple) 468.51 135 P
0.95 (interactor \050similar to that in tclT) 306 121 P
0.95 (est\051 is provided) 464.15 121 P
2.32 (automatically) 306 107 P
2.32 (.  The default interactor reads its) 370.51 107 P
(input from the standard input.) 306 93 T
3.03 (Interactors should prompt for new commands) 306 74 P
7.19 (and evaluate them.  If commands return) 306 60 P
FMENDPAGE
%%EndPage: "12" 11
%%Page: "13" 11
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(13) 548.01 27 T
1 12 Q
-0.24 (TCL_OK or TCL_ERROR, the interactor should) 72 730 P
-0.14 (simply reprompt for more commands.  \050Frequent) 72 716 P
2.36 (user errors should be expected during interac-) 72 702 P
1.25 (tion.\051  If commands return TCL_RETURN, the) 72 688 P
-0.03 (interactor should return TCL_OK.  The behavior) 72 674 P
1.36 (for commands which return other return values) 72 660 P
(is unde\336ned.) 72 646 T
0.1 (Dbg_Interactor returns the previous de\336nition of) 72 627 P
(its interactor ar) 72 613 T
(gument.) 144.39 613 T
2 F
0.77 (Dbg_Ignor) 72 594 P
0.77 (eFuncs) 124.86 594 P
1 F
0.77 ( names a function that will be) 159.49 594 P
0.64 (called by the debugger to decide what functions) 72 580 P
(should be ignored.) 72 566 T
3 11 Q
(Dbg_IgnoreFuncsProc) 90 547.67 T
(Dbg_IgnoreFuncs\050) 90 536.67 T
(Tcl_Interp *interp,) 126 525.67 T
(Dbg_IgnoreFuncsProc) 126 514.67 T
(*ignoreproc\051;) 162 503.67 T
2 12 Q
(Dbg_Ignor) 72 489 T
(eFuncsPr) 124.86 489 T
(oc) 171.04 489 T
1 F
( is de\336ned as:) 182.36 489 T
3 11 Q
(typedef int\050Dbg_IgnoreFuncsProc\051) 90 470.67 T
(\050Tcl_Interp *interp,) 126 459.67 T
( char *funcname\051;) 126 448.67 T
1 12 Q
2.17 (If funcname should be ignored, \050*ignoreproc\051\050) 72 434 P
1.64 (funcname\051 should return 1, otherwise it should) 72 420 P
(return 0.) 72 406 T
0.23 (For instance, Expect evaluates the T) 72 387 P
0.23 (cl procedure) 246.16 387 P
1.78 (\322prompt1\323 each time it prepares to prompt the) 72 373 P
0.06 (user and \322prompt2\323 if the user has entered a par-) 72 359 P
3.53 (tial command.  Expect\325) 72 345 P
3.53 (s procedure to ignore) 193.84 345 P
(functions is de\336ned as:) 72 331 T
3 11 Q
(static int) 90 312.67 T
(ignore_procs\050char *s\051) 90 301.67 T
({) 90 290.67 T
(return\050) 126 279.67 T
(\050s[0] == 'p'\051 &&) 162 268.67 T
(\050s[1] == 'r'\051 &&) 162 257.67 T
(\050s[2] == 'o'\051 &&) 162 246.67 T
(\050s[3] == 'm'\051 &&) 162 235.67 T
(\050s[4] == 'p'\051 &&) 162 224.67 T
(\050s[5] == 't'\051 &&) 162 213.67 T
(\050\050s[6] == '1'\051 ||) 162 202.67 T
( \050s[6] == '2'\051\051 &&) 162 191.67 T
(           \050s[7] == '\1340'\051\051;) 90 180.67 T
(}) 90 169.67 T
1 12 Q
2.3 (While avoiding strcmp may be excessive, this) 72 155 P
0.54 (function should nonetheless be written ef) 72 141 P
0.54 (\336cient-) 272.02 141 P
(ly since it is called very frequently) 72 127 T
(.) 237.1 127 T
0 18 Q
(Implementation) 324 726 T
1 12 Q
-0.12 (This section describes some of the more interest-) 324 705 P
0.72 (ing parts of the debugger) 324 691 P
0.72 (.  It is not necessary to) 446.11 691 P
-0.06 (read this in order to use the debugger ef) 324 677 P
-0.06 (fectively) 513.82 677 P
-0.06 (.) 555 677 P
0.47 (The debugger is approximately 1) 324 658 P
0.47 (100 lines) 483.97 658 P
1 10 Q
0.39 (1) 528.08 662.8 P
1 12 Q
0.47 ( of C) 533.08 658 P
-0.03 (\050no T) 324 644 P
-0.03 (cl\051 which compiles to 13K on a Sun 4.  The) 349.44 644 P
-0.02 (debugger is portable to any platform that already) 324 630 P
1.75 (has T) 324 616 P
1.75 (cl.  The debugger requires no changes to) 351.23 616 P
-0.29 (the T) 324 602 P
-0.29 (cl core although it does require access to the) 347.85 602 P
(T) 324 588 T
(cl internals.) 330.49 588 T
0.05 (The debugger uses T) 324 569 P
0.05 (cl\325) 423.55 569 P
0.05 (s trace facility to get con-) 435.54 569 P
2.34 (trol before execution of every procedure.  T) 324 555 P
2.34 (cl) 549.34 555 P
2.69 (temporarily passes control to the function de-) 324 541 P
1.1 (bugger_trap.  This function determines whether) 324 527 P
2.8 (actions should occur) 324 513 P
2.8 (, whether user interaction) 427.71 513 P
-0.17 (should occur) 324 499 P
-0.17 (, and whether execution should con-) 384.97 499 P
(tinue.) 324 485 T
0.07 (The debugger_trap function can be thought of as) 324 466 P
0.14 (three distinct parts that nonetheless work togeth-) 324 452 P
(er very closely:) 324 438 T
2 F
(pr) 333 419 T
(elude) 343.22 419 T
1 F
(:) 369.2 419 T
0.2 (Determine if the debugger should) 396 419 P
0.27 (interact with the user) 396 405 P
0.27 (, or return to) 497.24 405 P
0.87 (continue execution of the current) 396 391 P
(function.) 396 377 T
2 F
(interactor) 333 358 T
1 F
(:) 380.97 358 T
1.05 (Let the user interact with the T) 396 358 P
1.05 (cl) 549.34 358 P
(environment.) 396 344 T
2 F
(postlude) 333 325 T
1 F
(:) 373.65 325 T
0.26 (Manipulate the environment, per-) 396 325 P
6.69 (haps letting the user interact) 396 311 P
(again, or returning.) 396 297 T
-0.01 (In more detail, the) 324 278 P
2 F
-0.01 (pr) 414.91 278 P
-0.01 (elude) 425.12 278 P
1 F
-0.01 (\325) 451.1 278 P
-0.01 (s primary job is to re-) 454.44 278 P
0.86 (turn control if possible, continuing execution of) 324 264 P
1.27 (the current command.  It attempts to do this as) 324 250 P
3.34 (quickly and ef) 324 236 P
3.34 (\336ciently as possible, since this) 399.07 236 P
0.87 (code is called upon every trap whether or not it) 324 222 P
(inevitably leads to user) 324 208 T
(-interaction.) 434.69 208 T
-0.2 (For example, there is no reason to trap on debug-) 324 189 P
2.48 (ger commands.  They have to be executed in) 324 175 P
0.07 (order for the debugger itself to run.  But T) 324 161 P
0.07 (cl pro-) 526.29 161 P
5.86 (vides no selective trap mechanism, so the) 324 147 P
0.13 (prelude simply has to return in such cases.) 324 133 P
1 10 Q
0.11 (2) 528.1 137.8 P
1 12 Q
0.13 (  The) 533.09 133 P
0.6 (prelude also returns if the command about to be) 324 119 P
2.09 (executed is interactive \050i.e., executed from the) 324 105 P
324 78 558 93 C
333 91 477 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
0.39 (1. The code has a dearth of comments, hopefully) 342 71.33 P
(somewhat ameliorated by this paper) 342 59.33 T
(.) 485.79 59.33 T
FMENDPAGE
%%EndPage: "13" 12
%%Page: "14" 12
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(14) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
1.41 (debugger interaction\051 or a function that the ap-) 54 730 P
(plication has requested be ignored.) 54 716 T
3.69 (The prelude next evaluates all of the break-) 54 697 P
0.48 (points.  If all breakpoints are unsuccessful or all) 54 683 P
0.7 (successful breakpoints have actions, the prelude) 54 669 P
(returns.) 54 655 T
3.12 (The prelude then checks if the previous user) 54 636 P
-0.29 (command was n, s, c, or r) 54 622 P
-0.29 (.  If so, the environment) 174.52 622 P
2.02 (is examined to see if the requested number of) 54 608 P
3.31 (steps occurred, the requested stack level was) 54 594 P
0.17 (reached, etc.  If the request was not satis\336ed, the) 54 580 P
(prelude returns.) 54 566 T
0.98 (If the prelude has not returned at this point, the) 54 547 P
1.12 (next phase of the debugger_trap function is en-) 54 533 P
(tered: the interactor) 54 519 T
(.) 147.26 519 T
0.9 (The) 54 500 P
2 F
0.9 (interactor) 76.55 500 P
1 F
0.9 ( executes debugger commands as) 124.52 500 P
0.71 (well as all other T) 54 486 P
0.71 (cl and application commands.) 142.62 486 P
5.76 (V) 54 472 P
5.76 (ery little special processing is performed.) 61.33 472 P
0.29 (Commands are passed directly to) 54 458 P
3 11 Q
0.65 (Tcl_Eval) 217.69 458 P
1 12 Q
0.29 (.  If) 270.43 458 P
0.16 (the command returns) 54 444 P
3 11 Q
0.35 (TCL_ERROR) 158.74 444 P
1 12 Q
0.16 (, the interactor) 218.07 444 P
3.41 (ignores it, and continues interacting with the) 54 430 P
-0.28 (user) 54 416 P
-0.28 (.  It is expected that users will make mistakes) 73.32 416 P
(while interactively typing commands.) 54 402 T
0.17 (The debugger commands themselves are simple.) 54 383 P
2.25 (They record their ar) 54 369 P
2.25 (guments and return.  This) 156.1 369 P
-0.28 (may seem surprising, but the fact is that the com-) 54 355 P
2.31 (mands all execute in the wrong context.  The) 54 341 P
1.97 (current context is the debugger command, and) 54 327 P
1.02 (depending on how the command was originally) 54 313 P
2.47 (invoked by the user) 54 299 P
2.47 (, can be arbitrarily deeply) 155.21 299 P
0.26 (nested beyond the next command in the applica-) 54 285 P
0.69 (tion to be executed.  Getting back to the correct) 54 271 P
0.74 (context from a debugger command is very indi-) 54 257 P
(rect and complicated.) 54 243 T
0.22 (In order for the debugger to get back to the right) 54 224 P
0.98 (context, the interactor exits after each debugger) 54 210 P
0.89 (command.  This is forced by having the debug-) 54 196 P
0.36 (ger commands end by returning TCL_RETURN) 54 182 P
-0.07 (rather than TCL_OK.  The interactor then passes) 54 168 P
(control to the postlude.) 54 154 T
54 126 288 141 C
63 139 207 139 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
-0.01 (2. This is not a criticism of T) 72 119.33 P
-0.01 (cl.  There is no point) 187.3 119.33 P
0.11 (in T) 72 107.33 P
0.11 (cl providing such functionality since it would) 87.79 107.33 P
0.18 (require a callback to a user routine anyway) 72 95.33 P
0.18 (.  This) 244.38 95.33 P
0.88 (two part decision and execution process is more) 72 83.33 P
3.05 (ef) 72 71.33 P
3.05 (\336ciently performed by combining them into) 79.59 71.33 P
(one function, as in debugger_trap here.) 72 59.33 T
1 12 Q
-0.21 (The) 306 730 P
2 F
-0.21 (postlude) 327.43 730 P
1 F
-0.21 ( processes any requests made by the) 368.08 730 P
2.07 (user while in the interactor) 306 716 P
2.07 (.  After processing,) 442.19 716 P
3.31 (the interactor is recalled for more user com-) 306 702 P
(mands, or) 306 688 T
3 11 Q
(debugger_trap) 356.3 688 T
1 12 Q
( returns entirely) 441.99 688 T
(.) 517.16 688 T
0.7 (For example, the) 306 669 P
3 11 Q
1.54 (u) 392.04 669 P
1 12 Q
0.7 ( and) 398.63 669 P
3 11 Q
1.54 (d) 423.35 669 P
1 12 Q
0.7 ( commands set the de-) 429.94 669 P
2.52 (sired scope and then pass control back to the) 306 655 P
0.6 (interactor) 306 641 P
0.6 (.  The execution scope is later restored) 351.3 641 P
(before) 306 627 T
3 11 Q
(debugger_trap) 339.63 627 T
1 12 Q
( returns.) 425.32 627 T
0 14 Q
7.71 (Accessing T) 306 601.67 P
7.71 (cl Internals and Other) 383.55 601.67 P
(Pr) 306 585.67 T
(oblems) 320.51 585.67 T
1 12 Q
1.34 (The debugger uses T) 306 566 P
1.34 (cl\325) 409.43 566 P
1.34 (s documented interfaces) 421.42 566 P
3.29 (whenever possible.  Undocumented interfaces) 306 552 P
1.05 (were used or built in a few cases.  This section) 306 538 P
0.9 (describes these and other problems encountered) 306 524 P
(while writing the debugger) 306 510 T
(.) 434.92 510 T
0 F
(Scopes) 306 488 T
1 F
2.55 (Implementation of the u and d commands re-) 306 469 P
0.6 (quired the ability to arbitrarily walk up or down) 306 455 P
1.3 (the procedure call stack.  Initially implemented) 306 441 P
(with upvar) 306 427 T
(, this ultimately proved too unwieldy) 357.15 427 T
(.) 533.61 427 T
0.48 (T) 306 408 P
0.48 (cl provides support for searching up the proce-) 312.49 408 P
4.58 (dure call stack through an internal function) 306 394 P
1.38 (called T) 306 380 P
1.38 (clGetFrame.  A new function was con-) 345.51 380 P
3.26 (structed to search in both directions.  Called) 306 366 P
0.51 (T) 306 352 P
0.51 (clGetFrame2, it takes additional ar) 312.49 352 P
0.51 (guments de-) 480.53 352 P
0.98 (scribing where the true stack boundaries are, as) 306 338 P
(well as where the current scope appears to be.) 306 324 T
1.57 (Several debugger commands take advantage of) 306 305 P
0.91 (the ability to directly access the scope.  For ex-) 306 291 P
0.52 (ample, the r command continues execution until) 306 277 P
3.36 (the parent scope is encountered.  This could) 306 263 P
2.64 (probably be implemented with a call to \322info) 306 249 P
0.73 (level\323, but the temptation to just compare a sin-) 306 235 P
(gle pointer was too great.) 306 221 T
0.67 (In general, calls to T) 306 202 P
0.67 (cl_Eval are shunned, partly) 406.76 202 P
1.34 (for ef) 306 188 P
1.34 (\336ciency but also because they modify the) 333.43 188 P
-0.18 (stack.  The only calls by the debugger to T) 306 174 P
-0.18 (cl_Ev-) 508.02 174 P
(al occur when evaluating breakpoints.) 306 160 T
0 F
(Line Numbers) 306 138 T
1 F
1.33 (As of version 6.7, T) 306 119 P
1.33 (cl maintains no association) 406.42 119 P
2.03 (between commands and \336le names and/or line) 306 105 P
1.36 (numbers.  In retrospect, this is clearly an over-) 306 91 P
(sight.  T) 306 77 T
(wo possibilities seem likely:) 344.81 77 T
FMENDPAGE
%%EndPage: "14" 13
%%Page: "15" 13
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(15) 548.01 27 T
1 12 Q
-0.28 (Perhaps T) 72 730 P
-0.28 (cl originally was never imagined as be-) 119.18 730 P
1.93 (ing used in applications to such an extent that) 72 716 P
0.97 (line numbers would be necessary to debugging.) 72 702 P
1.19 (Or perhaps, implementing line and \336le associa-) 72 688 P
2.66 (tions is too painful given T) 72 674 P
2.66 (cl\325) 214.06 674 P
2.66 (s philosophy \322a) 226.06 674 P
-0.02 (command is a string\323.  Applications may have to) 72 660 P
0.32 (provide signi\336cant ef) 72 646 P
0.32 (fort to the T) 174.36 646 P
0.32 (cl core in order) 232.11 646 P
(for T) 72 632 T
(cl to support this.) 95.47 632 T
-0.05 (While the current implementation of T) 72 613 P
-0.05 (cl current-) 256.44 613 P
4.86 (ly lacks line number support, the debugger) 72 599 P
0.02 (provides all the support for it \050see \322Current Lim-) 72 585 P
(itations and Future W) 72 571 T
(ork\323 on page) 175.31 571 T
(15\051.) 240.26 571 T
0 F
(Commands and Arguments) 72 549 T
1 F
1.98 (Displaying the procedure call stack \050via the w) 72 530 P
(command\051 is tricky in two respects.) 72 516 T
1.72 (T) 72 497 P
1.72 (cl does not explicitly keep the original repre-) 78.49 497 P
-0.23 (sentation of a command while the command is in) 72 483 P
0.46 (execution.  There is no reason for it to do so.  If) 72 469 P
1.83 (the command is in a loop, for instance, it will) 72 455 P
-0 (simply be derived again.  W) 72 441 P
-0 (ithout a great deal of) 206.75 441 P
2.47 (work, it is therefore impossible to print out a) 72 427 P
0.7 (stack of procedure calls this way) 72 413 P
0.7 (.  Thus, Expect) 231.61 413 P
0.96 (prints out the values of each ar) 72 399 P
0.96 (gument which is) 224.78 399 P
(all T) 72 385 T
(cl has.) 93.48 385 T
0.79 (In contrast, Expect prints out the original repre-) 72 366 P
5.56 (sentation whenever the debugger stops and) 72 352 P
-0.03 (begins the user interaction.  Both representations) 72 338 P
-0.06 (are available for the next command to be execut-) 72 324 P
0.78 (ed, but the original representation is used partly) 72 310 P
0.28 (because the user can always see the other by en-) 72 296 P
1.93 (tering the w command, and partly because the) 72 282 P
1.7 (breakpoint pattern matching makes more sense) 72 268 P
(using the original source code.) 72 254 T
0.24 (Another problem is that T) 72 235 P
0.24 (cl strips of) 196.69 235 P
0.24 (f braces and) 247.59 235 P
0.86 (quotes while converting a command to its ar) 72 221 P
0.86 (gv/) 290.67 221 P
-0.04 (ar) 72 207 P
-0.04 (gc representation.  Again, this is reasonable, as) 81.1 207 P
-0.16 (the braces and quotes are not formally part of the) 72 193 P
2.72 (ar) 72 179 P
2.72 (guments.  The debugger) 81.1 179 P
2.72 (, however) 204.71 179 P
2.72 (, wants to) 254.25 179 P
3.59 (show the user the original code, or perhaps,) 72 165 P
(something that is at least legal.) 72 151 T
0.97 (W) 72 132 P
0.97 (ithout the quotes, simply appending the ar) 82.84 132 P
0.97 (gu-) 290.01 132 P
2.1 (ments together is insuf) 72 118 P
2.1 (\336cient.  For example, a) 187.01 118 P
1.27 (null list will not show up at all.  Unfortunately) 72 104 P
2.36 (the original information \050precisely how it was) 72 90 P
1.14 (quoted, for example\051 simply isn\325) 72 76 P
1.14 (t present. W) 233.24 76 P
1.14 (ith) 293.33 76 P
-0.2 (suf) 72 62 P
-0.2 (\336cient time and ef) 86.44 62 P
-0.2 (fort, it could be reconstruct-) 172.57 62 P
1.25 (ed.  However) 324 730 P
1.25 (, since the output is destined only) 390.28 730 P
0.84 (for user viewing, the debugger can af) 324 716 P
0.84 (ford to err) 507.69 716 P
-0.28 (in cases that users are unlikely to notice.  The de-) 324 702 P
4.36 (bugger uses heuristics for reconstructing the) 324 688 P
(program output.) 324 674 T
0 18 Q
(Other Debuggers) 324 642 T
1 12 Q
1.03 (This debugger can be compared to Karl Lehen-) 324 621 P
0.3 (bauer) 324 607 P
0.3 (\325) 351.08 607 P
0.3 (s debugger [5] \050from hereon referred to as) 354.42 607 P
-0.27 (\322KD\323\051.   Besides KD and the debugger described) 324 593 P
0.94 (in this paper \050from hereon referred to as \322DD\323\051) 324 579 P
(no other T) 324 565 T
(cl debuggers have been constructed.) 373.12 565 T
1.31 (This comparison will be brief because KD was) 324 546 P
-0.07 (never completed although it is functional.  When) 324 532 P
1.89 (it \336rst appeared, it included the proviso that it) 324 518 P
1.03 (was \322the \336rst cut of an experimental debugger\323) 324 504 P
0.54 (and \322a dim shadow of what is possible\323.  None-) 324 490 P
2.97 (theless, KD is very interesting because of its) 324 476 P
0.61 (dif) 324 462 P
0.61 (ferences from DD.  The signi\336cant dif) 337.11 462 P
0.61 (ferenc-) 524.05 462 P
(es are as follows:) 324 448 T
3.12 (KD uses two modes: one for debugger com-) 324 429 P
0.5 (mands and one for application commands.  This) 324 415 P
-0.16 (avoids clashes between debugger commands and) 324 401 P
0.5 (application commands.  All of the commands in) 324 387 P
2.92 (KD have, nonetheless, one and two character) 324 373 P
(names.) 324 359 T
0.63 (KD rede\336nes the depth bound of T) 324 340 P
0.63 (cl\325) 494.13 340 P
0.63 (s trap han-) 506.12 340 P
1.63 (dler to achieve certain ef) 324 326 P
1.63 (fects such as stepping) 448.85 326 P
0.88 (over procedure calls.  DD blindly steps through) 324 312 P
0.01 (all calls simulating the same ef) 324 298 P
0.01 (fect by repeatedly) 472.06 298 P
0.69 (checking the current frame pointer) 324 284 P
0.69 (.  This is, un-) 491.95 284 P
2.33 (fortunately) 324 270 P
2.33 (, a requirement in order to evaluate) 375.85 270 P
(breakpoints below the depth bound.) 324 256 T
4.76 (KD lacks the sophisticated breakpoint com-) 324 237 P
2.63 (mands DD of) 324 223 P
2.63 (fers, but this is just a matter of) 393.67 223 P
0.35 (work.  On the other hand, achieving DD\325) 324 209 P
0.35 (s scope) 522.67 209 P
1.29 (manipulation functions may well be impossible) 324 195 P
(through T) 324 181 T
(cl user) 370.8 181 T
(-level functions.) 402.2 181 T
-0.15 (Perhaps the most impressive aspect of KD is that) 324 162 P
0.44 (only a tiny fraction is written in C.  The KD de-) 324 148 P
0.59 (bugger commands are written in T) 324 134 P
0.59 (cl.  Users can) 491.63 134 P
0.64 (add new debugger commands or modify the ex-) 324 120 P
1.97 (isting commands which are simply stored in a) 324 106 P
2.64 (T) 324 92 P
2.64 (cl library) 330.49 92 P
2.64 (.  Because of this approach, KD is) 375.98 92 P
0.32 (much slower than a pure C approach.  For every) 324 78 P
FMENDPAGE
%%EndPage: "15" 14
%%Page: "16" 14
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(16) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
0.78 (user T) 54 730 P
0.78 (cl command, KD executes several debug-) 84.25 730 P
(ger T) 54 716 T
(cl commands.) 78.8 716 T
2.71 (But speed by itself is not suf) 54 697 P
2.71 (\336cient to justify) 206.62 697 P
0.58 (writing so much of the debugger in C.  The real) 54 683 P
1.02 (penalty is in the complexity of manipulating an) 54 669 P
0.2 (environment at the same time it is being used by) 54 655 P
-0.09 (the commands manipulating it.  Nonetheless, be-) 54 641 P
3.69 (ing able to write or customize the debugger) 54 627 P
-0 (commands and functionality with T) 54 613 P
-0 (cl commands) 224.38 613 P
(is very interesting and worth pursuing further) 54 599 T
(.) 271.19 599 T
0 18 Q
(Performance) 54 567 T
1 12 Q
0.86 (A thorough study of the performance of the de-) 54 546 P
1.78 (bugger has not been done.  Nonetheless, some) 54 532 P
(observations can be made.) 54 518 T
0 F
(Memory) 54 496 T
1 F
0.52 (The static size of the debugger has already been) 54 477 P
7.87 (stated \050see \322Implementation\323 on page) 54 463 P
7.87 (10\051.) 269.01 463 P
2.75 (When running, the debugger does not signi\336-) 54 449 P
0.5 (cantly increase the in-memory size of a process.) 54 435 P
1.4 (There are no symbol tables or other debugging) 54 421 P
0.06 (information that has to be loaded.  The debugger) 54 407 P
1.39 (uses nothing beyond what T) 54 393 P
1.39 (cl already provides) 193.96 393 P
(to a process not being debugged.) 54 379 T
0.77 (The debugger allocates memory for breakpoints) 54 360 P
0.74 (and output buf) 54 346 P
0.74 (fers, but this is minimal.  The re-) 125.23 346 P
0.1 (sult is that the debugger adds approximately 1 to) 54 332 P
-0.12 (2% to the size of an application.  This is a far cry) 54 318 P
0.88 (from debuggers for compiled code, such as gdb) 54 304 P
(and dbx, which typically add 100 to 200%.) 54 290 T
0 F
(T) 54 268 T
(ime) 61.78 268 T
1 F
1.51 (The debugger attempts to operate as ef) 54 249 P
1.51 (\336ciently) 248.69 249 P
2.24 (as possible in the T) 54 235 P
2.24 (cl framework.  Breakpoint) 154.72 235 P
1.12 (evaluation is clearly the most expensive part of) 54 221 P
1.25 (the debugger) 54 207 P
1.25 (.  For example, expression evalua-) 116.87 207 P
(tion can require numerous calls to T) 54 193 T
(cl_Eval.) 226.37 193 T
1.78 (The time taken to test breakpoints is governed) 54 174 P
4.47 (primarily by the complexity and number of) 54 160 P
0.67 (breakpoint expressions.  T) 54 146 P
0.67 (ests of simple expres-) 181.74 146 P
3.83 (sions \050\322set a 0\323 in a loop\051 suggest that the) 54 132 P
1.35 (debugger can add up to 10% to execution time) 54 118 P
2.57 (even with no breakpoints.  W) 54 104 P
2.57 (ith slower com-) 207.59 104 P
3.25 (mands \050trig functions, system calls, etc.\051, the) 54 90 P
2.25 (execution time overhead drops to an insigni\336-) 54 76 P
1.7 (cant fraction of the total time.  W) 54 62 P
1.7 (ith extensive) 225.33 62 P
-0.24 (breakpoint use, the overhead can rise dramatical-) 306 730 P
(ly) 306 716 T
(.) 314.55 716 T
2.56 (In a debugging session, it is not necessary to) 306 697 P
-0.22 (have the debugger running all the time.  It is pos-) 306 683 P
3.18 (sible to enable the debugger only when it is) 306 669 P
0.24 (needed, and disable it when it is no longer need-) 306 655 P
0.54 (ed or until needed again.  When the debugger is) 306 641 P
1.93 (not enabled, it uses no time whatsoever) 306 627 P
1.93 (.  This) 505.81 627 P
2.55 (technique can help reduce the impact on run-) 306 613 P
(time for some types of debugging.) 306 599 T
0 18 Q
(Curr) 306 567 T
(ent Limitations and) 344.64 567 T
(Futur) 306 547 T
(e W) 350.65 547 T
(ork) 380.14 547 T
1 12 Q
7.03 (Experience will undoubtedly prompt many) 306 526 P
3.08 (changes and enhancements.  This section de-) 306 512 P
10.9 (scribes several things that are already) 306 498 P
(contemplated.) 306 484 T
1.14 (The support for de\336ning breakpoints by pattern) 306 465 P
0.5 (matching was originally motivated by T) 306 451 P
0.5 (cl\325) 499.86 451 P
0.5 (s lack) 511.86 451 P
2.78 (of line numbers and \336lename.  While pattern) 306 437 P
3.21 (matching is not unique to debuggers \050for in-) 306 423 P
1.56 (stance, gdb of) 306 409 P
1.56 (fers a similar capability although) 375.86 409 P
2.5 (only on function names\051, this debugger is the) 306 395 P
0.74 (\336rst to depend on it to such a great extent.  The) 306 381 P
-0.28 (power of pattern matching is suf) 306 367 P
-0.28 (\336cient that many) 459.94 367 P
3.37 (other traditional breakpoint speci\336cations \050for) 306 353 P
(instance, by command name\051 are not necessary) 306 339 T
(.) 531.37 339 T
0.85 (If line number and \336lename support is added to) 306 320 P
-0.29 (T) 306 306 P
-0.29 (cl, the debugger stands ready to use it.  Current-) 312.49 306 P
5.18 (ly) 306 292 P
5.18 (, the b command parses and records the) 314.55 292 P
0.14 (information, followed by a message that it is un-) 306 278 P
0.31 (supported.  Line numbers and \336lenames are also) 306 264 P
2.37 (a requirement for a screen-oriented version of) 306 250 P
(the debugger) 306 236 T
(.) 367.62 236 T
-0.08 (The problem of command name clashes between) 306 217 P
1.66 (applications and T) 306 203 P
1.66 (cl is long-standing.  The de-) 397.1 203 P
2.64 (bugger deals with this problem by avoidance.) 306 189 P
-0.19 (The debugger preemptively uses very short com-) 306 175 P
3.97 (mand names.  \050No action is taken to avoid) 306 161 P
0.97 (overriding application commands.\051  The debug-) 306 147 P
1.02 (ger also uses a very small number of command) 306 133 P
0.26 (names, overloading them within reason.  In con-) 306 119 P
10.95 (trast, many traditional debuggers de\336ne) 306 105 P
2.64 (hundreds of commands.  While this debugger) 306 91 P
0.67 (gains leverage from the existing T) 306 77 P
0.67 (cl commands,) 472.71 77 P
FMENDPAGE
%%EndPage: "16" 15
%%Page: "17" 15
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(Don Libes) 72 758.33 T
(A Debugger for T) 391.87 758.33 T
(cl Applications) 481.7 758.33 T
(T) 72 27 T
(cl/Tk W) 78.9 27 T
(orkshop - June 10-1) 119.89 27 T
(1, 1993 - Berkeley) 220.85 27 T
(, CA) 311.46 27 T
1 10 Q
(17) 548.01 27 T
1 12 Q
2.52 (this aspect of the design should be studied at) 72 730 P
(more length.) 72 716 T
-0.12 (The debugger interface is designed so that multi-) 72 697 P
1.53 (ple debuggers can be used, one per T) 72 683 P
1.53 (cl_Interp.) 259.7 683 P
1.39 (The current implementation, however) 72 669 P
1.39 (, does not) 256.9 669 P
1.73 (entirely support this.  A handful of static vari-) 72 655 P
10.63 (ables are currently shared between all) 72 641 P
1.27 (debuggers.  For instance, a single linked list of) 72 627 P
2.47 (breakpoints is maintained.  Dif) 72 613 P
2.47 (ferentiating be-) 229.92 613 P
0.31 (tween dif) 72 599 P
0.31 (ferent T) 117.06 599 P
0.31 (cl interpreters could potentially) 154.83 599 P
1.46 (be performed by the debugger) 72 585 P
1.46 (, but it would be) 221.89 585 P
1.46 (much simpler and more ef) 72 571 P
1.46 (\336cient to rely on the) 203.54 571 P
(T) 72 557 T
(cl_Interp structure for storage.) 78.49 557 T
0.47 (An alternative debugger design would move de-) 72 538 P
7.03 (bugger control into a completely separate) 72 524 P
3.35 (interpreter) 72 510 P
3.35 (.  This would enable the ability to) 121.29 510 P
0.91 (write loops or sequences involving multiple de-) 72 496 P
-0.21 (bugger commands such as \322s;n\323 which cannot be) 72 482 P
1.64 (performed in the current implementation.  It is) 72 468 P
-0.03 (possible to achieve this same ability currently by) 72 454 P
0.94 (using an Expect script in a separate process but) 72 440 P
1.49 (the result is not as ef) 72 426 P
1.49 (\336cient as a single process) 178.15 426 P
(debugger) 72 412 T
(.) 115.97 412 T
-0.14 (While the debugger can be used with graphic ap-) 72 393 P
-0.09 (plications \050e.g., Tk applications\051, the debugger is) 72 379 P
0.83 (currently intended only to interact with the user) 72 365 P
0.55 (in a dumb terminal window) 72 351 P
0.55 (.  It should be possi-) 205.99 351 P
2.15 (ble to use Expectk [6] to write a GUI for the) 72 337 P
0.86 (debugger using only Tk and Expect commands.) 72 323 P
2.36 (Building a GUI-based debugger without using) 72 309 P
1.52 (Expectk or one of the Expect libraries may re-) 72 295 P
8.09 (quire signi\336cant rewriting to remove the) 72 281 P
(emphasis on line-oriented interaction.) 72 267 T
0.9 (In the Tk environment, access to the send com-) 72 248 P
3.89 (mand opens new possibilities for debugging.) 72 234 P
4.44 (Several browsers have already been written.) 72 220 P
1.84 (These browsers allow T) 72 206 P
1.84 (cl variables and proce-) 191.59 206 P
4.8 (dures to be examined and changed without) 72 192 P
1.92 (stopping the application.  This style of debug-) 72 178 P
4.8 (ging could be combined with the debugger) 72 164 P
(described in this paper) 72 150 T
(.) 179.59 150 T
0 18 Q
(Conclusion) 72 118 T
1 12 Q
2.17 (While the current implementation of T) 72 97 P
2.17 (cl lacks) 267.53 97 P
4.19 (debugger support in some areas, it provides) 72 83 P
0.29 (enough hooks to address the most dif) 324 730 P
0.29 (\336cult prob-) 504.08 730 P
(lems in building a debugger) 324 716 T
(.) 457.26 716 T
0.71 (This paper has described a debugger for T) 324 697 P
0.71 (cl ap-) 530.31 697 P
0.46 (plications.  The philosophy of its design is to be) 324 683 P
0.85 (as simple as possible by introducing only a few) 324 669 P
2.83 (new commands and concepts while using T) 324 655 P
2.83 (cl) 549.34 655 P
0.69 (and application commands as leverage.  The re-) 324 641 P
5.47 (sult is a reasonably functional and highly-) 324 627 P
1.72 (integrated debugger for T) 324 613 P
1.72 (cl applications that is) 451.22 613 P
(small, fast, and easy to learn and use.) 324 599 T
0.41 (Nonetheless, the possibilities for much more so-) 324 580 P
-0.03 (phisticated debuggers are obvious, and this work) 324 566 P
-0.07 (can provide a starting point for future endeavors.) 324 552 P
0 18 Q
(A) 324 520 T
(vailability) 335.66 520 T
1 12 Q
-0.22 (Since the design and implementation of this soft-) 324 499 P
0.83 (ware was paid for by the U.S. government, it is) 324 485 P
1 (in the public domain.  However) 324 471 P
1 (, the author and) 480.4 471 P
2.31 (NIST would appreciate credit if this software,) 324 457 P
2.69 (documentation, ideas, or portions of them are) 324 443 P
(used.) 324 429 T
1.41 (The debugger may be) 324 410 P
3 11 Q
3.11 (ftp) 436.91 410 P
1 12 Q
1.41 (\325d as) 456.68 410 P
3 11 Q
3.11 (pub/expect/) 485.49 410 P
16.62 (tcl-debug.tar.Z) 324 396 P
1 10 Q
6.3 (1) 422.88 400.8 P
1 12 Q
7.56 ( from) 427.87 396 P
3 11 Q
16.62 (ftp.cme.nist.) 472.31 396 P
1.5 (gov) 324 382 P
1 12 Q
0.68 (.  The software will be mailed to you if you) 343 382 P
2.04 (send the mail message \322) 324 368 P
3 11 Q
4.47 (send pub/expect/) 448.06 368 P
26.03 (tcl-debug.tar.Z) 324 354 P
1 12 Q
11.84 (\323 \050without quotes\051 to) 422.88 354 P
3 11 Q
(library@cme.nist.gov) 324 340 T
1 12 Q
(.) 455.06 340 T
0 18 Q
(Acknowledgments) 324 308 T
1 12 Q
0.41 (Thanks to John Ousterhout, Sarah W) 324 287 P
0.41 (allace, Sus-) 502.3 287 P
0.66 (an Mulroney) 324 273 P
0.66 (, Bob Bagwill, and Rob Savoye for) 385.5 273 P
1.49 (critiquing this work, and providing suggestions) 324 259 P
0.36 (that greatly enhanced the usability of the debug-) 324 245 P
(ger and readability of the paper) 324 231 T
(.) 473.55 231 T
1.17 (The author gratefully acknowledges John Oust-) 324 212 P
0.43 (erhout for creating T) 324 198 P
0.43 (cl.  Not only does T) 424.02 198 P
0.43 (cl solve) 520.6 198 P
0.4 (a signi\336cant problem in software design, but the) 324 184 P
3.59 (code itself as well as the documentation are) 324 170 P
4.04 (comprehensive and written with consummate) 324 156 P
(style.  T) 324 142 T
(cl is truly a pleasure to use.) 362.14 142 T
1.02 (Portions of this work were funded by the NIST) 324 123 P
3.07 (Scienti\336c and T) 324 109 P
3.07 (echnical Research Services as) 405.25 109 P
324 78 558 93 C
333 91 477 91 2 L
0.5 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 10 Q
0 X
0 K
-0.07 (1. The \322.Z\323 \336le is compressed.  A \322.gz\323 version is) 342 71.33 P
(also available which is gzipped.) 342 59.33 T
FMENDPAGE
%%EndPage: "17" 16
%%Page: "18" 16
612 792 0 FMBEGINPAGE
0 12 Q
0 X
0 K
(A Debugger for T) 54 758.33 T
(cl Applications) 143.83 758.33 T
(Don Libes) 487.68 758.33 T
1 10 Q
(18) 54 27 T
0 12 Q
(T) 277.22 27 T
(cl/Tk W) 284.12 27 T
(orkshop - June 10-1) 325.11 27 T
(1, 1993 - Berkeley) 426.08 27 T
(, CA) 516.68 27 T
1 F
0.09 (part of the ARP) 54 730 P
0.09 (A Persistent Object Base project,) 128.77 730 P
0.94 (and the Computer) 54 716 P
0.94 (-aided Acquisition and Logis-) 141.59 716 P
0.21 (tic Support \050CALS\051 program of the Of) 54 702 P
0.21 (\336ce of the) 239.61 702 P
(Secretary of Defense.) 54 688 T
0 18 Q
(Disclaimers) 54 656 T
1 12 Q
2.66 (T) 54 635 P
2.66 (rade names and company products are men-) 60.91 635 P
0.94 (tioned in the text in order to adequately specify) 54 621 P
3.46 (experimental procedures and equipment used.) 54 607 P
0.17 (In no case does such identi\336cation imply recom-) 54 593 P
5.83 (mendation or endorsement by the National) 54 579 P
0.91 (Institute of Standards and T) 54 565 P
0.91 (echnology) 190.04 565 P
0.91 (, nor does) 239.22 565 P
-0.06 (it imply that the products are necessarily the best) 54 551 P
(available for the purpose.) 54 537 T
0 18 Q
(Refer) 54 505 T
(ences) 96.62 505 T
1 12 Q
([1]) 54 484 T
5.15 (Ousterhout, John, \322T) 75.02 484 P
5.15 (cl: An Embeddable) 185.09 484 P
4.95 (Command Language\323,) 106.99 470 P
2 F
4.95 (Pr) 228.49 470 P
4.95 (oceedings) 240.04 470 P
1.49 (of the W) 106.99 456 P
1.49 (inter 1990 USENIX Confer-) 149.28 456 P
1.27 (ence) 106.99 442 P
1 F
1.27 (, W) 128.96 442 P
1.27 (ashington, D.C., January 22-) 146.6 442 P
(26, 1990.) 106.99 428 T
([2]) 54 409 T
3.66 (Ousterhout, John, \322T) 75.02 409 P
3.66 (cl\0503\051 \320 Overview of) 182.1 409 P
0.21 (T) 106.99 395 P
0.21 (ool Command Language Facilities\323,) 113.48 395 P
2 F
0.15 (unpublished manual page) 106.99 381 P
1 F
0.15 (, University) 231.22 381 P
4.73 (of California at Berkeley) 106.99 367 P
4.73 (, January) 239.97 367 P
(1990.) 106.99 353 T
([3]) 54 334 T
0.82 (Libes, Don, \322Expect: Curing Those Uncon-) 75.02 334 P
4.81 (trollable Fits of Interaction\323,) 106.99 320 P
2 F
4.81 (Pr) 266.46 320 P
4.81 (o-) 278.01 320 P
9.94 (ceedings of the Summer 1990) 106.99 306 P
4.97 (USENIX Confer) 106.99 292 P
4.97 (ence) 189.14 292 P
1 F
4.97 (, pp. 183-192,) 211.11 292 P
(Anaheim, CA, June 1) 106.99 278 T
(1-15, 1990.) 210.15 278 T
([4]) 54 259 T
0.02 (Libes, Don, \322Expect: Scripts for Controlling) 75.02 259 P
8.06 (Interactive Programs\323,) 106.99 245 P
2 F
8.06 (Computing) 234.69 245 P
2.5 (Systems) 106.99 231 P
1 F
2.5 (, pp. 99-126, V) 144.96 231 P
2.5 (ol. 4, No. 2,) 223.53 231 P
2.45 (University of California Press Jour-) 106.99 217 P
(nals, CA, Spring 1991.) 106.99 203 T
([5]) 54 184 T
0.8 (Lehenbauer) 75.02 184 P
0.8 (, Karl, \322A Source Level Debug-) 131.15 184 P
5.25 (ger for T) 106.99 170 P
5.25 (cl\323,) 159.27 170 P
2 F
5.25 (Usenet) 184.5 170 P
1 F
5.25 ( Message-ID:) 217.81 170 P
(<1992Jan03.220658.22059@NeoSo-) 106.99 156 T
(ft.com>, January 3, 1992.) 106.99 142 T
([6]) 54 123 T
0.03 (Libes, Don, \322Expectk\323,) 75.02 123 P
2 F
0.03 (unpublished manual) 190.36 123 P
1.2 (page) 106.99 109 P
1 F
1.2 (, National Institute of Standards) 130.31 109 P
(and T) 106.99 95 T
(echnology) 133.8 95 T
(, January 1993.) 182.98 95 T
FMENDPAGE
%%EndPage: "18" 17
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 16 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Bold
