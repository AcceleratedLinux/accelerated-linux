.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RRDBUILD 1"
.TH RRDBUILD 1 "2005-06-17" "1.2.10" "rrdtool"
.SH "NAME"
rrdbuild \- Instructions for building RRDtool
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Overview"
.IX Subsection "Overview"
If you downloaded the source of rrdtool you have to compile it. This
document will give some information on how this is done.
.PP
RRDtool relies on services of thrid part libraries. Some of these libraries
may already be installed on your system. You have to compile copies of the other
ones before you can build RRDtool.
.PP
This document will tell you about all the necessary steps to get going.
.Sh "Building"
.IX Subsection "Building"
Before you start to build RRDtool, you have to decide two things:
.IP "1." 4
In which directory you want to build the software.
.IP "2." 4
Where you want to install the software.
.PP
Once you have decided. Save the two locations into environment variables.
Depending on the shell you are using, you can do either (bash,zsh):
.PP
.Vb 2
\& BUILD_DIR=/tmp/rrdbuild
\& INSTALL_DIR=/usr/local/rrdtool-1.2.10
.Ve
.PP
Or if you run tcsh:
.PP
.Vb 2
\& set BUILD_DIR=/tmp/rrdbuild
\& set INSTALL_DIR=/usr/local/rrdtool-1.2.10
.Ve
.PP
Now make sure the \s-1BUILD_DIR\s0 exists and go there:
.PP
.Vb 2
\& mkdir -p $BUILD_DIR
\& cd $BUILD_DIR
.Ve
.PP
Lets first assume you already have all the necessary libraries
per\-installed. Note that these instructions assume that your copies of
\&\fBtar\fR and \fBmake\fR are actually \fB\s-1GNU\s0 tar\fR and \fB\s-1GNU\s0 make\fR respectively. It
could be that they are installed as \fBgtar\fR and \fBgmake\fR on your system.
.PP
.Vb 4
\& wget http://people.ee.ethz.ch/oetiker/webtools/rrdtool/pub/rrdtool-1.2.10.tar.gz
\& tar zxf rrdtool-1.2.10.tar.gz
\& cd rrdtool-1.2.10
\& ./configure --prefix=$INSTALL_DIR && make && make install
.Ve
.PP
Ok, this was very optimistic. This try will probably have ended with
\&\fBconfigure\fR complaining about several missing libraries. If you are on a
Linux or *bsd system you may want to just install the missing bits from your
software repository. When you do that, make sure you also get the \fB\-dev\fR
package for each library you install. Once you have the missing bits on
board, just re-run the last line of the instructions above.
.PP
But again this may have been too optimistic, and you actually have to
compile your own copies of the required libraries. Here is how:
.IP "Building cgilib" 4
.IX Item "Building cgilib"
.Vb 4
\& cd $BUILD_DIR
\& wget http://people.ee.ethz.ch/oetiker/webtools/rrdtool/pub/libs/cgilib-0.5.tar.gz
\& tar zxf cgilib-0.5.tar.gz
\& cd cgilib-0.5
.Ve
.Sp
If you are on Mac \s-1OSX\s0 you want to fix a little header problem here by doing
.Sp
.Vb 1
\& touch malloc.h
.Ve
.Sp
and now you are ready to build
.Sp
.Vb 5
\& make CC=gcc CFLAGS="-O3 -fPIC -I."
\& mkdir -p $BUILD_DIR/lb/include
\& cp *.h $BUILD_DIR/lb/include
\& mkdir -p $BUILD_DIR/lb/lib
\& cp libcgi* $BUILD_DIR/lb/lib
.Ve
.IP "Building zlib" 4
.IX Item "Building zlib"
.Vb 7
\& cd $BUILD_DIR
\& wget http://people.ee.ethz.ch/oetiker/webtools/rrdtool/pub/libs/zlib-1.2.2.tar.gz
\& tar  zxf zlib-1.2.2.tar.gz
\& cd zlib-1.2.2
\& env CFLAGS="-O3 -fPIC" ./configure --prefix=$BUILD_DIR/lb
\& make
\& make install
.Ve
.IP "Building libpng" 4
.IX Item "Building libpng"
Libpng itself requires zlib to build, so we need to help a bit. If you
already have a copy of zlib on your system (which is very likley) you can
drop the settings of \s-1LDFLAGS\s0 and \s-1CPPFLAGS\s0. Note that the backslash (\e) at
the end of line 4 means that line 4 and line 5 are on one line.
.Sp
.Vb 8
\& cd $BUILD_DIR
\& wget http://people.ee.ethz.ch/oetiker/webtools/rrdtool/pub/libs/libpng-1.2.8-config.tar.gz
\& tar zxvf libpng-1.2.8-config.tar.gz
\& cd libpng-1.2.8-config
\& env CPPFLAGS="-I$BUILD_DIR/lb/include" LDFLAGS="-L$BUILD_DIR/lb/lib" CFLAGS="-O3 -fPIC" \e
\&     ./configure --disable-shared --prefix=$BUILD_DIR/lb
\& make
\& make install
.Ve
.IP "Building freetype" 4
.IX Item "Building freetype"
.Vb 8
\& cd $BUILD_DIR
\& wget http://people.ee.ethz.ch/oetiker/webtools/rrdtool/pub/libs/freetype-2.1.9.tar.gz
\& tar zxvf freetype-2.1.9.tar.gz
\& cd freetype-2.1.9
\& env CPPFLAGS="-I$BUILD_DIR/lb/include" LDFLAGS="-L$BUILD_DIR/lb/lib" CFLAGS="-O3 -fPIC" \e
\&     ./configure --disable-shared --prefix=$BUILD_DIR/lb
\& make
\& make install
.Ve
.IP "Building libart_lgpl" 4
.IX Item "Building libart_lgpl"
.Vb 7
\& cd $BUILD_DIR
\& wget http://people.ee.ethz.ch/oetiker/webtools/rrdtool/pub/libs/libart_lgpl-2.3.17.tar.gz
\& tar zxvf libart_lgpl-2.3.17.tar.gz
\& cd libart_lgpl-2.3.17
\& env CFLAGS="-O3 -fPIC" ./configure --disable-shared --prefix=$BUILD_DIR/lb
\& make
\& make install
.Ve
.PP
Now all the dependent libraries are built and you can try again. Since these
are static libraries, you may have to use \fIranlib\fR to make them accessible.
Especially \s-1BSD\s0 systems like Mac \s-1OS\s0 X may require this, Linux and Solaris
will do just fine without since their \fIar\fR command does ranlibs job as well.
.PP
.Vb 1
\& ranlib $BUILD_DIR/lb/lib/*.a
.Ve
.PP
This time you tell configure where it should be looking for libraries and
include files. This is done via environment variables. Depending on the
shell you are running, the syntax for setting environment variables is
different. Under csh/tcsh you use:
.PP
.Vb 4
\& set IR=-I$BUILD_DIR/lb/include
\& setenv CPPFLAGS "$IR $IR/libart-2.0 $IR/freetype2 $IR/libpng"
\& setenv LDFLAGS  -L$BUILD_DIR/lb/lib
\& setenv CFLAGS -O3
.Ve
.PP
If you are running bash/sh/ash/ksh/zsh use this:
.PP
.Vb 5
\& IR=-I$BUILD_DIR/lb/include
\& CPPFLAGS="$IR $IR/libart-2.0 $IR/freetype2 $IR/libpng"
\& LDFLAGS="-L$BUILD_DIR/lb/lib"
\& CFLAGS=-O3
\& export CPPFLAGS LDFLAGS CFLAGS
.Ve
.PP
And finally try building again. We disable the python bindings because it
seems that a fair number of people have ill configured python setups that
would prevent rrdtool from building if they are included in their current
state.
.PP
.Vb 2
\& cd $BUILD_DIR/rrdtool-1.2.10
\& ./configure --prefix=$INSTALL_DIR --disable-python && make clean && make && make install
.Ve
.PP
Now go to \fI$INSTALL_DIR\fR\fB/examples\fR and run them to see if your
build has been successful.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tobias Oetiker <oetiker@ee.ethz.ch>
