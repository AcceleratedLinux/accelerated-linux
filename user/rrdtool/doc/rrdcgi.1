.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RRDCGI 1"
.TH RRDCGI 1 "2005-06-17" "1.2.10" "rrdtool"
.SH "NAME"
rrdcgi \- Create web pages containing RRD graphs based on templates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`#!/path/to/\*(C'\fR\fBrrdcgi\fR [\fB\-\-filter\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBrrdcgi\fR is a sort of very limited script interpreter. Its purpose
is to run as a cgi-program and parse a web page template containing special
<\s-1RRD::\s0 tags. \fBrrdcgi\fR will interpret and act according to these tags.
In the end it will printout a web page including the necessary \s-1CGI\s0 headers.
.PP
\&\fBrrdcgi\fR parses the contents of the template in 3 steps. In each step it looks
only for a subset of tags. This allows nesting of tags.
.PP
The argument parser uses the same semantics as you are used from your C\-shell.
.IP "\fB\-\-filter\fR" 8
.IX Item "--filter"
Assume that rrdcgi is run as a filter and not as a cgi.
.Sh "Keywords"
.IX Subsection "Keywords"
.IP "\s-1RRD::CV\s0 \fIname\fR" 8
.IX Item "RRD::CV name"
Inserts the \s-1CGI\s0 variable of the given name.
.IP "\s-1RRD::CV::QUOTE\s0 \fIname\fR" 8
.IX Item "RRD::CV::QUOTE name"
Inserts the \s-1CGI\s0 variable of the given name but quotes it, ready for
use as an argument in another \s-1RRD::\s0 tag. So even when there are spaces in the
value of the \s-1CGI\s0 variable it will still be considered to be one argument.
.IP "\s-1RRD::CV::PATH\s0 \fIname\fR" 8
.IX Item "RRD::CV::PATH name"
Inserts the \s-1CGI\s0 variable of the given name, quotes it and makes sure
it starts neither with a '/' nor contains '..'. This is to make
sure that no problematic pathnames can be introduced through the
\&\s-1CGI\s0 interface.
.IP "\s-1RRD::GETENV\s0 \fIvariable\fR" 8
.IX Item "RRD::GETENV variable"
Get the value of an environment variable.
.Sp
.Vb 1
\& <RRD::GETENV REMOTE_USER>
.Ve
.Sp
might give you the name of the remote user given you are using
some sort of access control on the directory.
.IP "\s-1RRD::GOODFOR\s0 \fIseconds\fR" 8
.IX Item "RRD::GOODFOR seconds"
Specify the number of seconds this page should remain valid. This will prompt
the rrdcgi to output a Last\-Modified, an Expire and if the number of
seconds is \fInegative\fR a Refresh header.
.IP "\s-1RRD::INCLUDE\s0 \fIfilename\fR" 8
.IX Item "RRD::INCLUDE filename"
Include the contents of the specified file into the page returned from the cgi.
.IP "\s-1RRD::SETENV\s0 \fIvariable\fR \fIvalue\fR" 8
.IX Item "RRD::SETENV variable value"
If you want to present your graphs in another time zone than your own, you
could use
.Sp
.Vb 1
\& <RRD::SETENV TZ UTC>
.Ve
.Sp
to make sure everything is presented in Universal Time. Note that the
values permitted to \s-1TZ\s0 depend on your \s-1OS\s0.
.IP "\s-1RRD::SETVAR\s0 \fIvariable\fR \fIvalue\fR" 8
.IX Item "RRD::SETVAR variable value"
Analog to \s-1SETENV\s0 but for local variables.
.IP "\s-1RRD::GETVAR\s0 \fIvariable\fR" 8
.IX Item "RRD::GETVAR variable"
Analog to \s-1GETENV\s0 but for local variables.
.IP "\s-1RRD::TIME::LAST\s0 \fIrrd-file\fR \fIstrftime-format\fR" 8
.IX Item "RRD::TIME::LAST rrd-file strftime-format"
This gets replaced by the last modification time of the selected \s-1RRD\s0. The
time is \fIstrftime\fR\-formatted with the string specified in the second argument.
.IP "\s-1RRD::TIME::NOW\s0 \fIstrftime-format\fR" 8
.IX Item "RRD::TIME::NOW strftime-format"
This gets replaced by the current time of day. The time is
\&\fIstrftime\fR\-formatted with the string specified in the argument.
.Sp
Note that if you return : (colons) from your strftime format you may
have to escape them using \e if the time is to be used as an argument
to a \s-1GRAPH\s0 command.
.IP "\s-1RRD::TIME::STRFTIME\s0 \fISTART|END\fR \fIstart-spec\fR \fIend-spec\fR \fIstrftime-format\fR" 8
.IX Item "RRD::TIME::STRFTIME START|END start-spec end-spec strftime-format"
This gets replaced by a strftime-formatted time using the format
\&\fIstrftime-format\fR on either \fIstart-spec\fR or \fIend-spec\fR depending on
whether \fI\s-1START\s0\fR or \fI\s-1END\s0\fR is specified.  Both \fIstart-spec\fR and \fIend-spec\fR
must be supplied as either could be relative to the other.  This is intended
to allow pretty titles on graphs with times that are easier for non RRDtool
folks to figure out than \*(L"\-2weeks\*(R".
.Sp
Note that again, if you return : (colon) from your strftime format,
you may have to escape them using \e if the time is to be used as an
argument to a \s-1GRAPH\s0 command.
.IP "\s-1RRD::GRAPH\s0 \fIrrdgraph arguments\fR" 8
.IX Item "RRD::GRAPH rrdgraph arguments"
This tag creates the \s-1RRD\s0 graph defined by its argument and then is
replaced by an appropriate <\s-1IMG\s0 ... > tag referring to the graph.
The \fB\-\-lazy\fR option in \s-1RRD\s0 graph can be used to make sure that graphs
are only regenerated when they are out of date. The arguments
to the \fB\s-1RRD::GRAPH\s0\fR tag work as described in the \fBrrdgraph\fR manual page.
.Sp
Use the \fB\-\-lazy\fR option in your \s-1RRD::GRAPH\s0 tags, to reduce the load
on your server. This option makes sure that graphs are only regenerated when
the old ones are out of date.
.Sp
If you do not specify your own \fB\-\-imginfo\fR format, the following will
be used:
.Sp
.Vb 1
\& <IMG SRC="%s" WIDTH="%lu" HEIGHT="%lu">
.Ve
.Sp
Note that \f(CW%s\fR stands for the filename part of the graph generated, all
directories given in the \s-1PNG\s0 file argument will get dropped.
.IP "\s-1RRD::PRINT\s0 \fInumber\fR" 8
.IX Item "RRD::PRINT number"
If the preceding  \fB\s-1RRD::GRAPH\s0\fR tag contained and \fB\s-1PRINT\s0\fR arguments,
then you can access their output with this tag. The \fInumber\fR argument refers to the
number of the \fB\s-1PRINT\s0\fR argument. This first \fB\s-1PRINT\s0\fR has \fInumber\fR 0.
.SH "EXAMPLE 1"
.IX Header "EXAMPLE 1"
The example below creates a web pages with a single \s-1RRD\s0 graph.
.PP
.Vb 9
\& #!/usr/local/bin/rrdcgi
\& <HTML>
\& <HEAD><TITLE>RRDCGI Demo</TITLE></HEAD>
\& <BODY>
\& <H1>RRDCGI Example Page</H1>
\& <P>
\& <RRD::GRAPH demo.png --lazy --title="Temperatures"
\&          DEF:cel=demo.rrd:exhaust:AVERAGE
\&          LINE2:cel#00a000:"D. Celsius">
.Ve
.PP
.Vb 3
\& </P>
\& </BODY>
\& </HTML>
.Ve
.SH "EXAMPLE 2"
.IX Header "EXAMPLE 2"
This script is slightly more elaborate, it allows you to run it from
a form which sets \s-1RRD_NAME\s0. \s-1RRD_NAME\s0 is then used to select which \s-1RRD\s0
you want to use as source for your graph.
.PP
.Vb 15
\& #!/usr/local/bin/rrdcgi
\& <HTML>
\& <HEAD><TITLE>RRDCGI Demo</TITLE></HEAD>
\& <BODY>
\& <H1>RRDCGI Example Page for <RRD::CV RRD_NAME></H1>
\& <H2>Selection</H2>
\& <FORM><INPUT NAME=RRD_NAME TYPE=RADIO VALUE=roomA> Room A,
\&       <INPUT NAME=RRD_NAME TYPE=RADIO VALUE=roomB> Room B.
\&       <INPUT TYPE=SUBMIT></FORM>
\& <H2>Graph</H2>
\& <P>
\& <RRD::GRAPH <RRD::CV::PATH RRD_NAME>.png --lazy
\&          --title "Temperatures for "<RRD::CV::QUOTE RRD_NAME>
\&          DEF:cel=<RRD::CV::PATH RRD_NAME>.rrd:exhaust:AVERAGE
\&          LINE2:cel#00a000:"D. Celsius">
.Ve
.PP
.Vb 3
\& </P>
\& </BODY>
\& </HTML>
.Ve
.SH "EXAMPLE 3"
.IX Header "EXAMPLE 3"
This example shows how to handle the case where the \s-1RRD\s0, graphs and
cgi-bins are seperate directories
.PP
.Vb 14
\& #!/.../bin/rrdcgi
\& <HTML>
\& <HEAD><TITLE>RRDCGI Demo</TITLE></HEAD>
\& <BODY>
\& <H1>RRDCGI test Page</H1>
\& <RRD::GRAPH
\&  /.../web/pngs/testhvt.png
\&  --imginfo '<IMG SRC=/.../pngs/%s WIDTH=%lu HEIGHT=%lu >'
\&  --lazy --start -1d --end now
\&  DEF:http_src=/.../rrds/test.rrd:http_src:AVERAGE
\&  AREA:http_src#00ff00:http_src
\& >
\& </BODY>
\& </HTML>
.Ve
.PP
Note 1: Replace /.../ with the relevant directories
.PP
Note 2: The SRC=/.../pngs should be paths from the view of the
webserver/browser
.SH "AUTHOR"
.IX Header "AUTHOR"
Tobias Oetiker <oetiker@ee.ethz.ch>
