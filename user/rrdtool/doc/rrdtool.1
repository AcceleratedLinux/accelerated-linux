.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RRDTOOL 1"
.TH RRDTOOL 1 "2005-06-17" "1.2.10" "rrdtool"
.SH "NAME"
rrdtool \- Round Robin Database Tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBrrdtool\fR \fB\-\fR [workdir]| \fIfunction\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "\s-1OVERVIEW\s0"
.IX Subsection "OVERVIEW"
It is pretty easy to gather status information from all sorts of
things, ranging from the temperature in your office to the number of
octets which have passed through the \s-1FDDI\s0 interface of your
router. But it is not so trivial to store this data in an efficient and
systematic manner. This is where \fBRRDtool\fR comes in handy. It lets you
\&\fIlog and analyze\fR the data you gather from all kinds of data-sources
(\fB\s-1DS\s0\fR). The data analysis part of RRDtool is based on the ability to
quickly generate graphical representations of the data values
collected over a definable time period.
.PP
In this man page you will find general information on the design and
functionality of the Round Robin Database Tool (RRDtool). For a more
detailed description of how to use the individual functions of
\&\fBRRDtool\fR check the corresponding man page.
.PP
For an introduction to the usage of RRDtool make sure you consult the
rrdtutorial.
.Sh "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
While the man pages talk of command line switches you have to set in
order to make \fBRRDtool\fR work it is important to note that
\&\fBRRDtool\fR can be remotely controlled through a set of pipes. This
saves a considerable amount of startup time when you plan to make
\&\fBRRDtool\fR do a lot of things quickly. Check the section on \*(L"Remote Control\*(R" further down. There is also a number of language bindings
for RRDtool which allow you to use it directly from perl, python, tcl,
php, etc.
.IP "\fBcreate\fR" 8
.IX Item "create"
Set up a new Round Robin Database (\s-1RRD\s0). Check rrdcreate.
.IP "\fBupdate\fR" 8
.IX Item "update"
Store new data values into an \s-1RRD\s0. Check rrdupdate.
.IP "\fBupdatev\fR" 8
.IX Item "updatev"
Operationally equivalent to \fBupdate\fR except for output. Check rrdupdate.
.IP "\fBgraph\fR" 8
.IX Item "graph"
Create a graph from data stored in one or several RRDs. Apart from
generating graphs, data can also be extracted to stdout. Check rrdgraph.
.IP "\fBdump\fR" 8
.IX Item "dump"
Dump the contents of an \s-1RRD\s0 in plain \s-1ASCII\s0. In connection with restore
you can use this to move an \s-1RRD\s0 from one computer architecture to
another.  Check rrddump.
.IP "\fBrestore\fR" 8
.IX Item "restore"
Restore an \s-1RRD\s0 in \s-1XML\s0 format to a binary \s-1RRD\s0. Check rrdrestore
.IP "\fBfetch\fR" 8
.IX Item "fetch"
Get data for a certain time period from a \s-1RRD\s0. The graph function
uses fetch to retrieve its data from an \s-1RRD\s0. Check rrdfetch.
.IP "\fBtune\fR" 8
.IX Item "tune"
Alter setup of an \s-1RRD\s0. Check rrdtune.
.IP "\fBlast\fR" 8
.IX Item "last"
Find the last update time of an \s-1RRD\s0. Check rrdlast.
.IP "\fBinfo\fR" 8
.IX Item "info"
Get information about an \s-1RRD\s0. Check rrdinfo.
.IP "\fBrrdresize\fR" 8
.IX Item "rrdresize"
Change the size of individual RRAs. This is dangerous! Check rrdresize.
.IP "\fBxport\fR" 8
.IX Item "xport"
Export data retrieved from one or several RRDs. Check rrdxport
.IP "\fBrrdcgi\fR" 8
.IX Item "rrdcgi"
This is a standalone tool for producing \s-1RRD\s0 graphs on the fly. Check
rrdcgi.
.Sh "\s-1HOW\s0 \s-1DOES\s0 \s-1RRDTOOL\s0 \s-1WORK\s0?"
.IX Subsection "HOW DOES RRDTOOL WORK?"
.IP "Data Acquisition" 8
.IX Item "Data Acquisition"
When monitoring the state of a system, it is convenient to have the
data available at a constant time interval. Unfortunately, you may not
always be able to fetch data at exactly the time you want
to. Therefore \fBRRDtool\fR lets you update the logfile at any time you
want. It will automatically interpolate the value of the data-source
(\fB\s-1DS\s0\fR) at the latest official time-slot (intervall) and write this
interpolated value to the log. The original value you have supplied is
stored as well and is also taken into account when interpolating the
next log entry.
.IP "Consolidation" 8
.IX Item "Consolidation"
You may log data at a 1 minute interval, but you might also be
interested to know the development of the data over the last year. You
could do this by simply storing the data in 1 minute intervals for the
whole year. While this would take considerable disk space it would
also take a lot of time to analyze the data when you wanted to create
a graph covering the whole year. \fBRRDtool\fR offers a solution to this
problem through its data consolidation feature. When setting up an
Round Robin Database (\fB\s-1RRD\s0\fR), you can define at which interval this
consolidation should occur, and what consolidation function (\fB\s-1CF\s0\fR)
(average, minimum, maximum, total, last) should be used to build the
consolidated values (see rrdcreate). You can define any number of
different consolidation setups within one \fB\s-1RRD\s0\fR. They will all be
maintained on the fly when new data is loaded into the \fB\s-1RRD\s0\fR.
.IP "Round Robin Archives" 8
.IX Item "Round Robin Archives"
Data values of the same consolidation setup are stored into Round
Robin Archives (\fB\s-1RRA\s0\fR). This is a very efficient manner to store data
for a certain amount of time, while using a known and constant amount
of storage space.
.Sp
It works like this: If you want to store 1'000 values in 5 minute
interval, \fBRRDtool\fR will allocate space for 1'000 data values and a
header area. In the header it will store a pointer telling which slots
(value) in the storage area was last written to. New values are
written to the Round Robin Archive in, you guessed it, a round robin
manner. This automatically limits the history to the last 1'000 values
(in our example). Because you can define several \fB\s-1RRA\s0\fRs within a
single \fB\s-1RRD\s0\fR, you can setup another one, for storing 750 data values
at a 2 hour interval, for example, and thus keep a log for the last
two months at a lower resolution.
.Sp
The use of \fB\s-1RRA\s0\fRs guarantees that the \fB\s-1RRD\s0\fR does not grow over
time and that old data is automatically eliminated. By using the
consolidation feature, you can still keep data for a very long time,
while gradually reducing the resolution of the data along the time
axis.
.Sp
Using different consolidation functions (\fB\s-1CF\s0\fR) allows you to store
exactly the type of information that actually interests you: the maximum
one minute traffic on the \s-1LAN\s0, the minimum temperature of your wine cellar,
the total minutes of down time, etc.
.IP "Unknown Data" 8
.IX Item "Unknown Data"
As mentioned earlier, the \fB\s-1RRD\s0\fR stores data at a constant
interval. Sometimes it may happen that no new data is available when a
value has to be written to the \fB\s-1RRD\s0\fR. Data acquisition may not be
possible for one reason or other. With \fBRRDtool\fR you can handle these
situations by storing an \fI*UNKNOWN*\fR value into the database. The
value '\fI*UNKNOWN*\fR' is supported through all the functions of the
tool. When consolidating a data set, the amount of \fI*UNKNOWN*\fR data
values is accounted for and when a new consolidated value is ready to
be written to its Round Robin Archive (\fB\s-1RRA\s0\fR), a validity check is
performed to make sure that the percentage of unknown values in the
data point is above a configurable level. If not, an \fI*UNKNOWN*\fR value
will be written to the \fB\s-1RRA\s0\fR.
.IP "Graphing" 8
.IX Item "Graphing"
\&\fBRRDtool\fR allows you to generate reports in numerical and
graphical form based on the data stored in one or several
\&\fB\s-1RRD\s0\fRs. The graphing feature is fully configurable. Size, color and
contents of the graph can be defined freely. Check rrdgraph
for more information on this.
.IP "Aberrant Behavior Detection" 8
.IX Item "Aberrant Behavior Detection"
by Jake Brutlag
.Sp
\&\fBRRDtool\fR provides the building blocks for near real-time aberrant
behavior detection. These components include:
.RS 8
.IP "*" 4
An algorithm for predicting the value of a time series one time step
into the future.
.IP "*" 4
A measure of deviation between predicted and observed values.
.IP "*" 4
A mechanism to decide if and when an observed value or sequence of
observed values is \fItoo deviant\fR from the predicted value(s).
.RE
.RS 8
.Sp
Here is a brief explanation of these components:
.Sp
The Holt-Winters time series forecasting algorithm is an on-line (or
incremental) algorithm that adaptively predicts future observations in
a time series. Its forecast is the sum of three components: a baseline
(or intercept), a linear trend over time (or slope), and a seasonal
coefficient (a periodic effect, such as a daily cycle). There is one
seasonal coefficient for each time point in the period (cycle). After
a value is observed, each of these components is updated via
exponential smoothing. This means that the algorithm \*(L"learns\*(R" from
past values and uses them to predict the future. The rate of
adaptation is governed by 3 parameters, alpha (intercept), beta
(slope), and gamma (seasonal). The prediction can also be viewed as a
smoothed value for the time series.
.Sp
The measure of deviation is a seasonal weighted absolute
deviation. The term \fIseasonal\fR means deviation is measured separately
for each time point in the seasonal cycle. As with Holt-Winters
forecasting, deviation is predicted using the measure computed from
past values (but only at that point in the seasonal cycle). After the
value is observed, the algorithm learns from the observed value via
exponential smoothing. Confidence bands for the observed time series
are generated by scaling the sequence of predicted deviation values
(we usually think of the sequence as a continuous line rather than a
set of discrete points).
.Sp
Aberrant behavior (a potential failure) is reported whenever the
number of times the observed value violates the confidence bands meets
or exceeds a specified threshold within a specified temporal window
(e.g. 5 violations during the past 45 minutes with a value observed
every 5 minutes).
.Sp
This functionality is embedded in a set of related \fBRRAs\fR. In
particular, a \s-1FAILURES\s0 \fB\s-1RRA\s0\fR logs potential failures. With these data
you could, for example, use a front-end application to \fBRRDtool\fR to
initiate real-time alerts.
.Sp
For a detailed description on how to set this up, see rrdcreate.
.RE
.Sh "\s-1REMOTE\s0 \s-1CONTROL\s0"
.IX Subsection "REMOTE CONTROL"
When you start \fBRRDtool\fR with the command line option '\fB\-\fR' it waits
for input via standard input (\s-1STDIN\s0). With this feature you can
improve performance by attaching \fBRRDtool\fR to another process (\s-1MRTG\s0
is one example) through a set of pipes. Over these pipes \fBRRDtool\fR
accepts the same arguments as on the command line and some special
commands like \fBquit, cd, mkdir\fR and \fBls\fR. For detailed help on the
server commands type:
.PP
.Vb 1
\&   rrdtool help cd|mkdir|ls|quit
.Ve
.PP
When a command is completed, RRDtool will print the string  '\f(CW\*(C`OK\*(C'\fR',
followed by timing information of the form \fBu:\fR\fIusertime\fR
\&\fBs:\fR\fIsystemtime\fR. Both values are the running totals of seconds
since RRDtool was started. If an error occurs, a line of the
form '\f(CW\*(C`ERROR:\*(C'\fR \fIDescription of error\fR' will be printed. \fBRRDtool\fR
will not abort, if possible, but follow the \s-1ERROR\s0 line with an \s-1OK\s0 line.
If a \fBworkdir\fR is specified and the \s-1UID\s0 is 0, RRDtool will do a
chroot to that workdir. If the \s-1UID\s0 is not 0, RRDtool only changes the
current directory to \fBworkdir\fR.
.Sh "\s-1RRD\s0 Server"
.IX Subsection "RRD Server"
If you want to create a RRD\-Server, you must choose a \s-1TCP/IP\s0 Service
number and add them to \fI/etc/services\fR like this:
.PP
.Vb 1
\& rrdsrv      13900/tcp                       # RRD server
.Ve
.PP
Attention: the \s-1TCP\s0 port 13900 isn't officially registered for
rrdsrv. You can use any unused port in your services file, but the
server and the client system must use the same port, of course.
.PP
With this configuration you can add RRDtool as meta-server to
\&\fI/etc/inetd.conf\fR. For example:
.PP
.Vb 1
\& rrdsrv stream tcp nowait root /opt/rrd/bin/rrdtool rrdtool - /var/rrd
.Ve
.PP
Don't forget to create the database directory /var/rrd and
reinitialize your inetd.
.PP
If all was setup correctly, you can access the server with perl
sockets, tools like netcat, or in a quick interactive test by using
\&'telnet localhost rrdsrv'.
.PP
\&\fB\s-1NOTE:\s0\fR that there is no authentication with this feature! Do not setup
such a port unless you are sure what you are doing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
rrdcreate, rrdupdate, rrdgraph, rrddump, rrdfetch, rrdtune, rrdlast, rrdxport
.SH "BUGS"
.IX Header "BUGS"
Bugs? Features!
.SH "AUTHOR"
.IX Header "AUTHOR"
Tobias Oetiker <oetiker@ee.ethz.ch>
