From ea173c871eeb3bf9c30b7ccebcc4d95ed3c9a71f Mon Sep 17 00:00:00 2001
From: Anubhav Gupta <anubhav.gupta@digi.com>
Date: Mon, 5 Apr 2021 14:30:43 -0400
Subject: [PATCH] dump vrrp

---
 keepalived/core/global_data.c |  2 +-
 keepalived/core/main.c        |  2 +-
 keepalived/vrrp/vrrp_daemon.c |  2 +-
 keepalived/vrrp/vrrp_data.c   | 10 +++++-----
 keepalived/vrrp/vrrp_if.c     | 10 +++++-----
 lib/scheduler.c               |  2 +-
 6 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/keepalived/core/global_data.c b/keepalived/core/global_data.c
index ae387e7..1a72c9f 100644
--- a/keepalived/core/global_data.c
+++ b/keepalived/core/global_data.c
@@ -599,7 +599,7 @@ dump_global_data(FILE *fp, data_t * data)
 	conf_write(fp, " Gratuitous ARP delay = %u",
 		       data->vrrp_garp_delay/TIMER_HZ);
 	conf_write(fp, " Gratuitous ARP repeat = %u", data->vrrp_garp_rep);
-	conf_write(fp, " Gratuitous ARP refresh timer = %ld", data->vrrp_garp_refresh.tv_sec);
+	conf_write(fp, " Gratuitous ARP refresh timer = %lld", data->vrrp_garp_refresh.tv_sec);
 	conf_write(fp, " Gratuitous ARP refresh repeat = %u", data->vrrp_garp_refresh_rep);
 	conf_write(fp, " Gratuitous ARP lower priority delay = %u", data->vrrp_garp_lower_prio_delay == PARAMETER_UNSET ? PARAMETER_UNSET : data->vrrp_garp_lower_prio_delay / TIMER_HZ);
 	conf_write(fp, " Gratuitous ARP lower priority repeat = %u", data->vrrp_garp_lower_prio_rep);
diff --git a/keepalived/core/main.c b/keepalived/core/main.c
index 3f69534..148f47f 100644
--- a/keepalived/core/main.c
+++ b/keepalived/core/main.c
@@ -2654,7 +2654,7 @@ end:
 			getrusage(RUSAGE_SELF, &usage);
 			getrusage(RUSAGE_CHILDREN, &child_usage);
 
-			log_message(LOG_INFO, "CPU usage (self/children) user: %ld.%6.6ld/%ld.%6.6ld system: %ld.%6.6ld/%ld.%6.6ld",
+			log_message(LOG_INFO, "CPU usage (self/children) user: %lld.%6.6lld/%lld.%6.6lld system: %lld.%6.6lld/%lld.%6.6lld",
 					usage.ru_utime.tv_sec, usage.ru_utime.tv_usec, child_usage.ru_utime.tv_sec, child_usage.ru_utime.tv_usec,
 					usage.ru_stime.tv_sec, usage.ru_stime.tv_usec, child_usage.ru_stime.tv_sec, child_usage.ru_stime.tv_usec);
 		}
diff --git a/keepalived/vrrp/vrrp_daemon.c b/keepalived/vrrp/vrrp_daemon.c
index 9549d2d..605f8b3 100644
--- a/keepalived/vrrp/vrrp_daemon.c
+++ b/keepalived/vrrp/vrrp_daemon.c
@@ -336,7 +336,7 @@ vrrp_terminate_phase2(int exit_status)
 	 */
 	if (__test_bit(LOG_DETAIL_BIT, &debug)) {
 		getrusage(RUSAGE_SELF, &usage);
-		log_message(LOG_INFO, "Stopped - used %ld.%6.6ld user time, %ld.%6.6ld system time", usage.ru_utime.tv_sec, usage.ru_utime.tv_usec, usage.ru_stime.tv_sec, usage.ru_stime.tv_usec);
+		log_message(LOG_INFO, "Stopped - used %lld.%6.6lld user time, %lld.%6.6lld system time", usage.ru_utime.tv_sec, usage.ru_utime.tv_usec, usage.ru_stime.tv_sec, usage.ru_stime.tv_usec);
 	}
 	else
 		log_message(LOG_INFO, "Stopped");
diff --git a/keepalived/vrrp/vrrp_data.c b/keepalived/vrrp/vrrp_data.c
index 5c13879..dade831 100644
--- a/keepalived/vrrp/vrrp_data.c
+++ b/keepalived/vrrp/vrrp_data.c
@@ -607,13 +607,13 @@ dump_vrrp(FILE *fp, const vrrp_t *vrrp)
 #endif
 		conf_write(fp, "   Number of track scripts init = %u", vrrp->num_script_init);
 		ctime_r(&vrrp->last_transition.tv_sec, time_str);
-		conf_write(fp, "   Last transition = %ld.%6.6ld (%.24s.%6.6ld)", vrrp->last_transition.tv_sec, vrrp->last_transition.tv_usec, time_str, vrrp->last_transition.tv_usec);
+		conf_write(fp, "   Last transition = %lld.%6.6lld (%.24s.%6.6lld)", vrrp->last_transition.tv_sec, vrrp->last_transition.tv_usec, time_str, vrrp->last_transition.tv_usec);
 		if (!ctime_r(&vrrp->sands.tv_sec, time_str))
 			strcpy(time_str, "invalid time ");
 		if (vrrp->sands.tv_sec == TIMER_DISABLED)
 			conf_write(fp, "   Read timeout = DISABLED");
 		else
-			conf_write(fp, "   Read timeout = %ld.%6.6ld (%.19s.%6.6ld)", vrrp->sands.tv_sec, vrrp->sands.tv_usec, time_str, vrrp->sands.tv_usec);
+			conf_write(fp, "   Read timeout = %lld.%6.6lld (%.19s.%6.6lld)", vrrp->sands.tv_sec, vrrp->sands.tv_usec, time_str, vrrp->sands.tv_usec);
 		conf_write(fp, "   Master down timer = %u usecs", vrrp->ms_down_timer);
 	}
 #ifdef _HAVE_VRRP_VMAC_
@@ -663,16 +663,16 @@ dump_vrrp(FILE *fp, const vrrp_t *vrrp)
 	conf_write(fp, "   Gratuitous ARP delay = %u",
 		       vrrp->garp_delay/TIMER_HZ);
 	conf_write(fp, "   Gratuitous ARP repeat = %u", vrrp->garp_rep);
-	conf_write(fp, "   Gratuitous ARP refresh = %ld",
+	conf_write(fp, "   Gratuitous ARP refresh = %lld",
 		       vrrp->garp_refresh.tv_sec);
 	conf_write(fp, "   Gratuitous ARP refresh repeat = %u", vrrp->garp_refresh_rep);
 	conf_write(fp, "   Gratuitous ARP lower priority delay = %u", vrrp->garp_lower_prio_delay / TIMER_HZ);
 	conf_write(fp, "   Gratuitous ARP lower priority repeat = %u", vrrp->garp_lower_prio_rep);
 #ifdef _HAVE_VRRP_VMAC_
 	if (vrrp->vmac_garp_intvl.tv_sec) {
-		conf_write(fp, "   Gratuitous ARP for each secondary %s = %ld", vrrp->vmac_garp_all_if ? "i/f" : "VMAC", vrrp->vmac_garp_intvl.tv_sec);
+		conf_write(fp, "   Gratuitous ARP for each secondary %s = %lld", vrrp->vmac_garp_all_if ? "i/f" : "VMAC", vrrp->vmac_garp_intvl.tv_sec);
 		ctime_r(&vrrp->vmac_garp_timer.tv_sec, time_str);
-		conf_write(fp, "   Next gratuitous ARP for such secondary = %ld.%6.6ld (%.24s.%6.6ld)", vrrp->vmac_garp_timer.tv_sec, vrrp->vmac_garp_timer.tv_usec, time_str, vrrp->vmac_garp_timer.tv_usec);
+		conf_write(fp, "   Next gratuitous ARP for such secondary = %lld.%6.6lld (%.24s.%6.6lld)", vrrp->vmac_garp_timer.tv_sec, vrrp->vmac_garp_timer.tv_usec, time_str, vrrp->vmac_garp_timer.tv_usec);
 	}
 #endif
 	conf_write(fp, "   Send advert after receive lower priority advert = %s", vrrp->lower_prio_no_advert ? "false" : "true");
diff --git a/keepalived/vrrp/vrrp_if.c b/keepalived/vrrp/vrrp_if.c
index d85b712..2818060 100644
--- a/keepalived/vrrp/vrrp_if.c
+++ b/keepalived/vrrp/vrrp_if.c
@@ -414,14 +414,14 @@ dump_garp_delay(FILE *fp, const garp_delay_t *gd)
 		conf_write(fp, " GARP interval = %g", gd->garp_interval.tv_sec + ((double)gd->garp_interval.tv_usec) / 1000000);
 		if (!ctime_r(&gd->garp_next_time.tv_sec, time_str))
 			strcpy(time_str, "invalid time ");
-		conf_write(fp, " GARP next time %ld.%6.6ld (%.19s.%6.6ld)", gd->garp_next_time.tv_sec, gd->garp_next_time.tv_usec, time_str, gd->garp_next_time.tv_usec);
+		conf_write(fp, " GARP next time %lld.%6.6lld (%.19s.%6.6lld)", gd->garp_next_time.tv_sec, gd->garp_next_time.tv_usec, time_str, gd->garp_next_time.tv_usec);
 	}
 
 	if (gd->have_gna_interval) {
 		conf_write(fp, " GNA interval = %g", gd->gna_interval.tv_sec + ((double)gd->gna_interval.tv_usec) / 1000000);
 		if (!ctime_r(&gd->gna_next_time.tv_sec, time_str))
 			strcpy(time_str, "invalid time ");
-		conf_write(fp, " GNA next time %ld.%6.6ld (%.19s.%6.6ld)", gd->gna_next_time.tv_sec, gd->gna_next_time.tv_usec, time_str, gd->gna_next_time.tv_usec);
+		conf_write(fp, " GNA next time %lld.%6.6lld (%.19s.%6.6lld)", gd->gna_next_time.tv_sec, gd->gna_next_time.tv_usec, time_str, gd->gna_next_time.tv_usec);
 	}
 	else if (!gd->have_garp_interval)
 		conf_write(fp, " No configuration");
@@ -646,12 +646,12 @@ dump_if(FILE *fp, const interface_t *ifp)
 
 	if (ifp->garp_delay) {
 		if (ifp->garp_delay->have_garp_interval)
-			conf_write(fp, "   Gratuitous ARP interval %ldms",
+			conf_write(fp, "   Gratuitous ARP interval %lldms",
 				    ifp->garp_delay->garp_interval.tv_sec * 1000 +
 				     ifp->garp_delay->garp_interval.tv_usec / (TIMER_HZ / 1000));
 
 		if (ifp->garp_delay->have_gna_interval)
-			conf_write(fp, "   Gratuitous NA interval %ldms",
+			conf_write(fp, "   Gratuitous NA interval %lldms",
 				    ifp->garp_delay->gna_interval.tv_sec * 1000 +
 				     ifp->garp_delay->gna_interval.tv_usec / (TIMER_HZ / 1000));
 		if (ifp->garp_delay->aggregation_group)
@@ -669,7 +669,7 @@ dump_if(FILE *fp, const interface_t *ifp)
 	conf_write(fp, "   Reset promote_secondaries counter %" PRIu32, ifp->reset_promote_secondaries);
 	if (timerisset(&ifp->last_gna_router_check)) {
 		ctime_r(&ifp->last_gna_router_check.tv_sec, time_str);
-		conf_write(fp, "   %sIPv6 forwarding. Last checked %ld.%6.6ld (%.24s.%6.6ld)", ifp->gna_router ? "" : "Not ", ifp->last_gna_router_check.tv_sec, ifp->last_gna_router_check.tv_usec, time_str, ifp->last_gna_router_check.tv_usec);
+		conf_write(fp, "   %sIPv6 forwarding. Last checked %lld.%6.6lld (%.24s.%6.6lld)", ifp->gna_router ? "" : "Not ", ifp->last_gna_router_check.tv_sec, ifp->last_gna_router_check.tv_usec, time_str, ifp->last_gna_router_check.tv_usec);
 
 	}
 
diff --git a/lib/scheduler.c b/lib/scheduler.c
index 4d589c2..d877acd 100644
--- a/lib/scheduler.c
+++ b/lib/scheduler.c
@@ -1845,7 +1845,7 @@ thread_fetch_next_queue(thread_master_t *m)
 						earliest_timer.tv_sec++;
 						earliest_timer.tv_usec = 1000000 - earliest_timer.tv_usec;
 					}
-					log_message(LOG_INFO, "A thread timer expired %ld.%6.6ld seconds ago", -earliest_timer.tv_sec, earliest_timer.tv_usec);
+					log_message(LOG_INFO, "A thread timer expired %lld.%6.6lld seconds ago", -earliest_timer.tv_sec, earliest_timer.tv_usec);
 
 					/* Set realtime scheduling if not already using it, or if already in use,
 					 * increase the priority. */
-- 
2.7.4

