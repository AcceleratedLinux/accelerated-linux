#!/bin/bash
#
#	normal.defaults -- Default configuration settings when building 
#		Mbedthis AppWeb from source.
#
#	Copyright (c) Mbedthis Software LLC, 2003-2004. All Rights Reserved.
#
#	These defaults build a normal AppWeb. It is multi-threaded, dynamically
#	linked with the ability to load modules. It includes CGI, but omits 
#	PHP and SSL. It it built with the standard gcc/glibc.
#
#	These initial defaults are read by configure when first creating the
#	configuration files: config.make, config.sh and config.h
#
###############################################################################
#	Primary Configuration Section
###############################################################################

BLD_NAME="Mbedthis AppWeb"				# Displayable full product name
BLD_VERSION="1.1.3" 					# Major.minor.patch
BLD_NUMBER="0" 							# The appended build number
BLD_TYPE="DEBUG" 						# The build type: (DEBUG), (RELEASE)
BLD_DEFAULTS="normal"					# Name of this defaults file

#
#	Should not need to change these values
#
BLD_COMPANY="Mbedthis" 					# Original Author
BLD_PRODUCT="appWeb" 					# One word product name

#
#	Release type
#
BLD_DEBUG=1								# Set to 1 if DEBUG

#
#	Shared library version
#
BLD_LIB_VERSION="1.0.0" 

#
#	Source directories to build
#
BLD_DIRS="bootstrap include obj bin mpr ejs http doc appWeb images"

#
#	Installation directories
#
if [ $BLD_OS = WIN ]
then
	export PATH=${BLD_TOP}/bin:${BLD_TOP}/bin/${BLD_TYPE}:${PATH}
	BLD_PREFIX=/${BLD_PRODUCT}
	BLD_DOC_PREFIX=${BLD_PREFIX}
	BLD_INC_PREFIX=${BLD_PREFIX}/include/${BLD_PRODUCT}
	BLD_LIB_PREFIX=${BLD_PREFIX}/bin
	BLD_ROOT_PREFIX=/
	BLD_SBIN_PREFIX=${BLD_PREFIX}/bin
	BLD_SRC_PREFIX=${BLD_PREFIX}/src
	BLD_WEB_PREFIX=${BLD_PREFIX}/web
else
	export PATH=${BLD_TOP}/bin:${PATH}
	BLD_PREFIX=/etc/${BLD_PRODUCT}
	BLD_DOC_PREFIX=/usr/share/${BLD_PRODUCT}-${BLD_VERSION}
	BLD_INC_PREFIX=/usr/include/${BLD_PRODUCT}
	BLD_LIB_PREFIX=/usr/lib
	BLD_ROOT_PREFIX=/
	BLD_SBIN_PREFIX=/usr/sbin
	BLD_SRC_PREFIX=/usr/src/${BLD_PRODUCT}-${BLD_VERSION}
	BLD_WEB_PREFIX=/var/${BLD_PRODUCT}/web
fi

#
#	Ports
#
BLD_HTTP_PORT=7777
BLD_SSL_PORT=4443

#
#	Do a clean install overwriting existing configurations
#
BLD_CLEAN_INSTALL=0

#
#	AppWeb configuration file. If CLEAN_INSTALL, it will be installed as
#	appWeb.conf. If CLEAN_INSTALL == 0, it will be installed as new.conf
#	so the installed appWeb.conf is preserved.
#
BLD_APPWEB_CONFIG=normal.conf

###############################################################################
#	Optional Features Section
###############################################################################
#
#	Enable request access logging
#
BLD_FEATURE_ACCESS_LOG=1

#
#	Turn assert checking on. Good for a debug build
#
BLD_FEATURE_ASSERT=1

#
#	Enable parsing and displaying of configuration files
#
BLD_FEATURE_CONFIG=1

#
#	Enable cookie parsing and setting
#
BLD_FEATURE_COOKIE=1

#
#	Enable digest authentication
#
BLD_FEATURE_DIGEST=1

#
#	Compile in the ability to dynamically load modules (DLLs)
#
BLD_FEATURE_DLL=1

#
#	Enable keep-alive support. AppWeb will work fine (but quite a bit 
#	slower) without this enabled.
#
BLD_FEATURE_KEEP_ALIVE=1

#
#	Enable If-Modified headers. AppWeb will work fine (but quite a
#	bit slower) without this enabled.
#
BLD_FEATURE_IF_MODIFIED=1

#
#	Replace the standard libstdc++ with libminiStdc++
#
BLD_FEATURE_LIB_STDCPP=1

#
#	Enable the MPR logging facility. Useful if debugging.
#
BLD_FEATURE_LOG=1

#
#	Use Mbedthis Fast Malloc. This is about 25% faster and a bit more code 
#	than the standard malloc.
#
BLD_FEATURE_MALLOC=0

#
#	Output memory statistics when required. Some programs support "-m" to dump
#	memory statistics.
#
BLD_FEATURE_MALLOC_STATS=0

#
#	Output detailed memory leak on program exit (Use -m).
#
BLD_FEATURE_MALLOC_LEAK=0

#
#	Replace the standard malloc/free/realloc/calloc/new/delete routines
#
BLD_FEATURE_MALLOC_HOOK=0

#
#	Compile multi-threaded
#
BLD_FEATURE_MULTITHREAD=1

#
#	Run from a ROM file system. Only use this for deeply embedded projects 
#	without a file system.
#
BLD_FEATURE_ROMFS=0

#
#	Run as a service / daemon. Only used by the AppWeb program. The MPR does
#	get a bit bigger.
#
BLD_FEATURE_RUN_AS_SERVICE=1

#
#	Warn if unsafe C/C++ constructs are used (like printf)
#
BLD_FEATURE_SAFE_STRINGS=0

#
#	Build small. Set to zero for maximum speed.
#
BLD_FEATURE_SQUEEZE=0

#
#	Enable session management
#
BLD_FEATURE_SESSION=1

#
#	Build libraries as shared libraries or as static libraries
#
BLD_FEATURE_SHARED=1
BLD_FEATURE_STATIC=1

#
#	Link with a static system libc. Warning: this does not work effectively
#	with glibc because of references to libnss. Try uClibc if you want this.
#
BLD_FEATURE_STATIC_LINK_LIBC=0

################################################################################
#	Handlers and Modules Section
################################################################################
#
#	Admin handler
#
BLD_FEATURE_ADMIN_MODULE=1

#
#	Enable authorization checking
#
BLD_FEATURE_AUTH_MODULE=1

#
#	Support a C language API in addition to the C++ API.
#
BLD_FEATURE_C_API_MODULE=1

#
#	Ability to run commands (processes). Necessary if you want to use CGI
#
BLD_FEATURE_CGI_MODULE=1

#
#	Turn on the GoAhead WebServer API compatibility. Only necessary if you have
#	GoAhead WebServer implementation you want to migrate. 
#
BLD_FEATURE_COMPAT_MODULE=0

#
#	Copy page handler
#
BLD_FEATURE_COPY_MODULE=1

#
#	Embedded gateway interface (in-process CGI)
#
BLD_FEATURE_EGI_MODULE=1

#
#	Embedded JavaScript 
#
BLD_FEATURE_EJS_MODULE=1

#
#	Embedded Server Pages
#
BLD_FEATURE_ESP_MODULE=1

#
#	Enable OpenSSL
#
BLD_FEATURE_OPENSSL_MODULE=0

#
#	PHP4
#
BLD_FEATURE_PHP4_MODULE=0

#
#	PHP5
#
BLD_FEATURE_PHP5_MODULE=0

#
#	Build the samples
#
BLD_FEATURE_SAMPLES=0

#
#	Enable the SSL abstraction layer. The mpr and http modules both use this.
#
BLD_FEATURE_SSL_MODULE=0

#
#	Enable the Upload handler
#
BLD_FEATURE_UPLOAD_MODULE=0

#
#	Build the test suite
#
BLD_FEATURE_TEST=0

#
#	Enable the Xml Database (XDB)
#
BLD_FEATURE_XDB_MODULE=0

################################################################################
#	Loadable vs Builtin Module Section
################################################################################
#
#	Define which modules should be builtin and which should be loadable.
#	The build system can build both builtin and as a module for those who
#	need to distribute systems both ways.
#	Builtins load much quicker, run slightly faster and are a bit smaller.
#

BLD_FEATURE_AUTH_MODULE_BUILTIN=0
BLD_FEATURE_ADMIN_MODULE_BUILTIN=0
BLD_FEATURE_C_API_MODULE_BUILTIN=0
BLD_FEATURE_CGI_MODULE_BUILTIN=0
BLD_FEATURE_COMPAT_MODULE_BUILTIN=0
BLD_FEATURE_COPY_MODULE_BUILTIN=0
BLD_FEATURE_EGI_MODULE_BUILTIN=0
BLD_FEATURE_EJS_MODULE_BUILTIN=0
BLD_FEATURE_ESP_MODULE_BUILTIN=0
BLD_FEATURE_OPENSSL_MODULE_BUILTIN=0
BLD_FEATURE_PHP4_MODULE_BUILTIN=0
BLD_FEATURE_PHP5_MODULE_BUILTIN=0
BLD_FEATURE_SSL_MODULE_BUILTIN=0
BLD_FEATURE_UPLOAD_MODULE_BUILTIN=0
BLD_FEATURE_XDB_MODULE_BUILTIN=0

BLD_FEATURE_AUTH_MODULE_LOADABLE=1
BLD_FEATURE_ADMIN_MODULE_LOADABLE=1
BLD_FEATURE_C_API_MODULE_LOADABLE=1
BLD_FEATURE_CGI_MODULE_LOADABLE=1
BLD_FEATURE_COMPAT_MODULE_LOADABLE=1
BLD_FEATURE_COPY_MODULE_LOADABLE=1
BLD_FEATURE_EGI_MODULE_LOADABLE=1
BLD_FEATURE_EJS_MODULE_LOADABLE=1
BLD_FEATURE_ESP_MODULE_LOADABLE=1
BLD_FEATURE_OPENSSL_MODULE_LOADABLE=0
BLD_FEATURE_PHP4_MODULE_LOADABLE=0
BLD_FEATURE_PHP5_MODULE_LOADABLE=0
BLD_FEATURE_SSL_MODULE_LOADABLE=0
BLD_FEATURE_UPLOAD_MODULE_LOADABLE=0
BLD_FEATURE_XDB_MODULE_LOADABLE=0

################################################################################
#	Package Directories
################################################################################
#
#	Directories for Open SSL and PHP. Must make these relative to BLD_TOP,
#	no absolute paths here.
#
BLD_OPENSSL_DIR=.
BLD_PHP4_DIR=.
BLD_PHP4_LIBS=""
BLD_PHP5_DIR=.
BLD_PHP5_LIBS=""
BLD_OPENSSL_LIBS=""

################################################################################
#	Platform and O/S Configuration Section
################################################################################
#
#	Shell setup
#

if [ $BLD_OS = WIN ]
then
	PATH=${BLD_TOP}/bin:${BLD_TOP}/bin/${BLD_TYPE}:${PATH}
else
	PATH=${BLD_TOP}/bin:${PATH}
fi

export PATH

################################################################################
#
#	Standard programs
#

if [ "${BLD_OS}" = "WIN" ]
then
	BLD_AR=lib
	BLD_CC=cl
	BLD_CC_FOR_BUILD=${BLD_CC}
	BLD_JAVAC=javac
	BLD_LD=link
	BLD_LD_FOR_BUILD=${BLD_LD}
	BLD_RANLIB=true

else
	BLD_AR=ar
	BLD_CC="cc"
	BLD_CC_FOR_BUILD=${BLD_CC}
	BLD_JAVAC=javac
	BLD_LD=ld
	BLD_LD_FOR_BUILD=${BLD_LD}
	BLD_RANLIB=true
fi

BLD_CFLAGS=""
BLD_IFLAGS=""
BLD_LDFLAGS=""

################################################################################
#
#	Key file type extensions
#
#		BLD_ARCHIVE		# Library holding non-shared objects.
#		BLD_EXE			# Executable extension (.exe on Windows)
#		BLD_OBJ			# Non-position independent object type. Non-shared.
#		BLD_PIOBJ		# Position Independent object. Shared objects.
#		BLD_CLASS		# Java objects
#		BLD_SHLIB		# Shared library extension 
#		BLD_SHOBJ		# Shared object library extension
#

if [ "${BLD_OS}" = "WIN" ]
then
	BLD_ARCHIVE=.lib
	BLD_EXE=.exe
	BLD_OBJ=.obj
	BLD_PIOBJ=
	BLD_CLASS=.class
	BLD_SHLIB=.lib
	BLD_SHOBJ=.dll

else
	BLD_ARCHIVE=.a
	BLD_EXE=
	BLD_OBJ=.o
	BLD_PIOBJ=.lo
	BLD_CLASS=.class
	BLD_SHLIB=
	BLD_SHOBJ=.so
fi

################################################################################
#
#  Local variables:
#  tab-width: 4
#  c-basic-offset: 4
#  End:
#  vim600: sw=4 ts=4 fdm=marker
#  vim<600: sw=4 ts=4
#
