diff -Nuar iptables-1.4.3.2/extensions/libxt_time.c iptables/extensions/libxt_time.c
--- iptables-1.4.3.2/extensions/libxt_time.c	2009-04-06 21:09:17.000000000 +1000
+++ iptables/extensions/libxt_time.c	2014-10-23 17:24:12.192176809 +1000
@@ -19,6 +19,7 @@
 #include <stddef.h>
 #include <time.h>
 #include <limits.h>
+#include <ctype.h>
 
 #include <linux/netfilter/xt_time.h>
 #include <xtables.h>
@@ -37,6 +38,18 @@
 	NULL, "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun",
 };
 
+static const struct option time_opts_v0[] = {
+	{"datestart", true,  NULL, 'D'},
+	{"datestop",  true,  NULL, 'E'},
+	{"timestart", true,  NULL, 'X'},
+	{"timestop",  true,  NULL, 'Y'},
+	{"weekdays",  true,  NULL, 'w'},
+	{"monthdays", true,  NULL, 'm'},
+	{"localtz",   false, NULL, 'l'},
+	{"utc",       false, NULL, 'u'},
+	{ .name = NULL }
+};
+
 static const struct option time_opts[] = {
 	{"datestart", true,  NULL, 'D'},
 	{"datestop",  true,  NULL, 'E'},
@@ -46,6 +59,7 @@
 	{"monthdays", true,  NULL, 'm'},
 	{"localtz",   false, NULL, 'l'},
 	{"utc",       false, NULL, 'u'},
+	{"tz",        true,  NULL, 'z'},
 	{ .name = NULL }
 };
 
@@ -62,12 +76,13 @@
 "[!] --weekdays value     List of weekdays on which to match, sep. by comma\n"
 "                         (Possible days: Mon,Tue,Wed,Thu,Fri,Sat,Sun or 1 to 7\n"
 "                         Defaults to all weekdays.)\n"
-"    --localtz/--utc      Time is interpreted as UTC/local time\n");
+"    --localtz/--utc      Time is interpreted as UTC/local time\n"
+"    --tz tzspec          Time is interpreted using timezone spec\n");
 }
 
 static void time_init(struct xt_entry_match *m)
 {
-	struct xt_time_info *info = (void *)m->data;
+	struct xt_time_info1 *info = (void *)m->data;
 
 	/* By default, we match on every day, every daytime */
 	info->monthdays_match = XT_TIME_ALL_MONTHDAYS;
@@ -246,10 +261,199 @@
 	return ret;
 }
 
+static const char *time_parse_tz_time(const char *s, u_int32_t *t)
+{
+	unsigned int hour, minute = 0, second = 0;
+	const char *os = s;
+	char *e;
+
+	if (!isdigit(*s))
+		goto out;
+	hour = strtoul(s, &e, 10);
+	if (hour > 24)
+		goto out;
+	if (*e != ':')
+		goto eval;
+
+	s = e + 1;
+	if (!isdigit(*s))
+		goto out;
+	minute = strtoul(s, &e, 10);
+	if (minute > 59)
+		goto out;
+	if (*e != ':')
+		goto eval;
+
+	s = e + 1;
+	if (!isdigit(*s))
+		goto out;
+	second = strtoul(s, &e, 10);
+	if (second > 59)
+		goto out;
+
+ eval:
+	*t = 60 * 60 * hour + 60 * minute + second;
+	return e;
+
+ out:
+	xtables_error(PARAMETER_PROBLEM, "invalid time \"%s\" specified, "
+	           "should be hh[:mm[:ss]] format and within the boundaries",
+		   os);
+	return NULL;
+}
+
+static const char *time_parse_tz_offset(const char *s, int32_t *offset)
+{
+	int neg = 0;
+	u_int32_t t;
+
+	if (*s == '+')
+		s++;
+	else if (*s =='-') {
+		neg = 1;
+		s++;
+	}
+
+	s = time_parse_tz_time(s, &t);
+	*offset = neg ? -t : t;
+	return s;
+}
+
+static const char *time_parse_tz_rule(const char *s,
+		struct xt_time_info1 *info, int rule)
+{
+	unsigned long l;
+	const char *os = s;
+	char *e;
+
+	if (isdigit(*s)) {
+		info->tz[rule].type = XT_TIME_TZ_TYPE_J0;
+		l = strtoul(s, &e, 10);
+		if (l > 365)
+			goto out;
+		info->tz[rule].day = l;
+		s = e;
+	} else if (*s == 'J') {
+		info->tz[rule].type = XT_TIME_TZ_TYPE_J1;
+		s++;
+
+		if (!isdigit(*s))
+			goto out;
+		l = strtoul(s, &e, 10);
+		if (l < 1 || l > 365)
+			goto out;
+		info->tz[rule].day = l;
+		s = e;
+	} else if (*s == 'M') {
+		info->tz[rule].type = XT_TIME_TZ_TYPE_M;
+		s++;
+
+		l = strtoul(s, &e, 10);
+		if (l < 1 || l > 12)
+			goto out;
+		info->tz[rule].month = l;
+		if (*e != '.')
+			goto out;
+		s = e + 1;
+
+		l = strtoul(s, &e, 10);
+		if (l < 1 || l > 5)
+			goto out;
+		info->tz[rule].week = l;
+		if (*e != '.')
+			goto out;
+		s = e + 1;
+
+		l = strtoul(s, &e, 10);
+		if (l > 6)
+			goto out;
+		info->tz[rule].day = l;
+		s = e;
+	} else
+		goto out;
+
+	if (*s == '/')
+		s = time_parse_tz_time(s + 1, &info->tz[rule].secs);
+	else
+		info->tz[rule].secs = 2 * 60 * 60; /* 2:00:00 */
+
+	return s;
+
+out:
+	xtables_error(PARAMETER_PROBLEM,
+		      "invalid tz rule \"%s\" specified", os);
+	return NULL;
+}
+
+static void time_parse_tz(struct xt_time_info1 *info, const char *arg)
+{
+	const char *p;
+	size_t l;
+
+	/* Parse STD name and offset */
+	p = arg;
+	l = strcspn(p, "+-0123456789,");
+	if (l < 0 || l > 6)
+		xtables_error(PARAMETER_PROBLEM,
+			      "invalid or missing std name in %s", arg);
+	memcpy(info->tz[0].name, p, l);
+	p += l;
+
+	if (!*p || *p == ',')
+		xtables_error(PARAMETER_PROBLEM,
+			      "missing std offset in %s", arg);
+
+	p = time_parse_tz_offset(p, &info->tz[0].offset);
+
+	if (!*p) {
+		/* No DST */
+		info->tz[1].offset = info->tz[0].offset;
+		return;
+	}
+
+	/* Parse DST name and optional offset */
+	l = strcspn(p, "+-0123456789,");
+	if (l < 0 || l > 6)
+		xtables_error(PARAMETER_PROBLEM,
+			      "invalid or missing dst name in %s", arg);
+	memcpy(info->tz[1].name, p, l);
+	p += l;
+
+	if (!*p)
+		xtables_error(PARAMETER_PROBLEM,
+			      "missing dst offset or rule in %s", arg);
+
+	if (*p == ',') {
+		info->tz[1].offset = info->tz[0].offset + (60 * 60);
+	} else {
+		p = time_parse_tz_offset(p, &info->tz[1].offset);
+	}
+
+	/* Parse start rule */
+	if (*p == ',')
+		p++;
+	if (!*p)
+		xtables_error(PARAMETER_PROBLEM,
+			      "missing dst start rule in %s", arg);
+	p = time_parse_tz_rule(p, info, 0);
+
+	/* Parse end rule */
+	if (*p == ',')
+		p++;
+	if (!*p)
+		xtables_error(PARAMETER_PROBLEM,
+			      "missing dst end rule in %s", arg);
+	p = time_parse_tz_rule(p, info, 1);
+
+	if (*p)
+		xtables_error(PARAMETER_PROBLEM,
+			      "invalid tz %s", arg);
+}
+
 static int time_parse(int c, char **argv, int invert, unsigned int *flags,
                       const void *entry, struct xt_entry_match **match)
 {
-	struct xt_time_info *info = (void *)(*match)->data;
+	struct xt_time_info1 *info = (void *)(*match)->data;
 
 	switch (c) {
 	case 'D': /* --datestart */
@@ -295,7 +499,7 @@
 	case 'l': /* --localtz */
 		if (*flags & F_TIMEZONE)
 			xtables_error(PARAMETER_PROBLEM,
-			           "Can only specify exactly one of --localtz or --utc");
+			           "Can only specify exactly one of --tz, --localtz or --utc");
 		info->flags |= XT_TIME_LOCAL_TZ;
 		*flags |= F_TIMEZONE;
 		return 1;
@@ -320,8 +524,17 @@
 	case 'u': /* --utc */
 		if (*flags & F_TIMEZONE)
 			xtables_error(PARAMETER_PROBLEM,
-			           "Can only specify exactly one of --localtz or --utc");
+			           "Can only specify exactly one of --tz, --localtz or --utc");
+		info->flags &= ~XT_TIME_LOCAL_TZ;
+		*flags |= F_TIMEZONE;
+		return 1;
+	case 'z': /* --tz */
+		if (*flags & F_TIMEZONE)
+			xtables_error(PARAMETER_PROBLEM,
+			           "Can only specify exactly one of --tz, --localtz or --utc");
 		info->flags &= ~XT_TIME_LOCAL_TZ;
+		info->flags |= XT_TIME_TZ;
+		time_parse_tz(info, optarg);
 		*flags |= F_TIMEZONE;
 		return 1;
 	}
@@ -403,10 +616,65 @@
 	*hours    = fulltime / 60;
 }
 
+static void time_print_tz_offset(const struct xt_time_info1 *info, int rule)
+{
+	unsigned int h, m, s;
+
+	printf("%s", info->tz[rule].name);
+	if (info->tz[rule].offset < 0) {
+		printf("-");
+		divide_time(-info->tz[rule].offset, &h, &m, &s);
+	} else
+		divide_time(info->tz[rule].offset, &h, &m, &s);
+	if (s)
+		printf("%u:%02u:%02u", h, m, s);
+	else if (m)
+		printf("%u:%02u", h, m);
+	else
+		printf("%u", h);
+
+}
+
+static void time_print_tz_rule(const struct xt_time_info1 *info, int rule)
+{
+	unsigned int h, m, s;
+
+	printf(",");
+	switch (info->tz[rule].type) {
+	case XT_TIME_TZ_TYPE_J0:
+		printf("%u", info->tz[rule].day);
+		break;
+	case XT_TIME_TZ_TYPE_J1:
+		printf("J%u", info->tz[rule].day);
+		break;
+	case XT_TIME_TZ_TYPE_M:
+		printf("M%u.%u.%u", info->tz[rule].month,
+		       info->tz[rule].week, info->tz[rule].day);
+	}
+	printf("/");
+	divide_time(info->tz[rule].secs, &h, &m, &s);
+	if (s)
+		printf("%u:%02u:%02u", h, m, s);
+	else if (m)
+		printf("%u:%02u", h, m);
+	else
+		printf("%u", h);
+}
+
+static void time_print_tz(const struct xt_time_info1 *info)
+{
+	time_print_tz_offset(info, 0);
+	if (info->tz[0].offset == info->tz[1].offset)
+		return;
+	time_print_tz_offset(info, 1);
+	time_print_tz_rule(info, 0);
+	time_print_tz_rule(info, 1);
+}
+
 static void time_print(const void *ip, const struct xt_entry_match *match,
                        int numeric)
 {
-	struct xt_time_info *info = (void *)match->data;
+	struct xt_time_info1 *info = (void *)match->data;
 	unsigned int h, m, s;
 
 	printf("TIME ");
@@ -434,13 +702,15 @@
 		printf("until date ");
 		time_print_date(info->date_stop, NULL);
 	}
-	if (!(info->flags & XT_TIME_LOCAL_TZ))
+	if (info->flags & XT_TIME_TZ)
+		time_print_tz(info);
+	else if (!(info->flags & XT_TIME_LOCAL_TZ))
 		printf("UTC ");
 }
 
 static void time_save(const void *ip, const struct xt_entry_match *match)
 {
-	const struct xt_time_info *info = (const void *)match->data;
+	const struct xt_time_info1 *info = (const void *)match->data;
 	unsigned int h, m, s;
 
 	if (info->daytime_start != XT_TIME_MIN_DAYTIME ||
@@ -461,12 +731,17 @@
 	}
 	time_print_date(info->date_start, "--datestart");
 	time_print_date(info->date_stop, "--datestop");
-	if (!(info->flags & XT_TIME_LOCAL_TZ))
+	if (info->flags & XT_TIME_TZ) {
+		printf("--tz ");
+		time_print_tz(info);
+		printf(" ");
+	} else if (!(info->flags & XT_TIME_LOCAL_TZ))
 		printf("--utc ");
 }
 
-static struct xtables_match time_match = {
+static struct xtables_match time_match_v0 = {
 	.name          = "time",
+	.revision      = 0,
 	.family        = AF_UNSPEC,
 	.version       = XTABLES_VERSION,
 	.size          = XT_ALIGN(sizeof(struct xt_time_info)),
@@ -476,10 +751,26 @@
 	.parse         = time_parse,
 	.print         = time_print,
 	.save          = time_save,
+	.extra_opts    = time_opts_v0,
+};
+
+static struct xtables_match time_match = {
+	.name          = "time",
+	.revision      = 1,
+	.family        = AF_UNSPEC,
+	.version       = XTABLES_VERSION,
+	.size          = XT_ALIGN(sizeof(struct xt_time_info1)),
+	.userspacesize = XT_ALIGN(sizeof(struct xt_time_info1)),
+	.help          = time_help,
+	.init          = time_init,
+	.parse         = time_parse,
+	.print         = time_print,
+	.save          = time_save,
 	.extra_opts    = time_opts,
 };
 
 void _init(void)
 {
+	xtables_register_match(&time_match_v0);
 	xtables_register_match(&time_match);
 }
diff -Nuar iptables-1.4.3.2/include/linux/netfilter/xt_time.h iptables/include/linux/netfilter/xt_time.h
--- iptables-1.4.3.2/include/linux/netfilter/xt_time.h	2009-04-06 21:09:17.000000000 +1000
+++ iptables/include/linux/netfilter/xt_time.h	2014-10-23 17:24:12.200176809 +1000
@@ -11,9 +11,37 @@
 	u_int8_t flags;
 };
 
+struct xt_time_priv;
+
+struct xt_time_info1 {
+	u_int32_t date_start;
+	u_int32_t date_stop;
+	u_int32_t daytime_start;
+	u_int32_t daytime_stop;
+	u_int32_t monthdays_match;
+	u_int8_t weekdays_match;
+	u_int8_t flags;
+	struct {
+		char name[7];
+		u_int8_t type;    /* XT_TIME_TZ_TYPE_* */
+		u_int8_t month;   /* 1-12 */
+		u_int8_t week;    /* 1-5 */
+		u_int16_t day;    /* 0-6 or 0-365 or 1-365 */
+		u_int32_t secs;
+		int32_t offset;
+	} tz[2];
+	struct xt_time_priv *master;
+};
+
 enum {
 	/* Match against local time (instead of UTC) */
 	XT_TIME_LOCAL_TZ = 1 << 0,
+	/* Match against given timezone (instead of UTC) */
+	XT_TIME_TZ       = 1 << 1,
+
+	XT_TIME_TZ_TYPE_J0 = 0, /* Zero-based Julian day, 0-365 */
+	XT_TIME_TZ_TYPE_J1 = 1, /* Julian day, 1-365, no leap day */
+	XT_TIME_TZ_TYPE_M  = 2, /* Month, week and day */
 
 	/* Shortcuts */
 	XT_TIME_ALL_MONTHDAYS = 0xFFFFFFFE,
