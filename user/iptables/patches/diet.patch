
Disable extensions that aren't supported by linux/.config

Index: iptables-1.8.10/extensions/GNUmakefile.in
===================================================================
--- iptables-1.8.10.orig/extensions/GNUmakefile.in
+++ iptables-1.8.10/extensions/GNUmakefile.in
@@ -50,6 +50,75 @@ pfb_build_mod := $(filter-out @blacklist
 pfa_build_mod := $(filter-out @blacklist_modules@ @blacklist_a_modules@,${pfa_build_mod})
 pf4_build_mod := $(filter-out @blacklist_modules@ @blacklist_4_modules@,${pf4_build_mod})
 pf6_build_mod := $(filter-out @blacklist_modules@ @blacklist_6_modules@,${pf6_build_mod})
+
+
+# Disable the extensions where kernel support is known to be disabled.
+
+-include $(ROOTDIR)/$(LINUXDIR)/.config
+pfx_build_mod_PREFIX_ := CONFIG_NETFILTER_XT_TARGET_
+pfx_build_mod_prefix_ := CONFIG_NETFILTER_XT_MATCH_
+pfb_build_mod_prefix_ := CONFIG_BRIDGE_EBT_
+pfa_build_mod_prefix_ := CONFIG_IP_NF_ARP_
+pf4_build_mod_PREFIX_ := CONFIG_IP_NF_TARGET_
+pf4_build_mod_prefix_ := CONFIG_IP_NF_MATCH_
+pf6_build_mod_PREFIX_ := CONFIG_IP6_NF_TARGET_
+pf6_build_mod_prefix_ := CONFIG_IP6_NF_MATCH_
+
+# The mapping between kernel config and module support is mostly
+# straightforward, but complicated by aliasing.
+alias_CONFIG_BRIDGE_EBT_MARK = CONFIG_BRIDGE_EBT_MARK_T
+alias_CONFIG_BRIDGE_EBT_MARK_M = CONFIG_BRIDGE_EBT_MARK
+alias_CONFIG_IP6_NF_TARGET_DNPT = CONFIG_IP6_NF_TARGET_NPT
+alias_CONFIG_IP6_NF_TARGET_HL = CONFIG_NETFILTER_XT_TARGET_HL
+alias_CONFIG_IP6_NF_TARGET_NETMAP = CONFIG_NETFILTER_XT_TARGET_NETMAP
+alias_CONFIG_IP6_NF_TARGET_SNPT = CONFIG_IP6_NF_TARGET_NPT
+alias_CONFIG_IP6_NF_MATCH_DST = CONFIG_IP6_NF_MATCH_OPTS
+alias_CONFIG_IP6_NF_MATCH_HBH = CONFIG_IP6_NF_MATCH_OPTS
+alias_CONFIG_IP6_NF_MATCH_HL = CONFIG_NETFILTER_XT_MATCH_HL
+alias_CONFIG_IP6_NF_MATCH_ICMP6 = CONFIG_NETFILTER_XTABLES
+# alias_CONFIG_IP_NF_TARGET_CLUSTERIP =  not found
+alias_CONFIG_IP_NF_TARGET_NETMAP = CONFIG_NETFILTER_XT_TARGET_NETMAP
+alias_CONFIG_IP_NF_TARGET_TTL = CONFIG_NETFILTER_XT_TARGET_HL
+# alias_CONFIG_IP_NF_TARGET_ULOG =  not found
+alias_CONFIG_IP_NF_MATCH_ICMP = CONFIG_NETFILTER_XTABLES
+alias_CONFIG_IP_NF_MATCH_REALM = CONFIG_NETFILTER_XT_MATCH_REALM
+alias_CONFIG_IP_NF_MATCH_TTL = CONFIG_NETFILTER_XT_MATCH_HL
+alias_CONFIG_NETFILTER_XT_TARGET_CONNMARK = CONFIG_NETFILTER_XT_CONNMARK
+alias_CONFIG_NETFILTER_XT_TARGET_MARK = CONFIG_NETFILTER_XT_MARK
+alias_CONFIG_NETFILTER_XT_TARGET_NAT = CONFIG_NF_NAT
+alias_CONFIG_NETFILTER_XT_TARGET_SET = CONFIG_NETFILTER_XT_SET
+alias_CONFIG_NETFILTER_XT_TARGET_SYNPROXY = IP_NF_TARGET_SYNPROXY
+alias_CONFIG_NETFILTER_XT_TARGET_TOS = CONFIG_NETFILTER_XT_TARGET_DSCP
+alias_CONFIG_NETFILTER_XT_MATCH_CONNMARK = CONFIG_NETFILTER_XT_CONNMARK
+alias_CONFIG_NETFILTER_XT_MATCH_MARK = CONFIG_NETFILTER_XT_MARK
+alias_CONFIG_NETFILTER_XT_MATCH_RPFILTER = CONFIG_IP_NF_MATCH_RPFILTER
+alias_CONFIG_NETFILTER_XT_MATCH_SET = CONFIG_NETFILTER_XT_SET
+alias_CONFIG_NETFILTER_XT_MATCH_STANDARD = CONFIG_NETFILTER_XTABLES
+alias_CONFIG_NETFILTER_XT_MATCH_TCP = CONFIG_NETFILTER_XTABLES
+alias_CONFIG_NETFILTER_XT_MATCH_TOS = CONFIG_NETFILTER_XT_MATCH_DSCP
+alias_CONFIG_NETFILTER_XT_MATCH_UDP = CONFIG_NETFILTER_XTABLES
+
+_disable_unconfigured_modules_in_var = \
+    $(foreach m,$($1),$(call _disable_unconfigured_module_in_var,$m,$1,$2))
+_disable_unconfigured_module_in_var = \
+    $(if $(_contains_lowercase),\
+        $(call _disable_module_ifndef,$1,$2,$3,$($2_prefix_)$(_to_uppercase)),\
+        $(call _disable_module_ifndef,$1,$2,$3,$($2_PREFIX_)$1))
+_disable_module_ifndef = \
+    $(if $(or $($4),$(alias_$4)),,$(_disable_module))
+_disable_module = \
+    $(info Removing netfilter extension $3_$1 from $2 because $(alias_$4:%=%/)$4 is not set)\
+    $(eval $2 := $$(filter-out $1,$$($2)))
+_contains_lowercase = $(shell echo $1|grep '[a-z]')
+_to_uppercase = $(shell echo $1|tr a-z A-Z)
+
+$(call _disable_unconfigured_modules_in_var,pfx_build_mod,xt)
+$(call _disable_unconfigured_modules_in_var,pfb_build_mod,ebt)
+$(call _disable_unconfigured_modules_in_var,pfa_build_mod,arpt)
+$(call _disable_unconfigured_modules_in_var,pf4_build_mod,ipt)
+$(call _disable_unconfigured_modules_in_var,pf6_build_mod,ip6t)
+
+
 pfx_objs      := $(patsubst %,libxt_%.o,${pfx_build_mod})
 pfb_objs      := $(patsubst %,libebt_%.o,${pfb_build_mod})
 pfa_objs      := $(patsubst %,libarpt_%.o,${pfa_build_mod})
