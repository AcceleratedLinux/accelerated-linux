--- wpa_supplicant-2.9/wpa_supplicant/main.c.orig	2020-02-04 09:21:57.979462792 +1000
+++ wpa_supplicant-2.9/wpa_supplicant/main.c	2020-02-04 09:42:25.423477722 +1000
@@ -201,7 +201,7 @@
 
 	for (;;) {
 		c = getopt(argc, argv,
-			   "b:Bc:C:D:de:f:g:G:hi:I:KLMm:No:O:p:P:qsTtuvW");
+			   "b:Bc:C:D:de:f:g:G:hi:I:KLMm:No:O:p:P:qrsTtuvW");
 		if (c < 0)
 			break;
 		switch (c) {
@@ -282,6 +282,9 @@
 		case 'q':
 			params.wpa_debug_level++;
 			break;
+		case 'r':
+			params.ignore_throughput = 1;
+			break;
 #ifdef CONFIG_DEBUG_SYSLOG
 		case 's':
 			params.wpa_debug_syslog++;
--- wpa_supplicant-2.9/wpa_supplicant/wpa_supplicant_i.h.orig	2020-02-04 09:22:12.087462964 +1000
+++ wpa_supplicant-2.9/wpa_supplicant/wpa_supplicant_i.h	2020-02-04 09:43:52.435478781 +1000
@@ -241,6 +241,11 @@
 	 */
 	int match_iface_count;
 #endif /* CONFIG_MATCH_IFACE */
+
+	/**
+	 * ignore throughput estimation in roaming decision
+	 */
+	char ignore_throughput;
 };
 
 struct p2p_srv_bonjour {
--- wpa_supplicant-2.9/wpa_supplicant/wpa_supplicant.c.orig	2020-02-04 09:22:30.423463187 +1000
+++ wpa_supplicant-2.9/wpa_supplicant/wpa_supplicant.c	2020-02-04 09:51:28.991484334 +1000
@@ -6407,6 +6407,7 @@
 		return NULL;
 	dl_list_init(&global->p2p_srv_bonjour);
 	dl_list_init(&global->p2p_srv_upnp);
+	global->params.ignore_throughput = params->ignore_throughput;
 	global->params.daemonize = params->daemonize;
 	global->params.wait_for_monitor = params->wait_for_monitor;
 	global->params.dbus_ctrl_interface = params->dbus_ctrl_interface;
--- wpa_supplicant-2.9/wpa_supplicant/events.c.orig	2020-02-04 11:05:04.087538036 +1000
+++ wpa_supplicant-2.9/wpa_supplicant/events.c	2020-02-04 11:13:27.899544164 +1000
@@ -1390,6 +1390,7 @@
 			  int only_first_ssid)
 {
 	unsigned int i;
+	struct wpa_bss *current_bss;
 
 	if (wpa_s->current_ssid) {
 		struct wpa_ssid *ssid;
@@ -1417,9 +1418,22 @@
 		wpa_dbg(wpa_s, MSG_DEBUG, "Selecting BSS from priority group %d",
 			group->priority);
 
+	if (wpa_s->global->params.ignore_throughput) {
+		if (wpa_s->current_ssid && wpa_s->current_ssid->ssid)
+			current_bss = wpa_bss_get(wpa_s, wpa_s->bssid,
+						  wpa_s->current_ssid->ssid,
+						  wpa_s->current_ssid->ssid_len);
+		if (!current_bss)
+			current_bss = wpa_bss_get_bssid(wpa_s, wpa_s->bssid);
+	}
+
 	for (i = 0; i < wpa_s->last_scan_res_used; i++) {
 		struct wpa_bss *bss = wpa_s->last_scan_res[i];
 
+		if (wpa_s->global->params.ignore_throughput && current_bss && current_bss->bssid && !memcmp(current_bss->bssid, bss->bssid, ETH_ALEN)) {
+			continue;
+		}
+
 		wpa_s->owe_transition_select = 1;
 		*selected_ssid = wpa_scan_res_match(wpa_s, i, bss, group,
 						    only_first_ssid, 1);
@@ -1711,10 +1725,12 @@
 		return 1;
 	}
 
-	if (selected->est_throughput > current_bss->est_throughput + 5000) {
-		wpa_dbg(wpa_s, MSG_DEBUG,
-			"Allow reassociation - selected BSS has better estimated throughput");
-		return 1;
+	if (!wpa_s->global->params.ignore_throughput) {
+		if (selected->est_throughput > current_bss->est_throughput + 5000) {
+			wpa_dbg(wpa_s, MSG_DEBUG,
+				"Allow reassociation - selected BSS has better estimated throughput");
+			return 1;
+		}
 	}
 
 	to_5ghz = selected->freq > 4000 && current_bss->freq < 4000;
