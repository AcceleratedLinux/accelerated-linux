From 276199661d38e71ee098cbec79076622815733cf Mon Sep 17 00:00:00 2001
From: Anubhav Gupta <anubhav.gupta@digi.com>
Date: Tue, 28 Jun 2022 16:58:52 -0400
Subject: [PATCH] Added --qdu-ota-update option to update Thales modems using
 mbimcli

---
 data/Makefile.am                              |   1 +
 data/mbim-service-qdu.json                    |  59 ++++
 docs/man/Makefile.am                          |   1 +
 docs/reference/libmbim-glib/Makefile.am       |   1 +
 .../libmbim-glib/libmbim-glib-common.sections |  30 ++
 .../libmbim-glib/libmbim-glib-docs.xml        |   5 +
 src/libmbim-glib/generated/Makefile.am        |  12 +
 src/libmbim-glib/libmbim-glib.h               |   1 +
 src/libmbim-glib/mbim-cid.c                   |  15 +
 src/libmbim-glib/mbim-cid.h                   |  18 +
 src/libmbim-glib/mbim-device.c                |  67 ++--
 src/libmbim-glib/mbim-enums.h                 |  85 +++++
 src/libmbim-glib/mbim-message.c               |   4 +
 src/libmbim-glib/mbim-uuid.c                  |  10 +
 src/libmbim-glib/mbim-uuid.h                  |  11 +
 src/mbimcli/Makefile.am                       |   1 +
 src/mbimcli/mbimcli-qdu.c                     | 317 ++++++++++++++++++
 src/mbimcli/mbimcli.c                         |   9 +-
 src/mbimcli/mbimcli.h                         |   4 +
 19 files changed, 613 insertions(+), 38 deletions(-)
 create mode 100644 data/mbim-service-qdu.json
 create mode 100644 src/mbimcli/mbimcli-qdu.c

diff --git a/data/Makefile.am b/data/Makefile.am
index 1c325f2..2a10e12 100644
--- a/data/Makefile.am
+++ b/data/Makefile.am
@@ -13,5 +13,6 @@ EXTRA_DIST = \
 	mbim-service-proxy-control.json \
 	mbim-service-qmi.json \
 	mbim-service-atds.json \
+	mbim-service-qdu.json \
 	mbim-service-intel-firmware-update.json \
 	mbim-service-ms-basic-connect-extensions.json
diff --git a/data/mbim-service-qdu.json b/data/mbim-service-qdu.json
new file mode 100644
index 0000000..0708b4a
--- /dev/null
+++ b/data/mbim-service-qdu.json
@@ -0,0 +1,59 @@
+[
+  // *********************************************************************************
+  { "type" : "Service",
+    "name" : "QDU" },
+
+  // *********************************************************************************
+  { "name"     : "Update Session",
+    "service"  : "QDU",
+    "type"     : "Command",
+    "since"    : "1.26",
+    "set"      : [ { "name"             : "SessionAction",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduSessionAction" },
+                   { "name"             : "SessionType",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduSessionType" } ],
+    "query"    : [],
+    "response" : [ { "name"             : "CurrentSessionType",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduSessionType" },
+                   { "name"             : "CurrentSessionStatus",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduSessionStatus" },
+                   { "name"             : "LastSessionType",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduSessionType" },
+                   { "name"             : "LastSessionResult",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduSessionResult" },
+                   { "name"             : "LastSessionErrorOffset",
+                     "format"           : "guint32" },
+                   { "name"             : "LastSessionErrorSize",
+                     "format"           : "guint32" } ] },
+
+  // *********************************************************************************
+  { "name"     : "File Open",
+    "service"  : "QDU",
+    "type"     : "Command",
+    "since"    : "1.26",
+    "set"      : [ { "name"             : "FileType",
+                     "format"           : "guint32",
+                     "public-format"    : "MbimQduFileType" },
+                   { "name"             : "FileSize",
+                     "format"           : "guint32" } ],
+    "query"    : [],
+    "response" : [ { "name"             : "MaxTransferSize",
+                     "format"           : "guint32" },
+                   { "name"             : "MaxWindowSize",
+                     "format"           : "guint32" } ] },
+
+  // *********************************************************************************
+  { "name"     : "File Write",
+    "service"  : "QDU",
+    "type"     : "Command",
+    "since"    : "1.26",
+    "set"      : [ { "name"   : "DataBuffer",
+                     "format" : "unsized-byte-array" } ],
+    "response" : []}
+]
diff --git a/docs/man/Makefile.am b/docs/man/Makefile.am
index f31c336..f1afa66 100644
--- a/docs/man/Makefile.am
+++ b/docs/man/Makefile.am
@@ -11,6 +11,7 @@ MBIMCLI_SOURCES_WITH_HELP = \
 	$(top_srcdir)/src/mbimcli/mbimcli-dss.c \
 	$(top_srcdir)/src/mbimcli/mbimcli-ms-firmware-id.c \
 	$(top_srcdir)/src/mbimcli/mbimcli-ms-host-shutdown.c \
+	$(top_srcdir)/src/mbimcli/mbimcli-qdu.c \
 	$(top_srcdir)/src/mbimcli/mbimcli-intel-firmware-update.c \
 	$(top_srcdir)/src/mbimcli/mbimcli-phonebook.c \
 	$(top_srcdir)/src/mbimcli/mbimcli.c
diff --git a/docs/reference/libmbim-glib/Makefile.am b/docs/reference/libmbim-glib/Makefile.am
index 3844a11..da35805 100644
--- a/docs/reference/libmbim-glib/Makefile.am
+++ b/docs/reference/libmbim-glib/Makefile.am
@@ -19,6 +19,7 @@ ALL_SECTIONS = \
 	$(top_builddir)/src/libmbim-glib/generated/mbim-ms-host-shutdown.sections \
 	$(top_builddir)/src/libmbim-glib/generated/mbim-qmi.sections \
 	$(top_builddir)/src/libmbim-glib/generated/mbim-atds.sections \
+	$(top_builddir)/src/libmbim-glib/generated/mbim-qdu.sections \
 	$(top_builddir)/src/libmbim-glib/generated/mbim-intel-firmware-update.sections \
 	$(top_builddir)/src/libmbim-glib/generated/mbim-ms-basic-connect-extensions.sections
 
diff --git a/docs/reference/libmbim-glib/libmbim-glib-common.sections b/docs/reference/libmbim-glib/libmbim-glib-common.sections
index c461202..aa59f6f 100644
--- a/docs/reference/libmbim-glib/libmbim-glib-common.sections
+++ b/docs/reference/libmbim-glib/libmbim-glib-common.sections
@@ -61,6 +61,7 @@ MbimCidMsFirmwareId
 MbimCidMsHostShutdown
 MbimCidProxyControl
 MbimCidQmi
+MbimCidQdu
 MbimCidIntelFirmwareUpdate
 MbimCidMsBasicConnectExtensions
 <SUBSECTION Methods>
@@ -80,6 +81,7 @@ mbim_cid_ms_firmware_id_get_string
 mbim_cid_ms_host_shutdown_get_string
 mbim_cid_proxy_control_get_string
 mbim_cid_qmi_get_string
+mbim_cid_qdu_get_string
 mbim_cid_intel_firmware_update_get_string
 mbim_cid_ms_basic_connect_extensions_get_string
 <SUBSECTION Private>
@@ -95,6 +97,7 @@ mbim_cid_ms_firmware_id_build_string_from_mask
 mbim_cid_ms_host_shutdown_build_string_from_mask
 mbim_cid_proxy_control_build_string_from_mask
 mbim_cid_qmi_build_string_from_mask
+mbim_cid_qdu_build_string_from_mask
 mbim_cid_intel_firmware_update_build_string_from_mask
 mbim_cid_ms_basic_connect_extensions_build_string_from_mask
 <SUBSECTION Standard>
@@ -110,6 +113,7 @@ MBIM_TYPE_CID_MS_FIRMWARE_ID
 MBIM_TYPE_CID_MS_HOST_SHUTDOWN
 MBIM_TYPE_CID_PROXY_CONTROL
 MBIM_TYPE_CID_QMI
+MBIM_TYPE_CID_QDU
 MBIM_TYPE_CID_INTEL_FIRMWARE_UPDATE
 MBIM_TYPE_CID_MS_BASIC_CONNECT_EXTENSIONS
 mbim_cid_atds_get_type
@@ -124,6 +128,7 @@ mbim_cid_ms_firmware_id_get_type
 mbim_cid_ms_host_shutdown_get_type
 mbim_cid_proxy_control_get_type
 mbim_cid_qmi_get_type
+mbim_cid_qdu_get_type
 mbim_cid_intel_firmware_update_get_type
 mbim_cid_ms_basic_connect_extensions_get_type
 </SECTION>
@@ -315,6 +320,11 @@ MbimStkPacType
 MbimNetworkIdleHintState
 MbimEmergencyModeState
 MbimDssLinkState
+MbimQduFileType
+MbimQduSessionAction
+MbimQduSessionType
+MbimQduSessionStatus
+MbimQduSessionResult
 MbimPcoType
 MbimContextSource
 MbimLteAttachContextOperation
@@ -376,6 +386,11 @@ mbim_context_source_get_string
 mbim_lte_attach_context_operation_get_string
 mbim_lte_attach_context_roaming_control_get_string
 mbim_lte_attach_state_get_string
+mbim_qdu_file_type_get_string
+mbim_qdu_session_action_get_string
+mbim_qdu_session_result_get_string
+mbim_qdu_session_status_get_string
+mbim_qdu_session_type_get_string
 <SUBSECTION Private>
 mbim_device_type_build_string_from_mask
 mbim_cellular_class_get_string
@@ -434,6 +449,11 @@ mbim_context_source_build_string_from_mask
 mbim_lte_attach_context_operation_build_string_from_mask
 mbim_lte_attach_context_roaming_control_build_string_from_mask
 mbim_lte_attach_state_build_string_from_mask
+mbim_qdu_file_type_build_string_from_mask
+mbim_qdu_session_action_build_string_from_mask
+mbim_qdu_session_result_build_string_from_mask
+mbim_qdu_session_status_build_string_from_mask
+mbim_qdu_session_type_build_string_from_mask
 <SUBSECTION Standard>
 MBIM_TYPE_ACTIVATION_COMMAND
 MBIM_TYPE_ACTIVATION_STATE
@@ -495,6 +515,11 @@ MBIM_TYPE_CONTEXT_SOURCE
 MBIM_TYPE_LTE_ATTACH_CONTEXT_OPERATION
 MBIM_TYPE_LTE_ATTACH_CONTEXT_ROAMING_CONTROL
 MBIM_TYPE_LTE_ATTACH_STATE
+MBIM_TYPE_QDU_FILE_TYPE
+MBIM_TYPE_QDU_SESSION_ACTION
+MBIM_TYPE_QDU_SESSION_RESULT
+MBIM_TYPE_QDU_SESSION_STATUS
+MBIM_TYPE_QDU_SESSION_TYPE
 mbim_activation_command_get_type
 mbim_activation_state_get_type
 mbim_auth_protocol_get_type
@@ -555,6 +580,11 @@ mbim_context_source_get_type
 mbim_lte_attach_context_operation_get_type
 mbim_lte_attach_context_roaming_control_get_type
 mbim_lte_attach_state_get_type
+mbim_qdu_file_type_get_type
+mbim_qdu_session_action_get_type
+mbim_qdu_session_result_get_type
+mbim_qdu_session_status_get_type
+mbim_qdu_session_type_get_type
 </SECTION>
 
 <SECTION>
diff --git a/docs/reference/libmbim-glib/libmbim-glib-docs.xml b/docs/reference/libmbim-glib/libmbim-glib-docs.xml
index 97ec4ee..b24943b 100644
--- a/docs/reference/libmbim-glib/libmbim-glib-docs.xml
+++ b/docs/reference/libmbim-glib/libmbim-glib-docs.xml
@@ -90,6 +90,11 @@
     <xi:include href="xml/mbim-intel-firmware-update.xml"/>
   </chapter>
 
+  <chapter>
+    <title>QDU-defined Services</title>
+    <xi:include href="xml/mbim-qdu.xml"/>
+  </chapter>
+
   <chapter>
     <title>Compatibility</title>
     <xi:include href="xml/mbim-compat.xml"/>
diff --git a/src/libmbim-glib/generated/Makefile.am b/src/libmbim-glib/generated/Makefile.am
index ee0932e..d944219 100644
--- a/src/libmbim-glib/generated/Makefile.am
+++ b/src/libmbim-glib/generated/Makefile.am
@@ -16,6 +16,7 @@ GENERATED_H = \
 	mbim-qmi.h \
 	mbim-atds.h \
 	mbim-intel-firmware-update.h \
+	mbim-qdu.h \
 	mbim-ms-basic-connect-extensions.h
 
 GENERATED_C = \
@@ -35,6 +36,7 @@ GENERATED_C = \
 	mbim-qmi.c \
 	mbim-atds.c \
 	mbim-intel-firmware-update.c \
+	mbim-qdu.c \
 	mbim-ms-basic-connect-extensions.c
 
 GENERATED_SECTIONS = \
@@ -51,6 +53,7 @@ GENERATED_SECTIONS = \
 	mbim-qmi.sections \
 	mbim-atds.sections \
 	mbim-intel-firmware-update.sections \
+	mbim-qdu.sections \
 	mbim-ms-basic-connect-extensions.sections
 
 # Error types
@@ -209,6 +212,15 @@ mbim-intel-firmware-update.h mbim-intel-firmware-update.c mbim-intel-firmware-up
 			--input $(top_srcdir)/data/mbim-service-intel-firmware-update.json \
 			--output mbim-intel-firmware-update
 
+# QDU Service
+mbim-qdu.h mbim-qdu.c mbim-qdu.sections: $(top_srcdir)/data/mbim-service-qdu.json $(top_srcdir)/build-aux/mbim-codegen/*.py $(top_srcdir)/build-aux/mbim-codegen/mbim-codegen
+	$(AM_V_GEN)  \
+		rm -f mbim-qdu.h && \
+		rm -f mbim-qdu.c && \
+		$(PYTHON) $(top_srcdir)/build-aux/mbim-codegen/mbim-codegen \
+			--input $(top_srcdir)/data/mbim-service-qdu.json \
+			--output mbim-qdu
+
 # Microsoft Basic Connect Extensions service
 mbim-ms-basic-connect-extensions.h mbim-ms-basic-connect-extensions.c mbim-ms-basic-connect-extensions.sections: $(top_srcdir)/data/mbim-service-ms-basic-connect-extensions.json $(top_srcdir)/build-aux/mbim-codegen/*.py $(top_srcdir)/build-aux/mbim-codegen/mbim-codegen
 	$(AM_V_GEN)  \
diff --git a/src/libmbim-glib/libmbim-glib.h b/src/libmbim-glib/libmbim-glib.h
index 6af2953..9b28452 100644
--- a/src/libmbim-glib/libmbim-glib.h
+++ b/src/libmbim-glib/libmbim-glib.h
@@ -50,6 +50,7 @@
 #include "mbim-ms-host-shutdown.h"
 #include "mbim-qmi.h"
 #include "mbim-atds.h"
+#include "mbim-qdu.h"
 #include "mbim-intel-firmware-update.h"
 #include "mbim-ms-basic-connect-extensions.h"
 
diff --git a/src/libmbim-glib/mbim-cid.c b/src/libmbim-glib/mbim-cid.c
index ca2bb63..c0c6e33 100644
--- a/src/libmbim-glib/mbim-cid.c
+++ b/src/libmbim-glib/mbim-cid.c
@@ -170,6 +170,13 @@ static const CidConfig cid_ms_basic_connect_extensions_config [MBIM_CID_MS_BASIC
     { SET,    NO_QUERY, NO_NOTIFY }, /* MBIM_CID_MS_BASIC_CONNECT_EXTENSIONS_DEVICE_RESET */
 };
 
+/* Note: index of the array is CID-1 */
+#define MBIM_CID_QDU_LAST MBIM_CID_QDU_FILE_WRITE
+static const CidConfig cid_qdu_config [MBIM_CID_QDU_LAST] = {
+    { SET,    QUERY,    NOTIFY    }, /* MBIM_CID_QDU_UPDATE_SESSION */
+    { SET,    NO_QUERY, NO_NOTIFY }, /* MBIM_CID_QDU_FILE_OPEN */
+    { SET,    NO_QUERY, NO_NOTIFY }, /* MBIM_CID_QDU_FILE_WRITE */
+};
 gboolean
 mbim_cid_can_set (MbimService service,
                   guint       cid)
@@ -207,6 +214,8 @@ mbim_cid_can_set (MbimService service,
         return cid_atds_config[cid - 1].set;
     case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
         return cid_intel_firmware_update_config[cid - 1].set;
+    case MBIM_SERVICE_QDU:
+        return cid_qdu_config[cid - 1].set;
     case MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS:
         return cid_ms_basic_connect_extensions_config[cid - 1].set;
     case MBIM_SERVICE_INVALID:
@@ -254,6 +263,8 @@ mbim_cid_can_query (MbimService service,
         return cid_atds_config[cid - 1].query;
     case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
         return cid_intel_firmware_update_config[cid - 1].query;
+    case MBIM_SERVICE_QDU:
+        return cid_qdu_config[cid - 1].query;
     case MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS:
         return cid_ms_basic_connect_extensions_config[cid - 1].query;
     case MBIM_SERVICE_INVALID:
@@ -301,6 +312,8 @@ mbim_cid_can_notify (MbimService service,
         return cid_atds_config[cid - 1].notify;
     case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
         return cid_intel_firmware_update_config[cid - 1].notify;
+    case MBIM_SERVICE_QDU:
+        return cid_qdu_config[cid - 1].notify;
     case MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS:
         return cid_ms_basic_connect_extensions_config[cid - 1].notify;
     case MBIM_SERVICE_INVALID:
@@ -349,6 +362,8 @@ mbim_cid_get_printable (MbimService service,
         return mbim_cid_atds_get_string (cid);
     case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
         return mbim_cid_intel_firmware_update_get_string (cid);
+    case MBIM_SERVICE_QDU:
+        return mbim_cid_qdu_get_string (cid);
     case MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS:
         return mbim_cid_ms_basic_connect_extensions_get_string (cid);
     case MBIM_SERVICE_LAST:
diff --git a/src/libmbim-glib/mbim-cid.h b/src/libmbim-glib/mbim-cid.h
index 974aaaa..8f2de83 100644
--- a/src/libmbim-glib/mbim-cid.h
+++ b/src/libmbim-glib/mbim-cid.h
@@ -297,6 +297,24 @@ typedef enum { /*< since=1.16 >*/
     MBIM_CID_INTEL_FIRMWARE_UPDATE_MODEM_REBOOT = 1,
 } MbimCidIntelFirmwareUpdate;
 
+/**
+ * MbimCidQdu:
+ * @MBIM_CID_QDU_UNKNOWN: Unknown command.
+ * @MBIM_CID_QDU_UPDATE_SESSION: Update session command.
+ * @MBIM_CID_QDU_FILE_OPEN: Open QDU file for firmware update.
+ * @MBIM_CID_QDU_FILE_WRITE: Write QDU file for firmware update.
+ *
+ * MBIM commands in the %MBIM_SERVICE_QDU service.
+ *
+ * Since: 1.26
+ */
+typedef enum { /*< since=1.26 >*/
+    MBIM_CID_QDU_UNKNOWN             = 0,
+    MBIM_CID_QDU_UPDATE_SESSION      = 1,
+    MBIM_CID_QDU_FILE_OPEN           = 2,
+    MBIM_CID_QDU_FILE_WRITE          = 3,
+} MbimCidQdu;
+
 /**
  * MbimCidMsBasicConnectExtensions:
  * @MBIM_CID_MS_BASIC_CONNECT_EXTENSIONS_UNKNOWN: Unknown command.
diff --git a/src/libmbim-glib/mbim-device.c b/src/libmbim-glib/mbim-device.c
index f28df8b..2488b5a 100644
--- a/src/libmbim-glib/mbim-device.c
+++ b/src/libmbim-glib/mbim-device.c
@@ -1873,53 +1873,46 @@ device_send (MbimDevice   *self,
 
     fragments = _mbim_message_split_fragments (message, MAX_CONTROL_TRANSFER, &n_fragments);
     for (i = 0; i < n_fragments; i++) {
+        g_autoptr(GByteArray)  full_fragment = NULL;
+        g_autofree gchar      *printable_headers = NULL;
+
+        /* Build compiled fragment headers */
+        full_fragment = g_byte_array_new ();
+        g_byte_array_append (full_fragment, (guint8 *)&fragments[i].header, sizeof (fragments[i].header));
+        g_byte_array_append (full_fragment, (guint8 *)&fragments[i].fragment_header, sizeof (fragments[i].fragment_header));
+
+        /* Build dummy message with only headers for printable purposes only */
+        if (mbim_utils_get_traces_enabled ())
+            printable_headers = mbim_message_get_printable ((MbimMessage *)full_fragment, "<<<<<< ", TRUE);
+
+        /* Append the actual fragment data */
+        g_byte_array_append (full_fragment, (guint8 *)fragments[i].data, fragments[i].data_length);
+
         if (mbim_utils_get_traces_enabled ()) {
-            g_autoptr(GByteArray)  bytearray = NULL;
-            g_autofree gchar      *printable = NULL;
-            g_autofree gchar      *printable_h = NULL;
-            g_autofree gchar      *printable_fh = NULL;
-            g_autofree gchar      *printable_d = NULL;
-
-            printable_h  = mbim_common_str_hex (&fragments[i].header, sizeof (fragments[i].header), ':');
-            printable_fh = mbim_common_str_hex (&fragments[i].fragment_header, sizeof (fragments[i].fragment_header), ':');
-            printable_d  = mbim_common_str_hex (fragments[i].data, fragments[i].data_length, ':');
+            g_autofree gchar *printable_full = NULL;
+
+            printable_full  = mbim_common_str_hex ((const guint8 *)full_fragment->data, full_fragment->len, ':');
             g_debug ("[%s] Sent fragment (%u)...\n"
                      "<<<<<< RAW:\n"
                      "<<<<<<   length = %u\n"
-                     "<<<<<<   data   = %s%s%s\n",
+                     "<<<<<<   data   = %s\n",
                      self->priv->path_display, i,
-                     (guint)(sizeof (fragments[i].header) +
-                             sizeof (fragments[i].fragment_header) +
-                             fragments[i].data_length),
-                     printable_h, printable_fh, printable_d);
-
-            /* Dummy message for printable purposes only */
-            bytearray = g_byte_array_new ();
-            g_byte_array_append (bytearray, (guint8 *)&fragments[i].header, sizeof (fragments[i].header));
-            g_byte_array_append (bytearray, (guint8 *)&fragments[i].fragment_header, sizeof (fragments[i].fragment_header));
-            printable = mbim_message_get_printable ((MbimMessage *)bytearray, "<<<<<< ", TRUE);
+                     full_fragment->len,
+                     printable_full);
+
             g_debug ("[%s] Sent fragment (translated)...\n%s",
                      self->priv->path_display,
-                     printable);
+                     printable_headers);
         }
 
-        /* Write fragment headers */
-        if (!device_write (self,
-                           (guint8 *)&fragments[i].header,
-                           sizeof (fragments[i].header),
-                           error))
-            return FALSE;
-
-        if (!device_write (self,
-                           (guint8 *)&fragments[i].fragment_header,
-                           sizeof (fragments[i].fragment_header),
-                           error))
-            return FALSE;
-
-        /* Write fragment data */
+        /* Write whole packet to MBIM device.
+         * Here send whole packet rather than seperated elements, such as header,
+         * fragment_header, data, because some MBIM devices may have errors on
+         * seperated fragment case, such as "MBIM protocol error: LengthMismatch"
+         */
         if (!device_write (self,
-                           fragments[i].data,
-                           fragments[i].data_length,
+                           (guint8 *)full_fragment->data,
+                           full_fragment->len,
                            error))
             return FALSE;
     }
diff --git a/src/libmbim-glib/mbim-enums.h b/src/libmbim-glib/mbim-enums.h
index 7434397..0314d72 100644
--- a/src/libmbim-glib/mbim-enums.h
+++ b/src/libmbim-glib/mbim-enums.h
@@ -1088,6 +1088,91 @@ typedef enum { /*< since=1.4 >*/
     MBIM_DSS_LINK_STATE_ACTIVATE   = 1
 } MbimDssLinkState;
 
+/*****************************************************************************/
+/* 'QDU update session' enums */
+
+/**
+ * MbimQduSessionAction:
+ * @MBIM_QDU_SESSION_ACTION_START: Start.
+ * @MBIM_QDU_SESSION_ACTION_STOP: Stop.
+ *
+ * Action performed for the session initialization.
+ *
+ * Since: 1.16
+ */
+typedef enum { /*< since=1.26 >*/
+    MBIM_QDU_SESSION_ACTION_START = 0,
+    MBIM_QDU_SESSION_ACTION_STOP  = 1,
+} MbimQduSessionAction;
+
+/*****************************************************************************/
+/* 'QDU session type' enums */
+
+/**
+ * MbimQduSessionType:
+ * @MBIM_QDU_SESSION_TYPE_NONE: No update session.
+ * @MBIM_QDU_SESSION_TYPE_LE: LE-based update procedure.
+ *
+ * QDU session types.
+ *
+ * Since: 1.16
+ */
+typedef enum { /*< since=1.26 >*/
+    MBIM_QDU_SESSION_TYPE_NONE = 0,
+    MBIM_QDU_SESSION_TYPE_LE   = 1,
+} MbimQduSessionType;
+
+/*****************************************************************************/
+/* 'QDU session status' enums */
+
+/**
+ * MbimQduSessionStatus:
+ * @MBIM_QDU_SESSION_STATUS_INACTIVE: Update session is not active
+ * @MBIM_QDU_SESSION_STATUS_FILE_TRANSFER: Updated files are being transferred from host to function or function is waiting host to send updated files.
+ * @MBIM_QDU_SESSION_STATUS_APPLY_UPDATE: The function is applying the update package.
+ *
+ * QDU session status.
+ *
+ * Since: 1.16
+ */
+typedef enum { /*< since=1.26 >*/
+    MBIM_QDU_SESSION_STATUS_INACTIVE      = 0,
+    MBIM_QDU_SESSION_STATUS_FILE_TRANSFER = 1,
+    MBIM_QDU_SESSION_STATUS_APPLY_UPDATE  = 2,
+} MbimQduSessionStatus;
+
+/*****************************************************************************/
+/* 'QDU session result' enums */
+
+/**
+ * MbimQDUSessionResult:
+ * @MBIM_QDU_SESSION_RESULT_SUCCESS: Success
+ * @MBIM_QDU_SESSION_RESULT_FAILURE: Failure
+ *
+ * QDU session result.
+ *
+ * Since: 1.16
+ */
+typedef enum { /*< since=1.16 >*/
+    MBIM_QDU_SESSION_RESULT_SUCCESS = 0,
+    MBIM_QDU_SESSION_RESULT_FAILURE = 1,
+} MbimQduSessionResult;
+
+/*****************************************************************************/
+/* 'QDU file type' enums */
+
+/**
+ * MbimQduFileType:
+ * @MBIM_QDU_FILE_TYPE_LITTLE_ENDIAN_PACKAGE: LE Package
+ *
+ * QDU session result.
+ *
+ * Since: 1.16
+ */
+typedef enum { /*< since=1.26 >*/
+    MBIM_QDU_FILE_TYPE_LITTLE_ENDIAN_PACKAGE = 0,
+} MbimQduFileType;
+
 /*****************************************************************************/
 /* 'ATDS RAT' enums */
 
diff --git a/src/libmbim-glib/mbim-message.c b/src/libmbim-glib/mbim-message.c
index 0d35647..7e033b8 100644
--- a/src/libmbim-glib/mbim-message.c
+++ b/src/libmbim-glib/mbim-message.c
@@ -45,6 +45,7 @@
 #include "mbim-ms-host-shutdown.h"
 #include "mbim-atds.h"
 #include "mbim-intel-firmware-update.h"
+#include "mbim-qdu.h"
 #include "mbim-ms-basic-connect-extensions.h"
 
 /*****************************************************************************/
@@ -1529,6 +1530,9 @@ mbim_message_get_printable (const MbimMessage *self,
         case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
             fields_printable = __mbim_message_intel_firmware_update_get_printable_fields (self, line_prefix, &error);
             break;
+        case MBIM_SERVICE_QDU:
+            fields_printable = __mbim_message_qdu_get_printable_fields (self, line_prefix, &error);
+            break;
         case MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS:
             fields_printable = __mbim_message_ms_basic_connect_extensions_get_printable_fields (self, line_prefix, &error);
             break;
diff --git a/src/libmbim-glib/mbim-uuid.c b/src/libmbim-glib/mbim-uuid.c
index d5410e7..97d7de5 100644
--- a/src/libmbim-glib/mbim-uuid.c
+++ b/src/libmbim-glib/mbim-uuid.c
@@ -215,6 +215,14 @@ static const MbimUuid uuid_intel_firmware_update = {
     .e = { 0x3b, 0x3f, 0xd7, 0x6f, 0x56, 0x41 }
 };
 
+static const MbimUuid uuid_qdu = {
+    .a = { 0x64, 0x27, 0x01, 0x5f },
+    .b = { 0x57, 0x9d },
+    .c = { 0x48, 0xf5 },
+    .d = { 0x8c, 0x54 },
+    .e = { 0xf4, 0x3e, 0xd1, 0xe7, 0x6f, 0x83 }
+};
+
 static const MbimUuid uuid_ms_basic_connect_extensions = {
     .a = { 0x3d, 0x01, 0xdc, 0xc5 },
     .b = { 0xfe, 0xf5 },
@@ -342,6 +350,8 @@ mbim_uuid_from_service (MbimService service)
         return &uuid_qmi;
     case MBIM_SERVICE_ATDS:
         return &uuid_atds;
+    case MBIM_SERVICE_QDU:
+        return &uuid_qdu;
     case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
         return &uuid_intel_firmware_update;
     case MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS:
diff --git a/src/libmbim-glib/mbim-uuid.h b/src/libmbim-glib/mbim-uuid.h
index 5750811..05d561e 100644
--- a/src/libmbim-glib/mbim-uuid.h
+++ b/src/libmbim-glib/mbim-uuid.h
@@ -144,6 +144,7 @@ typedef enum { /*< since=1.0 >*/
     MBIM_SERVICE_ATDS                        = 12,
     MBIM_SERVICE_INTEL_FIRMWARE_UPDATE       = 13,
     MBIM_SERVICE_MS_BASIC_CONNECT_EXTENSIONS = 14,
+    MBIM_SERVICE_QDU                         = 16,
 #if defined LIBMBIM_GLIB_COMPILATION
     MBIM_SERVICE_LAST /*< skip >*/
 #endif
@@ -302,6 +303,16 @@ typedef enum { /*< since=1.0 >*/
  * Since: 1.16
  */
 #define MBIM_UUID_INTEL_FIRMWARE_UPDATE mbim_uuid_from_service (MBIM_SERVICE_INTEL_FIRMWARE_UPDATE)
+/**
+ * MBIM_UUID_QDU:
+ *
+ * Get the UUID of the %MBIM_SERVICE_QDU service.
+ *
+ * Returns: (transfer none): a #MbimUuid.
+ *
+ * Since: 1.26
+ */
+#define MBIM_UUID_QDU mbim_uuid_from_service (MBIM_SERVICE_QDU)
 
 /**
  * MBIM_UUID_MS_BASIC_CONNECT_EXTENSIONS:
diff --git a/src/mbimcli/Makefile.am b/src/mbimcli/Makefile.am
index 1f78d31..5d9dcae 100644
--- a/src/mbimcli/Makefile.am
+++ b/src/mbimcli/Makefile.am
@@ -21,6 +21,7 @@ mbimcli_SOURCES = \
 	mbimcli-ms-firmware-id.c \
 	mbimcli-ms-host-shutdown.c \
 	mbimcli-atds.c \
+	mbimcli-qdu.c \
 	mbimcli-intel-firmware-update.c \
 	mbimcli-ms-basic-connect-extensions.c \
 	$(NULL)
diff --git a/src/mbimcli/mbimcli-qdu.c b/src/mbimcli/mbimcli-qdu.c
new file mode 100644
index 0000000..59e6d05
--- /dev/null
+++ b/src/mbimcli/mbimcli-qdu.c
@@ -0,0 +1,317 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * mbimcli -- Command line interface to control MBIM devices
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <sys/stat.h>
+#include <errno.h>
+
+#include <libmbim-glib.h>
+#include "mbimcli.h"
+
+/* Context */
+typedef struct {
+    MbimDevice *device;
+    GCancellable *cancellable;
+} Context;
+static Context *ctx;
+
+/* The size of a transfer e.g. 256k 256*1024 */
+#define TRANSFER_BYTE_SIZE 262144
+
+typedef struct {
+    guint8 sendingData[TRANSFER_BYTE_SIZE]; 
+} BlockData;
+static BlockData *blkdata;
+
+/* Options */
+static gchar    *ota_file_update_str;
+static guint32  total_sending_numbers = 0;
+static guint32  out_max_transfer_size;
+static guint32  out_max_window_size;
+static guint32  ota_index = 0;
+static FILE     *p = NULL;
+
+static GOptionEntry entries[] = {
+    { "qdu-ota-update", 0, 0, G_OPTION_ARG_STRING, &ota_file_update_str,
+      "QDU firmware file update",
+      "[(OTAFilePath)]"
+    },
+    { NULL }
+};
+
+GOptionGroup *
+mbimcli_qdu_get_option_group (void)
+{
+   GOptionGroup *group;
+
+   group = g_option_group_new ("qdu",
+                               "QDU Service options:",
+                               "Show QDU Service options",
+                               NULL,
+                               NULL);
+   g_option_group_add_entries (group, entries);
+
+   return group;
+}
+
+gboolean
+mbimcli_qdu_options_enabled (void)
+{
+    static guint n_actions = 0;
+    static gboolean checked = FALSE;
+
+    if (checked)
+        return !!n_actions;
+
+    n_actions = (!!ota_file_update_str);
+
+    if (n_actions > 1) {
+        g_printerr ("error: too many QDU Service actions requested\n");
+        exit (EXIT_FAILURE);
+    }
+
+    checked = TRUE;
+    return !!n_actions;
+}
+
+static void
+context_free (Context *context)
+{
+    if (!context)
+        return;
+
+    if (context->cancellable)
+        g_object_unref (context->cancellable);
+    if (context->device)
+        g_object_unref (context->device);
+    g_slice_free (Context, context);
+}
+
+static void
+shutdown (gboolean operation_status)
+{
+    /* Cleanup context and finish async operation */
+    context_free (ctx);
+    mbimcli_async_operation_done (operation_status);
+}
+
+static void
+fx_qdu_file_write_ready (MbimDevice   *device,
+                         GAsyncResult *res)
+{
+    g_autoptr(MbimMessage) request  = NULL;
+    g_autoptr(MbimMessage) response = NULL;
+    g_autoptr(GError)      error = NULL;
+    guint32  upgrade_percent = 0;
+    size_t result;
+
+    response = mbim_device_command_finish (device, res, &error);
+    if (!response || !mbim_message_response_get_result (response, MBIM_MESSAGE_TYPE_COMMAND_DONE, &error)) {
+        g_printerr ("error: operation failed: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+    
+    if (!mbim_message_qdu_file_write_response_parse (
+          response,
+          &error)) {
+        g_printerr ("[%s][%d]: error: couldn't parse response message: %s\n", __FUNCTION__, __LINE__, error->message);
+        shutdown (FALSE);
+        return;
+    }
+
+    if (ota_index != total_sending_numbers) {
+		blkdata = malloc(sizeof(BlockData));
+        result = fread(blkdata->sendingData, sizeof(guint8), sizeof(guint8)*TRANSFER_BYTE_SIZE, p);
+        /* check read size is not the same */
+        if (result != sizeof(BlockData)) {
+            g_print("[%s][%d]:read error , result = %ld\n", __FUNCTION__, __LINE__, result);   
+        }
+        request = (mbim_message_qdu_file_write_set_new (TRANSFER_BYTE_SIZE, (const guint8 *)(blkdata->sendingData), &error));
+        ota_index ++;
+
+        /* update percentage display */
+        if (upgrade_percent != (ota_index*100 / total_sending_numbers)) {
+            upgrade_percent = (ota_index*100 / total_sending_numbers);
+            g_print("\b\b\b\b%3d%%", upgrade_percent);
+        }
+     
+        free(blkdata);
+        blkdata = NULL; 
+        mbim_device_command (ctx->device,
+                             request,
+                             30,
+                             ctx->cancellable,
+                             (GAsyncReadyCallback)fx_qdu_file_write_ready,
+                             NULL);
+    } else {
+        g_print("\n");
+        g_print("Successfully upgrade OTA image\n");
+        g_print("Wait switch bootup partition and reboot\n");
+        fclose(p);
+        shutdown (TRUE);
+    }
+
+}
+
+static void
+fx_qdu_file_open_ready (MbimDevice   *device,
+                        GAsyncResult *res)
+{
+    g_autoptr(MbimMessage) request = NULL;
+    g_autoptr(MbimMessage) response = NULL;
+    g_autoptr(GError)      error = NULL;
+    guint32  upgrade_percent = 0;
+    struct stat st;
+    size_t result;
+
+    response = mbim_device_command_finish (device, res, &error);
+
+    if (!response || !mbim_message_response_get_result (response, MBIM_MESSAGE_TYPE_COMMAND_DONE, &error)) {
+        g_printerr ("error: operation failed: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+    
+    g_print("[%s] Successfully opening QDU file\n" , mbim_device_get_path_display(device));
+    if (!mbim_message_qdu_file_open_response_parse (
+          response,
+          &out_max_transfer_size,
+          &out_max_window_size,
+          &error)) {
+        g_printerr ("error: couldn't parse response message: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+    stat(ota_file_update_str, &st);
+    p = fopen(ota_file_update_str, "r");
+    if (p == NULL) {
+        g_print("[%s][%d]: OTA file doesn't exist!\n", __FUNCTION__, __LINE__);
+        return;
+    }
+
+    total_sending_numbers = (st.st_size) / (out_max_transfer_size);
+
+    if ((st.st_size) % (out_max_transfer_size) != 0)
+        total_sending_numbers ++;
+    blkdata = malloc(sizeof(BlockData));
+    result = fread(blkdata->sendingData, sizeof(guint8), sizeof(guint8)*TRANSFER_BYTE_SIZE, p);
+	
+    if (result != sizeof(BlockData))
+        g_print("[%s][%d]:read error , result = %ld\n", __FUNCTION__, __LINE__, result);
+    request = (mbim_message_qdu_file_write_set_new (TRANSFER_BYTE_SIZE, (const guint8 *)(blkdata->sendingData), &error));
+
+    if (ota_index == 0)
+        g_print("========> Update OTA file: %3d%%", upgrade_percent);
+    
+    ota_index ++;
+    mbim_device_command (ctx->device,
+                         request,
+                         10,
+                         ctx->cancellable,
+                         (GAsyncReadyCallback)fx_qdu_file_write_ready,
+                         NULL); 
+}
+
+static void
+fx_qdu_update_session_ready (MbimDevice   *device,
+                             GAsyncResult *res)
+{
+    g_autoptr(MbimMessage) response = NULL;
+    MbimQduSessionType     out_current_session_type;
+    MbimQduSessionStatus   out_current_session_status;
+    MbimQduSessionType     out_last_session_type;
+    MbimQduSessionResult   out_last_session_result;
+    guint32                out_last_session_error_offset;
+    guint32                out_last_session_error_size;
+    g_autoptr(GError)      error = NULL;
+    g_autoptr(MbimMessage) request = NULL;
+    struct stat            st;
+
+    response = mbim_device_command_finish (device, res, &error);
+    if (!response || !mbim_message_response_get_result (response, MBIM_MESSAGE_TYPE_COMMAND_DONE, &error)) {
+        g_printerr ("error: operation failed: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+
+    if (!mbim_message_qdu_update_session_response_parse (
+          response,
+          &out_current_session_type,
+          &out_current_session_status,
+          &out_last_session_type,
+          &out_last_session_result,
+          &out_last_session_error_offset,
+          &out_last_session_error_size,
+          &error)) {
+        g_printerr ("error: couldn't parse response message: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+
+    g_print ("[%s] Successfully requested modem to update session\n\n", mbim_device_get_path_display (device));
+    g_print("Asynchronously opening QDU file... %s\n", ota_file_update_str);
+
+    stat(ota_file_update_str, &st);
+    
+    /* send the file open request */
+    request = (mbim_message_qdu_file_open_set_new (MBIM_QDU_FILE_TYPE_LITTLE_ENDIAN_PACKAGE, st.st_size, &error));
+    mbim_device_command (ctx->device,
+                         request,
+                         10,
+                         ctx->cancellable,
+                         (GAsyncReadyCallback)fx_qdu_file_open_ready,
+                         NULL);
+}
+
+
+void
+mbimcli_qdu_run (MbimDevice   *device,
+                 GCancellable *cancellable)
+{
+    g_autoptr(MbimMessage) request = NULL;
+    g_autoptr(GError) error = NULL;
+
+    /* Initialize context */
+    ctx = g_slice_new (Context);
+    ctx->device = g_object_ref (device);
+    ctx->cancellable = cancellable ? g_object_ref (cancellable) : NULL;
+
+    /* QDU: ota file update */
+    if (ota_file_update_str) {
+        g_print("Asynchronously update QDU ota file...%s\n", ota_file_update_str);
+
+        request = (mbim_message_qdu_update_session_set_new (MBIM_QDU_SESSION_ACTION_START, MBIM_QDU_SESSION_TYPE_LE, &error));
+		
+        mbim_device_command (ctx->device,
+                             request,
+                             10,
+                             ctx->cancellable,
+                             (GAsyncReadyCallback)fx_qdu_update_session_ready,
+                             NULL);      
+        return;
+    }   
+    g_warn_if_reached ();
+}
+
diff --git a/src/mbimcli/mbimcli.c b/src/mbimcli/mbimcli.c
index b6114db..8b1eb2b 100644
--- a/src/mbimcli/mbimcli.c
+++ b/src/mbimcli/mbimcli.c
@@ -281,6 +281,9 @@ device_open_ready (MbimDevice   *dev,
     case MBIM_SERVICE_ATDS:
         mbimcli_atds_run (dev, cancellable);
         return;
+    case MBIM_SERVICE_QDU:
+        mbimcli_qdu_run (dev, cancellable);
+        return;
     case MBIM_SERVICE_INTEL_FIRMWARE_UPDATE:
         mbimcli_intel_firmware_update_run (dev, cancellable);
         return;
@@ -369,7 +372,10 @@ parse_actions (void)
     } else if (mbimcli_atds_options_enabled ()) {
         service = MBIM_SERVICE_ATDS;
         actions_enabled++;
-    } else if (mbimcli_intel_firmware_update_options_enabled ()) {
+    } else if (mbimcli_qdu_options_enabled ()) {
+		service = MBIM_SERVICE_QDU;
+        actions_enabled++;
+	} else if (mbimcli_intel_firmware_update_options_enabled ()) {
         service = MBIM_SERVICE_INTEL_FIRMWARE_UPDATE;
         actions_enabled++;
     } else if (mbimcli_ms_basic_connect_extensions_options_enabled ()) {
@@ -418,6 +424,7 @@ int main (int argc, char **argv)
                                 mbimcli_ms_host_shutdown_get_option_group ());
     g_option_context_add_group (context,
                                 mbimcli_atds_get_option_group ());
+	g_option_context_add_group (context, mbimcli_qdu_get_option_group ());
     g_option_context_add_group (context,
                                 mbimcli_intel_firmware_update_get_option_group ());
     g_option_context_add_group (context,
diff --git a/src/mbimcli/mbimcli.h b/src/mbimcli/mbimcli.h
index ceb8599..94f9600 100644
--- a/src/mbimcli/mbimcli.h
+++ b/src/mbimcli/mbimcli.h
@@ -35,6 +35,7 @@ GOptionGroup *mbimcli_dss_get_option_group              (void);
 GOptionGroup *mbimcli_ms_firmware_id_get_option_group   (void);
 GOptionGroup *mbimcli_ms_host_shutdown_get_option_group (void);
 GOptionGroup *mbimcli_atds_get_option_group             (void);
+GOptionGroup *mbimcli_qdu_get_option_group              (void);
 GOptionGroup *mbimcli_intel_firmware_update_get_option_group (void);
 GOptionGroup *mbimcli_ms_basic_connect_extensions_get_option_group (void);
 
@@ -44,6 +45,7 @@ gboolean      mbimcli_dss_options_enabled               (void);
 gboolean      mbimcli_ms_firmware_id_options_enabled    (void);
 gboolean      mbimcli_ms_host_shutdown_options_enabled  (void);
 gboolean      mbimcli_atds_options_enabled              (void);
+gboolean      mbimcli_qdu_options_enabled               (void);
 gboolean      mbimcli_intel_firmware_update_options_enabled (void);
 gboolean      mbimcli_ms_basic_connect_extensions_options_enabled (void);
 
@@ -59,6 +61,8 @@ void          mbimcli_ms_host_shutdown_run              (MbimDevice *device,
                                                          GCancellable *cancellable);
 void          mbimcli_atds_run                          (MbimDevice *device,
                                                          GCancellable *cancellable);
+void          mbimcli_qdu_run                           (MbimDevice *device,
+                                                         GCancellable *cancellable);
 void          mbimcli_intel_firmware_update_run         (MbimDevice *device,
                                                          GCancellable *cancellable);
 void          mbimcli_ms_basic_connect_extensions_run   (MbimDevice *device,
-- 
2.25.1

