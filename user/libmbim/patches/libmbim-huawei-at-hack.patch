HACK ALERT:
This is a hack to run AT commands on the Vodafone K5160 and similar Huawei
(rebranded) modems which do not expose a TTY interface for AT commands in
MBIM mode.

If you query the modem's services e.g.

    mbimcli -p -d /dev/cdc-wdm0 --no-close --query-device-services

and you see the UUID and CIDs below

    Service: 'unknown'
             UUID: [3c83a6ed-801e-4340-98f0-f8dc33baa7cc]:
      DSS payload: 0
    Max DSS instances: 0
             CIDs: 1, 2, 3

then this patch will help you!

You can send AT commands with e.g.

    # mbimcli -p -d /dev/cdc-wdm0 --huawei-at 'AT+CGDCONT?'
    +CGDCONT: 0,"IP","","",0,0,0,0,0,0
    +CGDCONT: 1,"IPV4V6","","",0,0,0,0,0,0

This AT interface is not documented publicly. It was discovered by sniffing
USB packets from the "Huawei Tool" on Windows -- a program which is not
publicly available.

TODO: this patch jams the --huawei-at command into the basic-connect service,
even though it uses a completely different service (UUID).
Also, mbim_message_huawei_at_new/mbim_message_huawei_at_parse are not
autogenerated as they should be. Someone should change this.

diff --git a/src/libmbim-glib/Makefile.am b/src/libmbim-glib/Makefile.am
index 4f8bbf3..c945e20 100644
--- a/src/libmbim-glib/Makefile.am
+++ b/src/libmbim-glib/Makefile.am
@@ -25,7 +25,7 @@ libmbim_glib_core_la_SOURCES = \
 	mbim-device.h mbim-device.c \
 	mbim-compat.h mbim-compat.c \
 	mbim-proxy.h mbim-proxy.c \
-	mbim-proxy-helpers.h mbim-proxy-helpers.c
+	mbim-proxy-helpers.h mbim-proxy-helpers.c mbim-huawei.c
 
 # Final installable library
 lib_LTLIBRARIES = libmbim-glib.la
diff --git a/src/libmbim-glib/libmbim-glib.h b/src/libmbim-glib/libmbim-glib.h
index b41122b..3b1e452 100644
--- a/src/libmbim-glib/libmbim-glib.h
+++ b/src/libmbim-glib/libmbim-glib.h
@@ -52,4 +52,14 @@
 /* backwards compatibility */
 #include "mbim-compat.h"
 
+MbimMessage *mbim_message_huawei_at_new (
+    const gchar *str,
+    guint32 len,
+    GError **error);
+
+gboolean mbim_message_huawei_at_parse (
+    const MbimMessage *message,
+    const gchar **response,
+    GError **error);
+
 #endif /* _LIBMBIM_GLIB_H_ */
diff --git a/src/libmbim-glib/mbim-cid.c b/src/libmbim-glib/mbim-cid.c
index 50dc4f1..c5f0fc5 100644
--- a/src/libmbim-glib/mbim-cid.c
+++ b/src/libmbim-glib/mbim-cid.c
@@ -288,7 +288,7 @@ mbim_cid_get_printable (MbimService service,
     g_return_val_if_fail (cid > 0, NULL);
     /* Known service required */
     g_return_val_if_fail (service > MBIM_SERVICE_INVALID, NULL);
-    g_return_val_if_fail (service <= MBIM_SERVICE_PROXY_CONTROL, NULL);
+    g_return_val_if_fail (service <= MBIM_SERVICE_HUAWEI_AT, NULL);
 
     switch (service) {
     case MBIM_SERVICE_BASIC_CONNECT:
@@ -311,6 +311,8 @@ mbim_cid_get_printable (MbimService service,
         return mbim_cid_ms_host_shutdown_get_string (cid);
     case MBIM_SERVICE_PROXY_CONTROL:
         return mbim_cid_proxy_control_get_string (cid);
+    case MBIM_SERVICE_HUAWEI_AT:
+        return "at";
     default:
         g_assert_not_reached ();
         return FALSE;
diff --git a/src/libmbim-glib/mbim-huawei.c b/src/libmbim-glib/mbim-huawei.c
new file mode 100644
index 0000000..9858f6d
--- /dev/null
+++ b/src/libmbim-glib/mbim-huawei.c
@@ -0,0 +1,65 @@
+#include <string.h>
+
+#include "mbim-message-private.h"
+#include "mbim-enum-types.h"
+#include "mbim-error-types.h"
+#include "mbim-device.h"
+#include "mbim-utils.h"
+
+/*****************************************************************************
+ * Huawei AT command hack
+ */
+
+MbimMessage *
+mbim_message_huawei_at_new (
+    const gchar *str,
+    guint32 len,
+    GError **error)
+{
+    MbimMessageCommandBuilder *builder;
+
+    builder = _mbim_message_command_builder_new (0,
+                                                 MBIM_SERVICE_HUAWEI_AT,
+                                                 1,
+                                                 MBIM_MESSAGE_COMMAND_TYPE_SET);
+    {
+      _mbim_message_command_builder_append_byte_array (builder, FALSE, FALSE, (const guint8*)"HUAW", 4);
+    }
+    {
+      // ???? Magic numbers found by sniffing USB packets
+      // with Huawei tool on Windows
+      _mbim_message_command_builder_append_guint32 (builder, 1);
+    }
+    {
+      // ????
+      _mbim_message_command_builder_append_guint32 (builder, 2);
+    }
+    {
+      // ????
+      _mbim_message_command_builder_append_guint32 (builder, 5);
+    }
+    {
+      // ????
+      _mbim_message_command_builder_append_guint32 (builder, 15);
+    }
+    {
+      // AT command length
+      _mbim_message_command_builder_append_guint32 (builder, len);
+    }
+    {
+      _mbim_message_command_builder_append_byte_array (builder, FALSE, FALSE, (const guint8*)str, len);
+    }
+
+    return _mbim_message_command_builder_complete (builder);
+}
+
+gboolean mbim_message_huawei_at_parse (
+    const MbimMessage *message,
+    const gchar **response,
+    GError **error)
+{
+
+  *response = _mbim_message_read_byte_array(message, 0, 30, FALSE, FALSE, NULL);
+
+  return TRUE;
+}
diff --git a/src/libmbim-glib/mbim-uuid.c b/src/libmbim-glib/mbim-uuid.c
index 6497645..2c0c2e8 100644
--- a/src/libmbim-glib/mbim-uuid.c
+++ b/src/libmbim-glib/mbim-uuid.c
@@ -38,7 +38,7 @@
  * This section defines the data type for unique identifiers.
  */
 
-#define MBIM_SERVICE_LAST MBIM_SERVICE_PROXY_CONTROL
+#define MBIM_SERVICE_LAST MBIM_SERVICE_HUAWEI_AT
 
 /*****************************************************************************/
 
@@ -229,6 +229,14 @@ static const MbimUuid uuid_proxy_control = {
     .e = { 0xd7, 0x1d , 0xbe, 0xfb, 0xb3, 0x9b }
 };
 
+static const MbimUuid uuid_huawei_at = {
+    .a = { 0x3c, 0x83, 0xa6, 0xed },
+    .b = { 0x80, 0x1e },
+    .c = { 0x43, 0x40 },
+    .d = { 0x98, 0xf0 },
+    .e = { 0xf8, 0xdc, 0x33, 0xba, 0xa7, 0xcc }
+};
+
 static GList *mbim_custom_service_list = NULL;
 
 typedef struct {
@@ -367,7 +375,7 @@ mbim_uuid_from_service (MbimService service)
     GList *l;
 
     g_return_val_if_fail (service >= MBIM_SERVICE_INVALID &&
-                          (service <= MBIM_SERVICE_PROXY_CONTROL ||
+                          (service <= MBIM_SERVICE_LAST ||
                            mbim_service_id_is_custom (service)),
                           &uuid_invalid);
 
@@ -394,6 +402,8 @@ mbim_uuid_from_service (MbimService service)
         return &uuid_ms_host_shutdown;
     case MBIM_SERVICE_PROXY_CONTROL:
         return &uuid_proxy_control;
+    case MBIM_SERVICE_HUAWEI_AT:
+        return &uuid_huawei_at;
     default:
         for (l = mbim_custom_service_list; l != NULL; l = l->next) {
             if (service == ((MbimCustomService *)l->data)->service_id)
@@ -446,6 +456,9 @@ mbim_uuid_to_service (const MbimUuid *uuid)
     if (mbim_uuid_cmp (uuid, &uuid_proxy_control))
         return MBIM_SERVICE_PROXY_CONTROL;
 
+    if (mbim_uuid_cmp (uuid, &uuid_huawei_at))
+        return MBIM_SERVICE_HUAWEI_AT;
+
     for (l = mbim_custom_service_list; l != NULL; l = l->next) {
         if (mbim_uuid_cmp (&((MbimCustomService *)l->data)->uuid, uuid))
             return ((MbimCustomService *)l->data)->service_id;
diff --git a/src/libmbim-glib/mbim-uuid.h b/src/libmbim-glib/mbim-uuid.h
index 91def98..f8b1fe7 100644
--- a/src/libmbim-glib/mbim-uuid.h
+++ b/src/libmbim-glib/mbim-uuid.h
@@ -86,6 +86,7 @@ typedef enum {
     MBIM_SERVICE_MS_FIRMWARE_ID   = 8,
     MBIM_SERVICE_MS_HOST_SHUTDOWN = 9,
     MBIM_SERVICE_PROXY_CONTROL    = 10,
+    MBIM_SERVICE_HUAWEI_AT        = 11,
     /* Note: update MBIM_SERVICE_LAST when a new value is added */
 } MbimService;
 
@@ -188,6 +189,8 @@ typedef enum {
  */
 #define MBIM_UUID_PROXY_CONTROL mbim_uuid_from_service (MBIM_SERVICE_PROXY_CONTROL)
 
+#define MBIM_UUID_HUAWEI_AT mbim_uuid_from_service (MBIM_SERVICE_HUAWEI_AT)
+
 const gchar *mbim_service_lookup_name (guint service);
 
 guint mbim_register_custom_service (const MbimUuid *uuid,
diff --git a/src/mbimcli/mbimcli-basic-connect.c b/src/mbimcli/mbimcli-basic-connect.c
index f093c3b..3f336d5 100644
--- a/src/mbimcli/mbimcli-basic-connect.c
+++ b/src/mbimcli/mbimcli-basic-connect.c
@@ -26,6 +26,7 @@
 #include <string.h>
 
 #include <glib.h>
+#include <glib/gstrfuncs.h>
 #include <gio/gio.h>
 
 #include <libmbim-glib.h>
@@ -65,6 +66,7 @@ static gboolean  query_connect_flag;
 static gchar    *set_connect_activate_str;
 static gboolean  set_connect_deactivate_flag;
 static gboolean  query_packet_statistics_flag;
+static gchar    *huawei_at_str;
 
 static GOptionEntry entries[] = {
     { "query-device-caps", 0, 0, G_OPTION_ARG_NONE, &query_device_caps_flag,
@@ -163,6 +165,10 @@ static GOptionEntry entries[] = {
       "Query packet statistics",
       NULL
     },
+    { "huawei-at", 0, 0, G_OPTION_ARG_STRING, &huawei_at_str,
+      "AT hack for Vodafone K5160 (a rebranded Huawei)",
+      NULL
+    },
     { NULL }
 };
 
@@ -213,7 +219,8 @@ mbimcli_basic_connect_options_enabled (void)
                  query_connect_flag +
                  !!set_connect_activate_str +
                  set_connect_deactivate_flag +
-                 query_packet_statistics_flag);
+                 query_packet_statistics_flag +
+                 !!huawei_at_str);
 
     if (n_actions > 1) {
         g_printerr ("error: too many Basic Connect actions requested\n");
@@ -1333,6 +1340,34 @@ packet_statistics_ready (MbimDevice   *device,
     shutdown (TRUE);
 }
 
+static void
+huawei_at_ready (MbimDevice   *device,
+                 GAsyncResult *res)
+{
+    MbimMessage *response;
+    GError *error = NULL;
+    gchar *s, *e;
+
+    response = mbim_device_command_finish (device, res, &error);
+    if (!response || !mbim_message_response_get_result (response, MBIM_MESSAGE_TYPE_COMMAND_DONE, &error)) {
+        g_printerr ("error: operation failed: %s\n", error->message);
+        g_error_free (error);
+        if (response)
+            mbim_message_unref (response);
+        shutdown (FALSE);
+        return;
+    }
+
+    mbim_message_huawei_at_parse(response, &s, &error);
+    if (s && (e = g_strstr_len(s, strlen(s), "\x0d\x0a\x0d\x0aOK\x0d\x0a"))) {
+        *e = 0;
+        g_print("%s\n", s);
+    }
+
+    mbim_message_unref (response);
+    shutdown (TRUE);
+}
+
 void
 mbimcli_basic_connect_run (MbimDevice   *device,
                            GCancellable *cancellable)
@@ -1803,5 +1838,21 @@ mbimcli_basic_connect_run (MbimDevice   *device,
         return;
     }
 
+    if (huawei_at_str) {
+        MbimMessage *request;
+
+        request = mbim_message_huawei_at_new (huawei_at_str,
+                                              strlen(huawei_at_str),
+                                              NULL);
+        mbim_device_command (ctx->device,
+                             request,
+                             10,
+                             ctx->cancellable,
+                             (GAsyncReadyCallback)huawei_at_ready,
+                             NULL);
+        mbim_message_unref (request);
+        return;
+    }
+
     g_warn_if_reached ();
 }
