diff --git a/src/script.c b/src/script.c
index 30441b9..23367e7 100644
--- a/src/script.c
+++ b/src/script.c
@@ -210,6 +210,7 @@ static void int_to_env(const char *name, int value)
 }
 
 
+#if 0
 static void s46_to_env_portparams(const uint8_t *data, size_t len, FILE *fp)
 {
 	uint8_t *odata;
@@ -333,13 +334,18 @@ static void s46_to_env(enum odhcp6c_state state, const uint8_t *data, size_t len
 	fclose(fp);
 	putenv(str);
 }
+#endif
 
 
 void script_call(const char *status)
 {
 	size_t dns_len, search_len, custom_len, sntp_ip_len, ntp_ip_len, ntp_dns_len;
 	size_t sip_ip_len, sip_fqdn_len, aftr_name_len, cer_len, addr_len;
-	size_t s46_mapt_len, s46_mape_len, s46_lw_len, passthru_len;
+#if 0
+	size_t s46_mapt_len, s46_mape_len, s46_lw_len;
+#else
+	size_t passthru_len;
+#endif
 
 	odhcp6c_expire();
 
@@ -354,9 +360,11 @@ void script_call(const char *status)
 	uint8_t *sip_fqdn = odhcp6c_get_state(STATE_SIP_FQDN, &sip_fqdn_len);
 	uint8_t *aftr_name = odhcp6c_get_state(STATE_AFTR_NAME, &aftr_name_len);
 	struct in6_addr *cer = odhcp6c_get_state(STATE_CER, &cer_len);
+#if 0
 	uint8_t *s46_mapt = odhcp6c_get_state(STATE_S46_MAPT, &s46_mapt_len);
 	uint8_t *s46_mape = odhcp6c_get_state(STATE_S46_MAPE, &s46_mape_len);
 	uint8_t *s46_lw = odhcp6c_get_state(STATE_S46_LW, &s46_lw_len);
+#endif
 	uint8_t *passthru = odhcp6c_get_state(STATE_PASSTHRU, &passthru_len);
 
 	size_t prefix_len, address_len, ra_pref_len,
@@ -380,9 +388,11 @@ void script_call(const char *status)
 		fqdn_to_env("SIP_DOMAIN", sip_fqdn, sip_fqdn_len);
 		fqdn_to_env("AFTR", aftr_name, aftr_name_len);
 		ipv6_to_env("CER", cer, cer_len / sizeof(*cer));
+#if 0
 		s46_to_env(STATE_S46_MAPE, s46_mape, s46_mape_len);
 		s46_to_env(STATE_S46_MAPT, s46_mapt, s46_mapt_len);
 		s46_to_env(STATE_S46_LW, s46_lw, s46_lw_len);
+#endif
 		bin_to_env(custom, custom_len);
 
 		if (odhcp6c_is_bound()) {
