John Taylor's patch for implementing --time-limit and --stop-at, reworked
to be simpler and more efficient by Wayne Davison.

Do we need configure support for mktime()?

--- orig/io.c	2005-05-19 08:52:13
+++ io.c	2005-05-19 09:01:27
@@ -57,6 +57,7 @@ extern int remove_sent_files;
 extern int preserve_hard_links;
 extern char *filesfrom_host;
 extern struct stats stats;
+extern time_t stop_at_utime;
 extern struct file_list *the_file_list;
 
 const char phase_unknown[] = "unknown";
@@ -165,16 +166,24 @@ static void check_timeout(void)
 {
 	time_t t;
 
+	if ((!io_timeout || ignore_timeout) && !stop_at_utime)
+		return;
+
+	t = time(NULL);
+
+	if (stop_at_utime && t >= stop_at_utime) {
+		rprintf(FERROR, "run-time limit exceeded\n");
+		exit_cleanup(RERR_TIMEOUT);
+	}
+
 	if (!io_timeout || ignore_timeout)
 		return;
 
 	if (!last_io_in) {
-		last_io_in = time(NULL);
+		last_io_in = t;
 		return;
 	}
 
-	t = time(NULL);
-
 	if (t - last_io_in >= io_timeout) {
 		if (!am_server && !am_daemon) {
 			rprintf(FERROR, "io timeout after %d seconds -- exiting\n",
--- orig/options.c	2005-07-28 18:48:38
+++ options.c	2005-05-19 09:01:55
@@ -106,6 +106,7 @@ int checksum_seed = 0;
 int inplace = 0;
 int delay_updates = 0;
 long block_size = 0; /* "long" because popt can't set an int32. */
+time_t stop_at_utime = 0;
 
 
 /** Network address family. **/
@@ -344,6 +345,8 @@ void usage(enum logcode F)
   rprintf(F,"     --password-file=FILE    read password from FILE\n");
   rprintf(F,"     --list-only             list the files instead of copying them\n");
   rprintf(F,"     --bwlimit=KBPS          limit I/O bandwidth; KBytes per second\n");
+  rprintf(F,"     --stop-at=y-m-dTh:m     Stop rsync at year-month-dayThour:minute\n");
+  rprintf(F,"     --time-limit=MINS       Stop rsync after MINS minutes have elapsed\n");
   rprintf(F,"     --write-batch=FILE      write a batched update to FILE\n");
   rprintf(F,"     --only-write-batch=FILE like --write-batch but w/o updating destination\n");
   rprintf(F,"     --read-batch=FILE       read a batched update from FILE\n");
@@ -364,6 +367,7 @@ enum {OPT_VERSION = 1000, OPT_DAEMON, OP
       OPT_FILTER, OPT_COMPARE_DEST, OPT_COPY_DEST, OPT_LINK_DEST,
       OPT_INCLUDE, OPT_INCLUDE_FROM, OPT_MODIFY_WINDOW,
       OPT_READ_BATCH, OPT_WRITE_BATCH, OPT_ONLY_WRITE_BATCH, OPT_MAX_SIZE,
+      OPT_STOP_AT, OPT_TIME_LIMIT,
       OPT_REFUSED_BASE = 9000};
 
 static struct poptOption long_options[] = {
@@ -450,6 +454,8 @@ static struct poptOption long_options[] 
   {"log-format",       0,  POPT_ARG_STRING, &log_format, 0, 0, 0 },
   {"itemize-changes", 'i', POPT_ARG_NONE,   &itemize_changes, 0, 0, 0 },
   {"bwlimit",          0,  POPT_ARG_INT,    &bwlimit, 0, 0, 0 },
+  {"stop-at",          0,  POPT_ARG_STRING, 0, OPT_STOP_AT, 0, 0 },
+  {"time-limit",       0,  POPT_ARG_STRING, 0, OPT_TIME_LIMIT, 0, 0 },
   {"backup-dir",       0,  POPT_ARG_STRING, &backup_dir, 0, 0, 0 },
   {"hard-links",      'H', POPT_ARG_NONE,   &preserve_hard_links, 0, 0, 0 },
   {"read-batch",       0,  POPT_ARG_STRING, &batch_name, OPT_READ_BATCH, 0, 0 },
@@ -876,6 +882,36 @@ int parse_arguments(int *argc, const cha
 			basis_dir[basis_dir_cnt++] = (char *)arg;
 			break;
 
+		case OPT_STOP_AT:
+			arg = poptGetOptArg(pc);
+			if ((stop_at_utime = parse_time(arg)) == (time_t)-1) {
+				snprintf(err_buf, sizeof err_buf,
+				    "invalid --stop-at format: %s\n",
+				    arg);
+				rprintf(FERROR, "ERROR: %s", err_buf);
+				return 0;
+			}
+			if (stop_at_utime < time(NULL)) {
+				snprintf(err_buf, sizeof err_buf,
+				    "--stop-at time is in the past: %s\n",
+				    arg);
+				rprintf(FERROR, "ERROR: %s", err_buf);
+				return 0;
+			}
+			break;
+
+		case OPT_TIME_LIMIT:
+			arg = poptGetOptArg(pc);
+			if ((stop_at_utime = atol(arg) * 60) <= 0) {
+				snprintf(err_buf, sizeof err_buf,
+				    "invalid --time-limit value: %s\n",
+				    arg);
+				rprintf(FERROR, "ERROR: %s", err_buf);
+				return 0;
+			}
+			stop_at_utime += time(NULL);
+			break;
+
 		default:
 			/* A large opt value means that set_refuse_options()
 			 * turned this option off. */
@@ -1365,6 +1401,15 @@ void server_options(char **args,int *arg
 		args[ac++] = arg;
 	}
 
+	if (stop_at_utime) {
+		long mins = (stop_at_utime - time(NULL)) / 60;
+		if (mins <= 0)
+			mins = 1;
+		if (asprintf(&arg, "--time-limit=%ld", mins) < 0)
+			goto oom;
+		args[ac++] = arg;
+	}
+
 	if (backup_dir) {
 		args[ac++] = "--backup-dir";
 		args[ac++] = backup_dir;
--- orig/rsync.yo	2005-07-28 19:26:48
+++ rsync.yo	2005-02-01 10:46:35
@@ -377,6 +377,8 @@ to the detailed description below for a 
      --password-file=FILE    read password from FILE
      --list-only             list the files instead of copying them
      --bwlimit=KBPS          limit I/O bandwidth; KBytes per second
+     --stop-at=y-m-dTh:m     Stop rsync at year-month-dayThour:minute
+     --time-limit=MINS       Stop rsync after MINS minutes have elapsed
      --write-batch=FILE      write a batched update to FILE
      --only-write-batch=FILE like --write-batch but w/o updating dest
      --read-batch=FILE       read a batched update from FILE
@@ -1281,6 +1283,19 @@ transfer was too fast, it will wait befo
 result is an average transfer rate equaling the specified limit. A value
 of zero specifies no limit.
 
+dit(bf(--stop-at=y-m-dTh:m)) This option allows you to specify at what
+time to stop rsync, in year-month-dayThour:minute numeric format (e.g.
+2004-12-31T23:59).  You can specify a 2 or 4-digit year.  You can also
+leave off various items and the result will be the next possible time
+that matches the specified data.  For example, "1-30" specifies the next
+January 30th (at midnight), "04:00" specifies the next 4am, "1"
+specifies the next 1st of the month at midnight, and ":59" specifies the
+next 59th minute after the hour.  If you prefer, you may separate the
+date numbers using slashes instead of dashes.
+
+dit(bf(--time-limit=MINS)) This option allows you to specify the maximum
+number of minutes rsync will run for.
+
 dit(bf(--write-batch=FILE)) Record a file that can later be applied to
 another identical destination with bf(--read-batch). See the "BATCH MODE"
 section for details, and also the bf(--only-write-batch) option.
--- orig/util.c	2005-07-28 18:48:39
+++ util.c	2004-07-03 20:23:22
@@ -126,6 +126,132 @@ void overflow_exit(char *str)
 	exit_cleanup(RERR_MALLOC);
 }
 
+/* Allow the user to specify a time in the format yyyy-mm-ddThh:mm while
+ * also allowing abbreviated data.  For instance, if the time is omitted,
+ * it defaults to midnight.  If the date is omitted, it defaults to the
+ * next possible date in the future with the specified time.  Even the
+ * year or year-month can be omitted, again defaulting to the next date
+ * in the future that matches the specified information.  A 2-digit year
+ * is also OK, as is using '/' instead of '-'. */
+time_t parse_time(const char *arg)
+{
+	const char *cp;
+	time_t val, now = time(NULL);
+	struct tm t, *today = localtime(&now);
+	int in_date, n;
+
+	memset(&t, 0, sizeof t);
+	t.tm_year = t.tm_mon = t.tm_mday = -1;
+	t.tm_hour = t.tm_min = t.tm_isdst = -1;
+	cp = arg;
+	if (*cp == 'T' || *cp == 't' || *cp == ':') {
+		cp++;
+		in_date = 0;
+	} else
+		in_date = 1;
+	for ( ; ; cp++) {
+		if (!isdigit(*cp))
+			return -1;
+
+		n = 0;
+		do {
+			n = n * 10 + *cp++ - '0';
+		} while (isdigit(*cp));
+
+		if (*cp == ':')
+			in_date = 0;
+		if (in_date) {
+			if (t.tm_year != -1)
+				return -1;
+			t.tm_year = t.tm_mon;
+			t.tm_mon = t.tm_mday;
+			t.tm_mday = n;
+			if (!*cp)
+				break;
+			if (*cp == 'T' || *cp == 't') {
+				if (!cp[1])
+					break;
+				in_date = 0;
+			} else if (*cp != '-' && *cp != '/')
+				return -1;
+			continue;
+		}
+		if (t.tm_hour != -1)
+			return -1;
+		t.tm_hour = t.tm_min;
+		t.tm_min = n;
+		if (!*cp)
+			break;
+		if (*cp != ':')
+			return -1;
+	}
+
+	in_date = 0;
+	if (t.tm_year < 0) {
+		t.tm_year = today->tm_year;
+		in_date = 1;
+	} else if (t.tm_year < 100) {
+		while (t.tm_year < today->tm_year)
+			t.tm_year += 100;
+	} else
+		t.tm_year -= 1900;
+	if (t.tm_mon < 0) {
+		t.tm_mon = today->tm_mon;
+		in_date = 2;
+	} else
+		t.tm_mon--;
+	if (t.tm_mday < 0) {
+		t.tm_mday = today->tm_mday;
+		in_date = 3;
+	}
+
+	n = 0;
+	if (t.tm_min < 0) {
+		t.tm_hour = t.tm_min = 0;
+	} else if (t.tm_hour < 0) {
+		if (in_date != 3)
+			return -1;
+		in_date = 0;
+		t.tm_hour = today->tm_hour;
+		n = 60*60;
+	}
+
+	if (t.tm_hour > 23 || t.tm_min > 59
+	    || t.tm_mon < 0 || t.tm_mon >= 12
+	    || t.tm_mday < 1 || t.tm_mday > 31
+	    || (val = mktime(&t)) == (time_t)-1)
+		return -1;
+
+	if (val <= now && in_date) {
+	    tweak_date:
+		switch (in_date) {
+		case 3:
+			t.tm_mday++;
+			break;
+		case 2:
+			if (++t.tm_mon == 12)
+				t.tm_mon = 0;
+			else
+				break;
+		case 1:
+			t.tm_year++;
+			break;
+		}
+		if ((val = mktime(&t)) == (time_t)-1) {
+			if (in_date == 3 && t.tm_mday > 28) {
+				t.tm_mday = 1;
+				in_date = 2;
+				goto tweak_date;
+			}
+			return -1;
+		}
+	}
+	if (n) {
+		while (val <= now)
+			val += n;
+	}
+	return val;
+}
 
 
 int set_modtime(char *fname, time_t modtime)
