#! /bin/sh

# Copyright (C) 2001 by Martin Pool <mbp@samba.org>

# General-purpose test functions for rsync.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version
# 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


tmpdir="$scratchdir"
fromdir="$tmpdir/from"
todir="$tmpdir/to"
chkdir="$tmpdir/chk"

# Berkley's nice.
PATH="$PATH:/usr/ucb"

if diff -u "$srcdir/testsuite/rsync.fns" "$srcdir/testsuite/rsync.fns" >/dev/null 2>&1; then
    diffopt="-u"
else
    diffopt="-c"
fi

runtest() {
    echo $ECHO_N "Test $1: $ECHO_C"
    if eval "$2"
    then
	echo "$ECHO_T	done."
	return 0
    else
	echo "$ECHO_T failed!"
	return 1
    fi
}

printmsg() {
    echo "$1"
}


rsync_ls_lR() {
    find "$@" -print | sort | sed 's/ /\\ /g' | xargs "$TOOLDIR/tls"
}

rsync_getgroups() { 
    "$TOOLDIR/getgroups"
}


####################
# Build test directories $todir and $fromdir, with $fromdir full of files.

hands_setup() {
    # Clean before creation
    rm -rf "$fromdir"
    rm -rf "$todir"

    [ -d "$tmpdir" ] || mkdir "$tmpdir"
    [ -d "$fromdir" ] || mkdir "$fromdir"
    [ -d "$todir" ] || mkdir "$todir"

    # On some BSD systems, the umask affects the mode of created
    # symlinks, even though the mode apparently has no effect on how
    # the links behave in the future, and it cannot be changed using
    # chmod!  rsync always sets its umask to 000 so that it can
    # accurately recreate permissions, but this script is probably run
    # with a different umask. 

    # This causes a little problem that "ls -l" of the two will not be
    # the same.  So, we need to set our umask before doing any creations.

    # set up test data
    touch "$fromdir/empty"
    mkdir "$fromdir/emptydir"

    # a hundred lines of text or so
    rsync_ls_lR "$srcdir" > "$fromdir/filelist"

    echo $ECHO_N "This file has no trailing lf$ECHO_C" > "$fromdir/nolf"
    umask 0
    ln -s nolf "$fromdir/nolf-symlink"
    umask 022

    cat "$srcdir"/*.c > "$fromdir/text"
    mkdir "$fromdir/dir"
    cp "$fromdir/text" "$fromdir/dir"
    mkdir "$fromdir/dir/subdir"
    echo some data > "$fromdir/dir/subdir/foobar.baz"
    mkdir "$fromdir/dir/subdir/subsubdir"
    if [ -r /etc ]; then
	ls -ltr /etc > "$fromdir/dir/subdir/subsubdir/etc-ltr-list"
    else
	ls -ltr / > "$fromdir/dir/subdir/subsubdir/etc-ltr-list"
    fi
    mkdir "$fromdir/dir/subdir/subsubdir2"
    if [ -r /bin ]; then
	ls -lt /bin > "$fromdir/dir/subdir/subsubdir2/bin-lt-list"
    else
	ls -lt / > "$fromdir/dir/subdir/subsubdir2/bin-lt-list"
    fi

#      echo testing head:
#      ls -lR "$srcdir" | head -10 || echo failed
}


####################
# Many machines do not have "mkdir -p", so we have to build up long paths.
# How boring.  
makepath () {
    echo "        makepath $1"
    p="$1"
    (
	# Absolut Unix.
	if echo $p | grep '^/' >/dev/null
	then
	    cd /
	fi
    
	# This will break if $1 contains a space.
	for c in `echo $p | tr '/' ' '`
	do 
	    if [ -d "$c" ] || mkdir "$c" 
	    then
		cd "$c" || return $?
	    else
		echo "failed to create $c" >&2; return $?
	    fi
	done
    )
}



###########################
# Run a test (in '$1') then compare directories $2 and $3 to see if
# there are any difference.  If there are, explain them.

# So normally basically $1 should be an rsync command, and $2 and $3
# the source and destination directories.  This is only good when you
# expect to transfer the whole directory exactly as is.  If some files
# should be excluded, you might need to use something else.

checkit() {
    failed=

    # We can just write everything to stdout/stderr, because the
    # wrapper hides it unless there is a problem.

    echo "Running: \"$1\""  
    eval "$1" 
    status=$?
    if [ $status != 0 ]; then
	failed="YES";
    fi

    echo "-------------"
    echo "check how the directory listings compare with diff:"
    echo ""
    ( cd "$2" && rsync_ls_lR . ) > "$tmpdir/ls-from"
    ( cd "$3" && rsync_ls_lR . ) > "$tmpdir/ls-to"
    diff $diffopt "$tmpdir/ls-from" "$tmpdir/ls-to" || failed=YES

    echo "-------------"
    echo "check how the files compare with diff:"
    echo ""
    if [ "x$4" != x ]; then
	echo "  === Skipping (as directed) ==="
    else
	diff -r $diffopt "$2" "$3" || failed=YES
    fi

    echo "-------------"
    if [ -z "$failed" ] ; then
	return 0
    else
	return 1
    fi
}


build_rsyncd_conf() {
    # Build an appropriate configuration file
    conf="$scratchdir/test-rsyncd.conf"
    echo "building configuration $conf"

    port=2612
    pidfile="$scratchdir/rsyncd.pid"
    logfile="$scratchdir/rsyncd.log"

    cat >"$conf" <<EOF
# rsyncd configuration file autogenerated by $0

pid file = $pidfile
use chroot = no
hosts allow = localhost, 127.0.0.1
log file = $logfile
exclude = foobar.baz
max verbosity = 9

uid = 0
gid = 0

[test-from]
	path = $fromdir
	read only = yes

[test-to]
	path = $todir
	read only = no
EOF
}


build_symlinks() {
    mkdir "$fromdir"
    date >"$fromdir/referent"
    ln -s referent "$fromdir/relative"
    ln -s "$fromdir/referent" "$fromdir/absolute"
    ln -s nonexistent "$fromdir/dangling"
    ln -s "$srcdir/rsync.c" "$fromdir/unsafe"
}

test_fail() {
    echo "$@" >&2
    exit 1
}

test_skipped() {
    echo "$@" >&2
    echo "$@" > "$tmpdir/whyskipped"
    exit 77
}

# It failed, but we expected that.  don't dump out error logs, 
# because most users won't want to see them.  But do leave
# the working directory around.
test_xfail() {
    echo "$@" >&2
    exit 78
}

# Determine what shell command will appropriately test for links.
ln -s foo "$scratchdir/testlink"
for cmd in test /bin/test /usr/bin/test /usr/ucb/bin/test /usr/ucb/test
do
    for switch in -h -L
    do
        if $cmd $switch "$scratchdir/testlink" 2>/dev/null
	then
	    # how nice
	    TEST_SYMLINK_CMD="$cmd $switch"
	    # i wonder if break 2 is portable?
	    break 2
	fi
   done
done
# ok, now get rid of it
rm "$scratchdir/testlink"


if [ "x$TEST_SYMLINK_CMD" = 'x' ]
then
    test_fail "Couldn't determine how to test for symlinks"
else
    echo "Testing for symlinks using '$TEST_SYMLINK_CMD'"
fi
	

# Test whether something is a link, allowing for shell peculiarities
is_a_link() {
    # note the variable contains the first option and therefore is not quoted
    $TEST_SYMLINK_CMD "$1"
}


# We need to set the umask to be reproducible.  Note also that when we
# do some daemon tests as root, we will setuid() and therefore the
# directory has to be writable by the nobody user in some cases.  The
# best thing is probably to explicitly chmod those directories after
# creation.
 
umask 022
