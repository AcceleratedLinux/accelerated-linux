# Makefile for rsync. This is processed by configure to produce the final
# Makefile

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
mandir=@mandir@

LIBS=@LIBS@
CC=@CC@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
EXEEXT=@EXEEXT@
LDFLAGS=@LDFLAGS@

INSTALLCMD=@INSTALL@
INSTALLMAN=@INSTALL@

srcdir=@srcdir@
VPATH=$(srcdir)
SHELL=/bin/sh

VERSION=@VERSION@

.SUFFIXES:
.SUFFIXES: .c .o

HEADERS=byteorder.h config.h errcode.h proto.h rsync.h lib/pool_alloc.h
LIBOBJ=lib/wildmatch.o lib/compat.o lib/snprintf.o lib/mdfour.o \
	lib/permstring.o lib/pool_alloc.o @LIBOBJS@
ZLIBOBJ=zlib/deflate.o zlib/inffast.o zlib/inflate.o zlib/inftrees.o \
	zlib/trees.o zlib/zutil.o zlib/adler32.o zlib/compress.o zlib/crc32.o
OBJS1=rsync.o generator.o receiver.o cleanup.o sender.o exclude.o util.o \
	main.o checksum.o match.o syscall.o log.o backup.o
OBJS2=options.o flist.o io.o compat.o hlink.o token.o uidlist.o socket.o \
	fileio.o batch.o clientname.o
OBJS3=progress.o pipe.o
DAEMON_OBJ = params.o loadparm.o clientserver.o access.o connection.o authenticate.o
popt_OBJS=popt/findme.o  popt/popt.o  popt/poptconfig.o \
	popt/popthelp.o popt/poptparse.o
OBJS=$(OBJS1) $(OBJS2) $(OBJS3) $(DAEMON_OBJ) $(LIBOBJ) $(ZLIBOBJ) @BUILD_POPT@

TLS_OBJ = tls.o syscall.o lib/compat.o lib/snprintf.o lib/permstring.o

# Programs we must have to run the test cases
CHECK_PROGS = rsync$(EXEEXT) tls$(EXEEXT) getgroups$(EXEEXT) getfsdev$(EXEEXT) \
	trimslash$(EXEEXT) t_unsafe$(EXEEXT) wildtest$(EXEEXT)

# Objects for CHECK_PROGS to clean
CHECK_OBJS=getgroups.o getfsdev.o t_stub.o t_unsafe.o trimslash.o wildtest.o

# note that the -I. is needed to handle config.h when using VPATH
.c.o:
@OBJ_SAVE@
	$(CC) -I. -I$(srcdir) $(CFLAGS) $(CPPFLAGS) -c $< @CC_SHOBJ_FLAG@
@OBJ_RESTORE@

all: rsync$(EXEEXT)

install: all
	-mkdir -p ${DESTDIR}${bindir}
	${INSTALLCMD} ${INSTALL_STRIP} -m 755 rsync$(EXEEXT) ${DESTDIR}${bindir}
	-mkdir -p ${DESTDIR}${mandir}/man1
	-mkdir -p ${DESTDIR}${mandir}/man5
	${INSTALLMAN} -m 644 $(srcdir)/rsync.1 ${DESTDIR}${mandir}/man1
	${INSTALLMAN} -m 644 $(srcdir)/rsyncd.conf.5 ${DESTDIR}${mandir}/man5

install-strip:
	$(MAKE) INSTALL_STRIP='-s' install

rsync$(EXEEXT): $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

$(OBJS): $(HEADERS)

tls$(EXEEXT): $(TLS_OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(TLS_OBJ) $(LIBS)

getgroups$(EXEEXT): getgroups.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ getgroups.o $(LIBS)

getfsdev$(EXEEXT): getfsdev.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ getfsdev.o $(LIBS)

TRIMSLASH_OBJ = trimslash.o syscall.o lib/compat.o lib/snprintf.o
trimslash$(EXEEXT): $(TRIMSLASH_OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(TRIMSLASH_OBJ) $(LIBS)

T_UNSAFE_OBJ = t_unsafe.o syscall.o util.o t_stub.o lib/compat.o lib/snprintf.o
t_unsafe$(EXEEXT): $(T_UNSAFE_OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(T_UNSAFE_OBJ) $(LIBS)

gen: $(srcdir)/configure $(srcdir)/config.h.in proto man

man: $(srcdir)/rsync.1 $(srcdir)/rsyncd.conf.5

$(srcdir)/configure: $(srcdir)/configure.in $(srcdir)/aclocal.m4
	cd $(srcdir); autoconf

$(srcdir)/config.h.in: $(srcdir)/configure.in $(srcdir)/aclocal.m4
	cd $(srcdir); autoheader

$(srcdir)/rsync.1: $(srcdir)/rsync.yo
	yodl2man -o $(srcdir)/rsync.1 $(srcdir)/rsync.yo

$(srcdir)/rsyncd.conf.5: $(srcdir)/rsyncd.conf.yo
	yodl2man -o $(srcdir)/rsyncd.conf.5 $(srcdir)/rsyncd.conf.yo

proto:
	cat $(srcdir)/*.c $(srcdir)/lib/compat.c | awk -f $(srcdir)/mkproto.awk >$(srcdir)/proto.h.new
	if diff $(srcdir)/proto.h $(srcdir)/proto.h.new >/dev/null; then \
	  rm $(srcdir)/proto.h.new; \
	else \
	  mv $(srcdir)/proto.h.new $(srcdir)/proto.h; \
	fi

clean: cleantests
	rm -f *~ $(OBJS) $(TLS_OBJ) $(CHECK_PROGS) $(CHECK_OBJS)

cleantests:
	rm -rf ./testtmp*

# We try to delete built files from both the source and build
# directories, just in case somebody previously configured things in
# the source directory.
distclean: clean
	rm -f Makefile config.h config.status
	rm -f $(srcdir)/Makefile $(srcdir)/config.h $(srcdir)/config.status

	rm -f config.cache config.log
	rm -f $(srcdir)/config.cache $(srcdir)/config.log

	rm -f shconfig $(srcdir)/shconfig

# this target is really just for my use. It only works on a limited
# range of machines and is used to produce a list of potentially
# dead (ie. unused) functions in the code. (tridge)
finddead:
	nm *.o */*.o |grep 'U ' | awk '{print $$2}' | sort -u > nmused.txt
	nm *.o */*.o |grep 'T ' | awk '{print $$3}' | sort -u > nmfns.txt
	comm -13 nmused.txt nmfns.txt

# 'check' is the GNU name, 'test' is the name for everybody else :-)
.PHONY: check test

test: check


# There seems to be no standard way to specify some variables as
# exported from a Makefile apart from listing them like this.

# This depends on building rsync; if we need any helper programs it
# should depend on them too.

# We try to run the scripts with POSIX mode on, in the hope that will
# catch Bash-isms earlier even if we're running on GNU.  Of course, we
# might lose in the future where POSIX diverges from old sh.

check: all $(CHECK_PROGS)
	POSIXLY_CORRECT=1 TOOLDIR=`pwd` rsync_bin=`pwd`/rsync$(EXEEXT) srcdir="$(srcdir)" $(srcdir)/runtests.sh

wildtest.o: wildtest.c lib/wildmatch.c rsync.h
wildtest$(EXEEXT): wildtest.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ wildtest.o @BUILD_POPT@ $(LIBS)

# This does *not* depend on building or installing: you can use it to
# check a version installed from a binary or some other source tree,
# if you want.

installcheck: $(CHECK_PROGS)
	POSIXLY_CORRECT=1 TOOLDIR=`pwd` rsync_bin="$(bindir)/rsync$(EXEEXT)" srcdir="$(srcdir)" $(srcdir)/runtests.sh

# TODO: Add 'dist' target; need to know which files will be included

# Run the SPLINT (Secure Programming Lint) tool.  <www.splint.org>
.PHONY: splint
splint:
	splint +unixlib +gnuextensions -weak rsync.c


rsync.dvi: doc/rsync.texinfo
	texi2dvi -o $@ $<

rsync.ps: rsync.dvi
	dvips -ta4 -o $@ $<

rsync.pdf: doc/rsync.texinfo
	texi2dvi -o $@ --pdf $<


doxygen:
	cd $(srcdir) && rm dox/html/* && doxygen

# for maintainers only
doxygen-upload:
	rsync -avzv $(srcdir)/dox/html/ --delete \
	samba.org:/home/httpd/html/rsync/doxygen/head/
