Index: pam_tacplus/pam_tacplus.c
===================================================================
--- pam_tacplus.orig/pam_tacplus.c
+++ pam_tacplus/pam_tacplus.c
@@ -513,35 +513,19 @@
   
     attr = arep.attr;
     while (attr != NULL)  {
-        char attribute[attr->attr_len];
-        char value[attr->attr_len];
         char *sep;
 
+        if (ctrl & PAM_TAC_DEBUG)
+          syslog(LOG_DEBUG, "%s: returned attribute `%s' from server", __FUNCTION__, attr->attr);
+
         sep = index(attr->attr, '=');
         if(sep == NULL)
             sep = index(attr->attr, '*');
-        if(sep != NULL) {
-            bcopy(attr->attr, attribute, attr->attr_len-strlen(sep));
-            attribute[attr->attr_len-strlen(sep)] = '\0';
-            bcopy(sep, value, strlen(sep));
-            value[strlen(sep)] = '\0';
-
-            size_t i;
-            for (i = 0; attribute[i] != '\0'; i++) {
-                attribute[i] = toupper(attribute[i]);
-                if (attribute[i] == '-')
-                    attribute[i] = '_';
-            }
-
-            if (ctrl & PAM_TAC_DEBUG)
-                syslog(LOG_DEBUG, "%s: returned attribute `%s%s' from server", __FUNCTION__, attribute, value);
-
-            /* make returned attributes available for other PAM modules via PAM environment */
-            if (pam_putenv(pamh, strncat(attribute, value, strlen(value))) != PAM_SUCCESS)
+        if(sep != NULL && tac_groupname_len && (sep - attr->attr == tac_groupname_len) && strncmp(attr->attr, tac_groupname, tac_groupname_len) == 0) {
+            char groupname[tac_groupname_len + attr->attr_len];
+            sprintf(groupname, "GROUPNAME=%s", sep + 1);
+            if (pam_putenv(pamh, groupname) != PAM_SUCCESS)
                 syslog(LOG_WARNING, "%s: unable to set PAM environment", __FUNCTION__);
-
-        } else {
-            syslog(LOG_WARNING, "%s: invalid attribute `%s', no separator", __FUNCTION__, attr->attr);
         }
         attr = attr->next;
     }
Index: pam_tacplus/support.c
===================================================================
--- pam_tacplus.orig/support.c
+++ pam_tacplus/support.c
@@ -36,6 +36,8 @@
 char tac_service[64];
 char tac_protocol[64];
 char tac_prompt[64];
+char tac_groupname[64];
+int tac_groupname_len;
 
 void _pam_log(int err, const char *format,...) {
     char msg[256];
@@ -182,6 +184,7 @@
     tac_protocol[0] = 0;
     tac_prompt[0] = 0;
     tac_login[0] = 0;
+    tac_groupname[0] = 0;
 
     for (ctrl = 0; argc-- > 0; ++argv) {
         if (!strcmp (*argv, "debug")) { /* all */
@@ -205,6 +208,9 @@
             }
         } else if (!strncmp (*argv, "login=", 6)) {
             xstrcpy (tac_login, *argv + 6, sizeof(tac_login));
+        } else if (!strncmp (*argv, "groupname=", 10)) {
+            xstrcpy (tac_groupname, *argv + 10, sizeof(tac_groupname));
+	    tac_groupname_len = strlen(tac_groupname);
         } else if (!strcmp (*argv, "acct_all")) {
             ctrl |= PAM_TAC_ACCT;
         } else if (!strncmp (*argv, "server=", 7)) { /* authen & acct */
@@ -279,6 +285,7 @@
         _pam_log(LOG_DEBUG, "tac_protocol='%s'", tac_protocol);
         _pam_log(LOG_DEBUG, "tac_prompt='%s'", tac_prompt);
         _pam_log(LOG_DEBUG, "tac_login='%s'", tac_login);
+        _pam_log(LOG_DEBUG, "tac_groupname='%s'", tac_groupname);
     }
 
     return ctrl;
Index: pam_tacplus/support.h
===================================================================
--- pam_tacplus.orig/support.h
+++ pam_tacplus/support.h
@@ -37,6 +37,8 @@
 extern char tac_service[64];
 extern char tac_protocol[64];
 extern char tac_prompt[64];
+extern char tac_groupname[64];
+extern int tac_groupname_len;
 
 int _pam_parse (int, const char **);
 unsigned long _resolve_name (char *);
