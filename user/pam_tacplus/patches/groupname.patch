Index: pam_tacplus/pam_tacplus.c
===================================================================
--- pam_tacplus/pam_tacplus.c	2022-01-03 16:44:29.000000000 -0600
+++ pam_tacplus/pam_tacplus.c	2024-01-19 09:09:56.315027914 -0600
@@ -44,6 +44,8 @@
 #include "pam_tacplus.h"
 #include "support.h"
 
+#include <security/pam_dal.h>
+
 /* address of server discovered by pam_sm_authenticate */
 static tacplus_server_t active_server;
 struct addrinfo active_addrinfo;
@@ -717,29 +719,16 @@
         size_t attribute_len = strlen((const char *) element);
         size_t attribute_name_len = strcspn((const char *) element, "=*");
         if (attribute_name_len < attribute_len) {
-            char avpair[attribute_len + 1];
-            xstrncpy(avpair, element, sizeof(avpair)); /* Also copy terminating NUL */
+            const char *avpair = (const char *) element;
 
             if (ctrl & PAM_TAC_DEBUG)
                 syslog(LOG_DEBUG, "%s: returned attribute `%s' from server",
                        __FUNCTION__, avpair);
 
-            avpair[attribute_name_len] = '='; // replace '*' by '='
-            size_t i;
-            for (i = 0; i < attribute_name_len; i++) {
-                avpair[i] = toupper((unsigned char) avpair[i]);
-                if (avpair[i] == '-')
-                    avpair[i] = '_';
-            }
-
-            if (ctrl & PAM_TAC_DEBUG)
-                syslog(LOG_DEBUG, "%s: setting PAM environment `%s'",
-					   __FUNCTION__, avpair);
-
-			/* make returned attributes available for other PAM modules via PAM environment */
-			if (pam_putenv(pamh, avpair) != PAM_SUCCESS)
-				syslog(LOG_WARNING, "%s: unable to set PAM environment",
-                       __FUNCTION__);
+	    if (tac_groupname_len &&
+		(attribute_name_len == (size_t) tac_groupname_len) &&
+		strncmp(avpair, tac_groupname, tac_groupname_len) == 0)
+			pam_dal_set_groupname_from_attr(pamh, avpair + attribute_name_len + 1, attribute_len - tac_groupname_len - 1);
         } else {
             syslog(LOG_WARNING, "%s: invalid attribute `%s', no separator",
                    __FUNCTION__, (const char *) element);
Index: pam_tacplus/support.c
===================================================================
--- pam_tacplus.orig/support.c
+++ pam_tacplus/support.c
@@ -40,6 +40,8 @@
 char tac_service[64];
 char tac_protocol[64];
 char tac_prompt[64];
+char tac_groupname[64];
+int tac_groupname_len;
 struct addrinfo tac_srv_addr[TAC_PLUS_MAXSERVERS];
 struct sockaddr tac_sock_addr[TAC_PLUS_MAXSERVERS];
 
@@ -297,6 +299,7 @@
     tac_protocol[0] = 0;
     tac_prompt[0] = 0;
     tac_login[0] = 0;
+    tac_groupname[0] = 0;
 
     for (ctrl = 0; argc-- > 0; ++argv)
     {
@@ -325,6 +328,9 @@
             }
         } else if (!strncmp(*argv, "login=", strlen("login="))) {
             xstrncpy(tac_login, *argv + strlen("login="), sizeof(tac_login) - 1);
+        } else if (!strncmp (*argv, "groupname=", strlen("groupname="))) {
+            xstrncpy(tac_groupname, *argv + strlen("groupname="), sizeof(tac_groupname));
+	    tac_groupname_len = strlen(tac_groupname);
         } else if (!strcmp(*argv, "acct_all")) {
             ctrl |= PAM_TAC_ACCT;
         } else if (!strncmp(*argv, "server=", strlen("server="))) { /* authen & acct */
@@ -451,6 +457,7 @@
         _pam_log(LOG_DEBUG, "tac_protocol='%s'", tac_protocol);
         _pam_log(LOG_DEBUG, "tac_prompt='%s'", tac_prompt);
         _pam_log(LOG_DEBUG, "tac_login='%s'", tac_login);
+        _pam_log(LOG_DEBUG, "tac_groupname='%s'", tac_groupname);
     }
 
     return ctrl;
Index: pam_tacplus/support.h
===================================================================
--- pam_tacplus.orig/support.h
+++ pam_tacplus/support.h
@@ -39,6 +39,8 @@
 extern char tac_service[64];
 extern char tac_protocol[64];
 extern char tac_prompt[64];
+extern char tac_groupname[64];
+extern int tac_groupname_len;
 
 void tac_copy_addr_info(struct addrinfo *p_dst, const struct addrinfo *p_src);
 
