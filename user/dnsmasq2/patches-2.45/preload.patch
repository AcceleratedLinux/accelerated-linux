Date: 2006/11/13 19:52:31
#11908

Add the ability to request preloading of entries into the dnsmasq cache.
"dnsmasq -_ /path/to/preload-file" will cause the hostnames listed in
preload-file to be pinned in the cache and re-looked up at TTL expiry.

Dnsmasq calls a "/bin/preload_notify" script when the preloaded IP
address list is updated.


Index: dnsmasq2/src/cache.c
===================================================================
--- dnsmasq2.orig/src/cache.c	2009-03-16 16:56:07.000000000 +1000
+++ dnsmasq2/src/cache.c	2009-03-16 16:56:07.000000000 +1000
@@ -22,6 +22,11 @@ static struct crec *dhcp_spare = NULL, *
 #else
 static struct crec *new_chain = NULL;
 #endif
+#ifdef DO_PRELOAD
+static struct crec *dontpurge_chain = NULL;
+static int dontpurge_needed;
+static int dontpurge_chain_matches = 0, dontpurge_chain_inserts = 0, dontpurge_chain_deletes = 0;
+#endif
 static int cache_inserted = 0, cache_live_freed = 0, insert_error;
 #ifdef USE_BIGNAMES
 static union bigname *big_free = NULL;
@@ -182,6 +187,20 @@ static void cache_hash(struct crec *crec
  
 static void cache_free(struct crec *crecp)
 {
+#ifdef DO_PRELOAD
+  /*
+   * If we are processing an item that we preloaded, simply link
+   * it into the dontpurge_chain.  It will be freed later.
+   */
+  if (dontpurge_chain || (crecp->flags & F_DONTPURGE))
+    {
+      crecp->next = dontpurge_chain;
+      dontpurge_chain = crecp;
+      dontpurge_needed++;
+      return;
+    }
+#endif
+
   crecp->flags &= ~F_FORWARD;
   crecp->flags &= ~F_REVERSE;
   crecp->uid = uid++; /* invalidate CNAMES pointing to this. */
@@ -261,17 +280,24 @@ static int is_outdated_cname_pointer(str
   return 1;
 }
 
-static int is_expired(time_t now, struct crec *crecp)
+int cache_is_expired_flags(time_t now, struct crec *crecp, int flags)
 {
-  if (crecp->flags & F_IMMORTAL)
+  if (crecp->flags & (F_IMMORTAL | flags))
     return 0;
 
+  /* Follow one level of F_DONTPURGE CNAMES. */
+  if (!(flags & F_DONTPURGE) && (crecp->flags & (F_CNAME | F_DONTPURGE)) == (F_CNAME | F_DONTPURGE) &&
+      (is_outdated_cname_pointer(crecp) || (difftime(now, crecp->addr.cname.cache->ttd) > 0)))
+    return 1;
+
   if (difftime(now, crecp->ttd) < 0)
     return 0;
   
   return 1;
 }
 
+#define is_expired(now, crecp)	cache_is_expired_flags(now, crecp, F_DONTPURGE)
+
 static int cache_scan_free(char *name, struct all_addr *addr, time_t now, unsigned short flags)
 {
   /* Scan and remove old entries.
@@ -351,6 +377,62 @@ static int cache_scan_free(char *name, s
   return 1;
 }
 
+#ifdef DO_PRELOAD
+static int free_dontpurge_chain(void)
+{
+  int ndel = 0;
+
+  struct crec *dpc = dontpurge_chain;
+  dontpurge_chain = NULL;
+
+  while (dpc)
+    {
+      struct crec *tmp = dpc->next;
+      dpc->flags &= ~F_DONTPURGE;
+      cache_free(dpc);
+      ndel++;
+      dpc = tmp;
+    }
+  return ndel;
+}
+
+static struct crec *cache_unhash_name_addr_A(char *name, struct all_addr *addr, unsigned short prot)
+{
+  struct crec *ans = NULL, *crecp, *next, **up;
+
+  for (up = hash_bucket(name), crecp = *up; crecp; crecp = next)
+    {
+      next = crecp->hash_next;
+
+      if (!(crecp->flags & F_FORWARD) ||
+	  !hostname_isequal(cache_get_name(crecp), name) ||
+	  (crecp->flags & (F_HOSTS | F_DHCP | F_CNAME)) ||
+	  (crecp->flags & (F_IPV4 | F_IPV6)) != (prot & (F_IPV4 | F_IPV6)) ||
+	  (addr && memcmp(addr, &crecp->addr.addr, 
+#ifdef HAVE_IPV6
+                (crecp->flags & F_IPV6) ? IN6ADDRSZ : INADDRSZ
+#else
+	        INADDRSZ
+#endif
+               )))
+        {
+	  /* no match. */
+ 	  up = &crecp->hash_next;
+	  continue;
+	}
+      else
+        {
+	  /* match.  unhash the entry. */
+	  *up = crecp->hash_next;
+	  ans = crecp;
+	  break;
+	}
+    }
+
+  return ans;
+}
+#endif
+
 /* Note: The normal calling sequence is
    cache_start_insert
    cache_insert * n
@@ -364,12 +446,23 @@ void cache_start_insert(void)
   /* Free any entries which didn't get committed during the last
      insert due to error.
   */
+#ifdef DO_PRELOAD
+  free_dontpurge_chain();
+#endif
+
   while (new_chain)
     {
       struct crec *tmp = new_chain->next;
       cache_free(new_chain);
       new_chain = tmp;
     }
+#ifdef DO_PRELOAD
+  dontpurge_chain_matches = 0;
+  dontpurge_chain_inserts = 0;
+  dontpurge_chain_deletes = 0;
+  dontpurge_needed = 0;
+  dontpurge_chain = NULL;
+#endif
   new_chain = NULL;
   insert_error = 0;
 }
@@ -384,9 +477,12 @@ struct crec *cache_insert(char *name, st
   char *dyn_namep = NULL;
 #endif
   int freed_all = flags & F_REVERSE;
+#ifdef DO_PRELOAD
+  int dontpurge_idx = -1;
+#endif
   int free_avail = 0;
 
-  log_query(flags | F_UPSTREAM, name, addr, NULL);
+  log_reply(flags, name, addr, NULL);
 
   /* CONFIG bit no needed except for logging */
   flags &= ~F_CONFIG;
@@ -395,6 +491,30 @@ struct crec *cache_insert(char *name, st
   if (insert_error)
     return NULL;
 
+#ifdef DO_PRELOAD
+  /* Check if we should set the don't purge flag for name */
+  if (name && (flags & F_FORWARD) && !preload_disabled)
+    {
+      dontpurge_idx = preload_lookup_search(name, 0);
+      if (dontpurge_idx >= 0)
+        dontpurge_needed = 1;
+    }
+
+  /*
+   * When updating an A record, check to see if it is already in the cache.
+   * If so, just unhash it and update the TTL.  This stops us from invalidating
+   * any CNAMEs that point to it.
+   */
+  if (dontpurge_needed && (flags & F_FORWARD) && (flags & (F_IPV4 | F_IPV6)) &&
+      (new = cache_unhash_name_addr_A(name, addr, flags & (F_IPV4 | F_IPV6))) != NULL)
+    {
+       cache_unlink(new);
+       dontpurge_chain_matches++;
+       dontpurge_chain_deletes++;
+       goto just_ttl;
+    }
+#endif
+
   /* First remove any expired entries and entries for the name/address we
      are currently inserting. Fail is we attempt to delete a name from
      /etc/hosts or DHCP. */
@@ -501,6 +621,10 @@ struct crec *cache_insert(char *name, st
   else
     new->addr.cname.cache = NULL;
   
+#ifdef DO_PRELOAD
+just_ttl:
+#endif
+
   new->ttd = now + (time_t)ttl;
   new->next = new_chain;
   new_chain = new;
@@ -511,8 +635,64 @@ struct crec *cache_insert(char *name, st
 /* after end of insertion, commit the new entries */
 void cache_end_insert(void)
 {
+#ifdef DO_PRELOAD
+  struct crec *cmp;
+#endif
+
   if (insert_error)
-    return;
+    {
+#ifdef DO_PRELOAD
+      if (dontpurge_needed)
+        {
+	  syslog(LOG_ERR, _("Cache not large enough to contain all preloaded entries."));
+	  syslog(LOG_ERR, _("Disabling preload feature."));
+	  preload_disabled = 1;
+	  free_dontpurge_chain();
+        }
+#endif
+      return;
+    }
+
+#ifdef DO_PRELOAD
+  /*
+   * Walk the list of nodes we are purging and try to match them up to nodes that we
+   * are about to link into the hash tree.  Count the number of records that have
+   * changed.
+   */
+  cmp = dontpurge_chain;
+  while (cmp)
+    {
+      struct crec *newp;
+
+      if (cmp->flags & F_FORWARD)
+        for (newp = new_chain; newp; newp = newp->next)
+          {
+	    if (!(newp->flags & F_FORWARD) ||
+		!hostname_isequal(cache_get_name(cmp), cache_get_name(newp)) ||
+		(cmp->flags & (F_IPV4 | F_IPV6 | F_CNAME)) != (newp->flags & (F_IPV4 | F_IPV6 | F_CNAME)))
+	      continue;
+
+	    if (((cmp->flags & F_CNAME) && !is_outdated_cname_pointer(newp) && 
+	         hostname_isequal(cache_get_name(cmp->addr.cname.cache), cache_get_name(newp->addr.cname.cache))) || 
+                (!(cmp->flags & F_CNAME) && !memcmp(&newp->addr.addr, &cmp->addr.addr, 
+#ifdef HAVE_IPV6
+		       (cmp->flags & F_IPV6) ? IN6ADDRSZ : INADDRSZ
+#else
+		       INADDRSZ
+#endif
+	         )))
+	      {
+	        dontpurge_chain_matches++;
+	        break;
+	      }
+	  }
+
+      cmp = cmp->next;
+    }
+
+  /* Now free the whole dontpurge_chain. */
+  dontpurge_chain_deletes += free_dontpurge_chain();
+#endif
   
   while (new_chain)
     { 
@@ -524,11 +704,30 @@ void cache_end_insert(void)
 	{
 	  cache_hash(new_chain);
 	  cache_link(new_chain);
+#ifdef DO_PRELOAD
+	  if (dontpurge_needed)
+	    {
+	      new_chain->flags |= F_DONTPURGE;
+	      dontpurge_chain_inserts++;
+	      preload_lookup_search(cache_get_name(new_chain), 1);
+	    }
+#endif
 	  cache_inserted++;
 	}
       new_chain = tmp;
     }
   new_chain = NULL;
+
+#ifdef DO_PRELOAD
+  if (dontpurge_chain_inserts != dontpurge_chain_matches ||
+      dontpurge_chain_inserts != dontpurge_chain_deletes) {
+    preload_addrlist_updated++;
+  } else {
+	  // If dontpurge inserts were really just matches or deletes,
+	  // don't count them on the total inserted.
+	  cache_inserted-=dontpurge_chain_inserts;
+  }
+#endif
 }
 
 struct crec *cache_find_by_name(struct crec *crecp, char *name, time_t now, unsigned short prot)
@@ -964,6 +1163,7 @@ void cache_add_dhcp_entry(char *host_nam
 }
 #endif
 
+#define USE_BROKEN_RTC_DUMP   /* Displays TTL instead of formatted expiry time */
 void dump_cache(time_t now)
 {
   struct server *serv, *serv1;
@@ -1029,18 +1229,19 @@ void dump_cache(time_t now)
             else 
 	      a = inet_ntoa(cache->addr.addr.addr.addr4);
 #endif
-	    p += sprintf(p, "%-30.30s %s%s%s%s%s%s%s%s%s%s  ", a, 
+	    p += sprintf(p, "%-30.30s %s%s%s%s%s%s%s%s%s%s%s  ", a, 
 			 cache->flags & F_IPV4 ? "4" : "",
 			 cache->flags & F_IPV6 ? "6" : "",
 			 cache->flags & F_CNAME ? "C" : "",
 			 cache->flags & F_FORWARD ? "F" : " ",
 			 cache->flags & F_REVERSE ? "R" : " ",
 			 cache->flags & F_IMMORTAL ? "I" : " ",
+			 cache->flags & F_DONTPURGE ? "P" : " ",
 			 cache->flags & F_DHCP ? "D" : " ",
 			 cache->flags & F_NEG ? "N" : " ",
 			 cache->flags & F_NXDOMAIN ? "X" : " ",
 			 cache->flags & F_HOSTS ? "H" : " ");
-#ifdef HAVE_BROKEN_RTC
+#if defined(HAVE_BROKEN_RTC) || defined(USE_BROKEN_RTC_DUMP)
 	    p += sprintf(p, "%lu", cache->flags & F_IMMORTAL ? 0: (unsigned long)(cache->ttd - now));
 #else
 	    p += sprintf(p, "%s", cache->flags & F_IMMORTAL ? "\n" : ctime(&(cache->ttd)));
@@ -1078,7 +1279,7 @@ void querystr(char *str, unsigned short 
       sprintf(str,"query[%s]", typestr[i].name);
 }
 
-void log_query(unsigned short flags, char *name, struct all_addr *addr, char *arg)
+static void log_common(unsigned short flags, int reply, char *name, struct all_addr *addr, char *arg)
 {
   char *source, *dest = addrbuff;
   char *verb = "is";
@@ -1138,7 +1339,7 @@ void log_query(unsigned short flags, cha
     source = arg;
   else if (flags & F_CONFIG)
     source = "config";
-  else if (flags & F_UPSTREAM)
+  else if (reply)
     source = "reply";
   else if (flags & F_SERVER)
     {
@@ -1159,3 +1360,12 @@ void log_query(unsigned short flags, cha
   my_syslog(LOG_DEBUG, "%s %s %s %s", source, name, verb, dest);
 }
 
+void log_query(unsigned short flags, char *name, struct all_addr *addr, char *arg)
+{
+	log_common(flags, 0, name, addr, arg);
+}
+
+void log_reply(unsigned short flags, char *name, struct all_addr *addr, char *arg)
+{
+	log_common(flags, 1, name, addr, arg);
+}
Index: dnsmasq2/src/dnsmasq.c
===================================================================
--- dnsmasq2.orig/src/dnsmasq.c	2009-03-16 16:56:07.000000000 +1000
+++ dnsmasq2/src/dnsmasq.c	2009-03-16 17:24:20.000000000 +1000
@@ -617,6 +617,9 @@ int main (int argc, char **argv)
 #ifdef HAVE_DBUS
 	  || ((daemon->options & OPT_DBUS) && !daemon->dbus)
 #endif
+#ifdef DO_PRELOAD
+	  || preload_fd >= 0
+#endif
 	  )
 	{
 	  t.tv_sec = 0;
@@ -658,6 +661,14 @@ int main (int argc, char **argv)
       while (do_script_run(now));
 #endif
 #endif
+
+#ifdef DO_PRELOAD
+      if (preload_fd >= 0) 
+	{
+	  FD_SET(preload_fd, &rset);
+ 	  bump_maxfd(preload_fd, &maxfd);
+	}
+#endif
       
       /* must do this just before select(), when we know no
 	 more calls to my_syslog() can occur */
@@ -671,6 +682,11 @@ int main (int argc, char **argv)
 
       now = dnsmasq_time();
 
+#ifdef DO_PRELOAD
+      /* flush receive buffer for looped-back queries */
+      if (preload_fd >= 0 && FD_ISSET(preload_fd, &rset))
+        preload_drain();
+#endif
       check_log_writer(&wset);
 
       /* Check for changes to resolv files once per second max. */
@@ -729,6 +745,10 @@ int main (int argc, char **argv)
 #endif
 #endif
 
+#ifdef DO_PRELOAD
+      if (!preload_disabled && daemon->preload_file)
+        preload_tick(daemon, now);
+#endif
     }
 }
 
Index: dnsmasq2/src/dnsmasq.h
===================================================================
--- dnsmasq2.orig/src/dnsmasq.h	2009-03-16 16:56:07.000000000 +1000
+++ dnsmasq2/src/dnsmasq.h	2009-03-16 16:56:07.000000000 +1000
@@ -287,7 +287,7 @@ struct crec { 
 #define F_IPV4      128
 #define F_IPV6      256
 #define F_BIGNAME   512
-#define F_UPSTREAM  1024
+#define F_DONTPURGE 1024
 #define F_SERVER    2048
 #define F_NXDOMAIN  4096
 #define F_QUERY     8192
@@ -686,6 +686,12 @@ pid_t tcp_pids[MAX_PROCS];
   struct watch *watches;
 #endif
 
+  /* Preload stuff */
+#ifdef DO_PRELOAD
+  char *preload_file;
+  FILE *preload_stream;
+  time_t preload_file_mtime, preload_last_poll;
+#endif
   /* TFTP stuff */
 #ifdef HAVE_TFTP
   struct tftp_transfer *tftp_trans;
@@ -696,6 +702,7 @@ pid_t tcp_pids[MAX_PROCS];
 /* cache.c */
 void cache_init(void);
 void log_query(unsigned short flags, char *name, struct all_addr *addr, char *arg); 
+void log_reply(unsigned short flags, char *name, struct all_addr *addr, char *arg); 
 char *record_source(struct hostsfile *addn_hosts, int index);
 void querystr(char *str, unsigned short type);
 struct crec *cache_find_by_addr(struct crec *crecp,
@@ -712,6 +719,7 @@ void cache_add_dhcp_entry(char *host_nam
 void cache_unhash_dhcp(void);
 void dump_cache(time_t now);
 char *cache_get_name(struct crec *crecp);
+int cache_is_expired_flags(time_t now, struct crec *crecp, int flags);
 
 /* rfc1035.c */
 unsigned short extract_request(HEADER *header, size_t qlen, 
@@ -887,6 +895,18 @@ void queue_script(int action, struct dhc
 int helper_buf_empty(void);
 #endif
 
+/* preload.c */
+#ifdef DO_PRELOAD
+extern int preload_fd;
+extern int preload_addrlist_updated;
+extern int preload_lookup_sin_port;
+extern int preload_disabled;
+int preload_lookup(char *name, time_t now);
+int preload_lookup_search(char *name, int flush);
+void preload_drain(void);
+void preload_tick(struct daemon *daemon, time_t now);
+#endif
+
 /* tftp.c */
 #ifdef HAVE_TFTP
 void tftp_request(struct listener *listen, time_t now);
Index: dnsmasq2/src/forward.c
===================================================================
--- dnsmasq2.orig/src/forward.c	2009-03-16 16:55:56.000000000 +1000
+++ dnsmasq2/src/forward.c	2009-03-16 16:56:07.000000000 +1000
@@ -706,6 +706,16 @@ void receive_query(struct listener *list
 #endif
     }
 
+#ifdef DO_PRELOAD
+  /* If the request was generated by ourselves for preloading, just forward it on. */
+  if (type == T_A && source_addr.in.sin_addr.s_addr == htonl(0x7f000001) && source_addr.in.sin_port == preload_lookup_sin_port)
+    {
+    	forward_query(listen->fd, &source_addr, &dst_addr, if_index,
+		      header, (size_t)n, now, NULL);
+	return;
+    }
+#endif
+
   m = answer_request (header, ((char *) header) + PACKETSZ, (size_t)n, 
 		      dst_addr_4, netmask, now);
   if (m >= 1)
Index: dnsmasq2/src/option.c
===================================================================
--- dnsmasq2.orig/src/option.c	2009-03-16 16:56:07.000000000 +1000
+++ dnsmasq2/src/option.c	2009-03-16 16:56:07.000000000 +1000
@@ -60,7 +60,7 @@ struct myoption {
 };
 #endif
 
-#define OPTSTRING "9531yZDNLERKzowefnbvhdkqr:m:p:c:l:s:i:t:u:g:a:x:S:C:A:T:H:Q:I:B:F:G:O:M:X:V:U:j:P:J:W:Y:2:4:6:7:8:0:"
+#define OPTSTRING "9531yZDNLERKzowefnbvhdkqr:m:p:c:l:s:i:t:u:g:a:x:S:C:A:T:H:Q:I:B:F:G:O:M:X:V:U:j:P:J:W:Y:2:4:6:7:8:0:_:"
 
 /* options which don't have a one-char version */
 #define LOPT_RELOAD    256
@@ -193,6 +193,9 @@ static const struct myoption opts[] = 
 #endif
     {"dns-forward-max", 1, 0, '0'},
     {"clear-on-reload", 0, 0, LOPT_RELOAD },
+#ifdef DO_PRELOAD
+    {"preload-file", 1, 0, '_'},
+#endif
 #ifdef DO_DHCP
     {"dhcp-ignore-names", 2, 0, LOPT_NO_NAMES },
 #endif
@@ -397,6 +400,9 @@ static struct {
 #endif
   { LOPT_NAPTR, ARG_DUP, "<name>,<naptr>", gettext_noop("Specify NAPTR DNS record."), NULL },
   { LOPT_MINPORT, ARG_ONE, "<port>", gettext_noop("Specify lowest port available for DNS query transmission."), NULL },
+#ifdef DO_PRELOAD
+  { '_', ARG_ONE, "path", gettext_noop("Specify path to file of hosts to preload from."), NULL },
+#endif
   { 0, 0, NULL, NULL, NULL }
 }; 
 
@@ -1055,6 +1061,16 @@ static char *one_opt(int option, char *a
 	break;
       }
 
+#ifdef DO_PRELOAD
+    case '_':
+      {
+	if (daemon->preload_file != NULL)
+	  die(_("only one preload file is allowed."), NULL, EC_BADCONF);
+	daemon->preload_file = opt_string_alloc(arg);
+	break;
+      }
+#endif
+
     case '7': /* --conf-dir */	      
       {
 	DIR *dir_stream;
Index: dnsmasq2/src/preload.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ dnsmasq2/src/preload.c	2009-03-16 16:56:07.000000000 +1000
@@ -0,0 +1,333 @@
+/*
+ * Code to handle preloading of entries into the dnsmasq cache.
+ *
+ * Chris Pascoe - Secure Computing 2006
+ */
+
+#include "dnsmasq.h"
+
+#ifdef DO_PRELOAD
+
+#define PARALLEL_PRELOAD_LOOKUPS 4
+#define PRELOAD_QUERY_TIMEOUT (2.0)	/* Individual query timeout */
+#define PRELOAD_RECHECK_DELAY (60.0)	/* How long do we wait between checks of the address list? */
+
+char  *preload_lookup_slots[PARALLEL_PRELOAD_LOOKUPS];
+time_t preload_lookup_times[PARALLEL_PRELOAD_LOOKUPS];
+int    preload_lookups_pending = 0;
+
+int    preload_fd = -1;
+int    preload_lookup_sin_port = -1;
+struct sockaddr_in preload_lookup_saddr;
+char   preload_lookup_pbuf[MAXDNAME + 32 + sizeof(HEADER)];
+int    preload_disabled = 0;
+int    preload_addrlist_updated = 0;
+
+void preload_notify(struct daemon *daemon)
+{
+  struct stat st;
+  pid_t p;
+
+  syslog(LOG_NOTICE, _("The preloaded address list was updated."));
+
+  if (stat("/bin/preload_notify", &st) != 0)
+    return;
+
+  if ((p = fork()) != 0)
+    {
+      if (p != -1)
+	{
+	  int i;
+	  for (i = 0; i < MAX_PROCS; i++)
+	    if (daemon->tcp_pids[i] == 0)
+	      {
+		daemon->tcp_pids[i] = p;
+		break;
+	      }
+	}
+      return;
+    }
+  execl("/bin/preload_notify", "preload_notify", NULL);
+}
+
+int preload_lookup_search(char *name, int flush)
+{
+  int i;
+
+  if (!name)
+    return -1;
+
+  for (i = 0; preload_lookups_pending && i < PARALLEL_PRELOAD_LOOKUPS; i++)
+    if (preload_lookup_slots[i] != NULL && !strcmp(name, preload_lookup_slots[i]))
+      {
+	if (flush)
+	  {
+	    free(preload_lookup_slots[i]);
+	    preload_lookup_slots[i] = NULL;
+	    preload_lookups_pending--;
+	  }
+	return i;
+      }
+
+  return -1;
+}
+
+int preload_lookup(char *hn, time_t now)
+{ 
+  int i, hnlen = strlen(hn);
+  float diff;
+  static time_t last_slot_check;
+
+  if (preload_lookups_pending == PARALLEL_PRELOAD_LOOKUPS && !((diff = difftime(last_slot_check, now)) < -1.0 || diff > 1.0))
+    return -1;  /* No slots */
+
+  for (i = 0; i < PARALLEL_PRELOAD_LOOKUPS; i++)
+    {
+      if (preload_lookup_slots[i] == NULL)
+	break;
+      diff = difftime(preload_lookup_times[i], now);
+      if (diff < -PRELOAD_QUERY_TIMEOUT || diff > PRELOAD_QUERY_TIMEOUT)
+	{
+	  /* Query timed out.  Re-use slot. */
+	  free(preload_lookup_slots[i]);
+	  preload_lookup_slots[i] = NULL;
+	  preload_lookups_pending--;
+	  break;
+	}
+    }
+
+  if (i >= PARALLEL_PRELOAD_LOOKUPS)
+    {
+      last_slot_check = now;
+      return -2;  /* No slots */
+    }
+
+  preload_lookup_slots[i] = strdup(hn);
+  if (preload_lookup_slots[i] == NULL)
+    return -6;  /* No memory */
+
+  preload_lookups_pending++;
+  preload_lookup_times[i] = now;
+
+  if (preload_fd < 0)
+    {
+       struct sockaddr_in oursock;
+       socklen_t oursock_sz = sizeof(oursock);
+       preload_fd = socket(AF_INET, SOCK_DGRAM, 0);
+       if (preload_fd < 0 || !fix_fd(preload_fd))
+	 return -3;  /* No fd */
+   
+       preload_lookup_saddr.sin_family = AF_INET;
+       preload_lookup_saddr.sin_port = 0;
+       preload_lookup_saddr.sin_addr.s_addr = htonl(0x7f000001);
+#ifdef HAVE_SOCKADDR_SA_LEN
+       preload_lookup_saddr.sin_len = sizeof(struct sockaddr_in);
+#endif
+   
+       /* Bind our lookup connection to a random port */
+       if (bind(preload_fd, (struct sockaddr *)&preload_lookup_saddr, sizeof(preload_lookup_saddr)) > 0)
+	 {
+	   perror("bind");
+	   close(preload_fd);
+	   preload_fd = -1;
+	   return -3;  /* FD error */
+	 }
+       if (getsockname(preload_fd, (struct sockaddr *)&oursock, &oursock_sz))
+	 {
+	   perror("getsockname");
+	   close(preload_fd);
+	   preload_fd = -1;
+	   return -3;  /* FD error */
+	 }
+       preload_lookup_sin_port = oursock.sin_port;
+
+       preload_lookup_saddr.sin_port = htons(NAMESERVER_PORT);
+       if (connect(preload_fd, (struct sockaddr *)&preload_lookup_saddr, sizeof(preload_lookup_saddr)) > 0)
+	 {
+	   perror("connect");
+	   close(preload_fd);
+	   preload_fd = -1;
+	   return -3;  /* FD error */
+	 }
+    }
+
+  if (hnlen < MAXDNAME)
+    {
+      HEADER *h = (HEADER *)preload_lookup_pbuf;
+      char *lastcp = hn, *cp, *ptr = (char *)(h + 1);
+      int ret;
+
+      memset(h, 0, sizeof(HEADER));
+      h->id = rand16();
+      h->opcode = 0;
+      h->rd = 1;
+      h->qdcount = htons(1);
+
+      while ((lastcp - hn) < hnlen)
+	{
+	  int slen;
+    
+	  cp = memchr(lastcp, '.', hnlen - (lastcp - hn));
+	  if (!cp)
+	    cp = hn + hnlen;
+    
+	  slen = cp - lastcp;
+	  if (slen > 63)
+	    return -4;  /* label too long */
+	  if (slen == 0)
+	    return -4;  /* zero length label is invalid */
+    
+	  *ptr++ = slen;
+	  memcpy(ptr, lastcp, slen);
+	  ptr += slen;
+	  lastcp = cp + 1;
+       }
+
+      *ptr++ = 0; /* End label, len == 0 */
+      *ptr++ = 0; *ptr++ = 1; /* Query type  == A  */
+      *ptr++ = 0; *ptr++ = 1; /* Query class == IN */
+
+      ret = send(preload_fd, preload_lookup_pbuf, (ptr - preload_lookup_pbuf), 0);
+      if (ret < 0)
+	return -5;  /* sendto failed */
+    }
+
+  return i;  /* slot number */
+}
+
+/* Preload hosts file into memory */
+int do_preload(struct daemon *daemon, time_t now)
+{
+  static char fline[1025];
+  static int fline_valid;
+  struct crec *cr;
+  int r, nreps = 0;
+
+next_line:
+  if (++nreps > 100)
+    return 1;
+
+  if (daemon->preload_stream && feof(daemon->preload_stream))
+    {
+      fclose(daemon->preload_stream);
+      daemon->preload_stream = NULL;
+    }
+  if (daemon->preload_stream == NULL)
+    {
+      daemon->preload_stream = fopen(daemon->preload_file, "r");
+      if (daemon->preload_stream == NULL)
+	{
+	  daemon->preload_last_poll = now;
+	  return -1; /* No file */
+	}
+      daemon->preload_last_poll = 0;	/* in progress */
+      fline_valid = 0;
+    }
+
+  if (!fline_valid && fgets(fline, sizeof(fline), daemon->preload_stream) == NULL)
+    {
+      daemon->preload_last_poll = now;
+      return 0;
+    }
+
+  while (fline[strlen(fline) - 1] == '\n' || fline[strlen(fline) - 1] == '\r')
+    fline[strlen(fline) - 1] = 0;
+
+  /* Only valid DNS characters */
+  if (strspn(fline, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-/") != strlen(fline))
+    goto next_line;
+
+  /* Don't send A for A queries */
+  if (strspn(fline, "0123456789.") == strlen(fline))
+    goto next_line;
+
+  /* Hostname must contain a . */
+  if (!strchr(fline, '.'))
+    goto next_line;
+
+  /* Search for name in cache */
+  cr = cache_find_by_name(NULL, fline, now, F_IPV4 | F_CNAME);
+  if (cr != NULL)
+    {
+      /* Take host off pending lookup list. */
+      r = preload_lookup_search(cache_get_name(cr), 1);
+
+      /* Don't ever purge this result */
+      cr->flags |= F_DONTPURGE;
+
+      /* Don't trigger a relookup of the record if it hasn't yet expired. */
+      if (!cache_is_expired_flags(now, cr, 0))
+	{
+	  fline_valid = 0;
+	  goto next_line;
+	}
+    }
+
+  r = preload_lookup(fline, now);
+  if (r >= 0)
+    fline_valid = 0;
+  else
+    fline_valid = 1;
+
+  return 1;
+}
+
+void preload_drain(void)
+{
+  ssize_t t;
+
+  while ((t = read(preload_fd, preload_lookup_pbuf, sizeof(preload_lookup_pbuf))) > 0)
+    ;
+}
+
+void preload_tick(struct daemon *daemon, time_t now)
+{
+  float diff;
+
+  if (daemon->preload_last_poll == 0 ||
+      (diff = difftime(now, daemon->preload_last_poll)) >= PRELOAD_RECHECK_DELAY || diff < -PRELOAD_RECHECK_DELAY)
+    {
+      struct stat statbuf;
+
+      if (stat(daemon->preload_file, &statbuf) == 0)
+	{
+	  if (statbuf.st_mtime != daemon->preload_file_mtime)
+	    {
+	      /* file updated */
+	      if (daemon->preload_stream)
+	        {
+	          fclose(daemon->preload_stream);
+	          daemon->preload_stream = NULL;
+	          clear_cache_and_reload(now);
+	        }
+	      daemon->preload_file_mtime = statbuf.st_mtime;
+	    }
+	  do_preload(daemon, now);
+	}
+      else
+	{
+	  /* stat failed */
+	  if (daemon->preload_last_poll == 0 || daemon->preload_file_mtime != 0)
+	    syslog(LOG_WARNING, _("cannot access preload file %s: %s"), daemon->preload_file, strerror(errno));
+	  if (daemon->preload_file_mtime)
+	    {
+	      if (daemon->preload_stream)
+		{
+		  fclose(daemon->preload_stream);
+		  daemon->preload_stream = NULL;
+		}
+	      daemon->preload_file_mtime = 0;
+	      clear_cache_and_reload(now);
+	    }
+	  daemon->preload_last_poll = now;
+	}
+    }
+  else if (daemon->preload_last_poll != 0 && preload_addrlist_updated &&
+	   ((diff = difftime(now, daemon->preload_last_poll)) > PRELOAD_QUERY_TIMEOUT || diff < -PRELOAD_QUERY_TIMEOUT))
+    {
+      preload_notify(daemon);
+      preload_addrlist_updated = 0;
+    }
+}
+
+#endif
Index: dnsmasq2/src/rfc1035.c
===================================================================
--- dnsmasq2.orig/src/rfc1035.c	2009-03-16 16:56:07.000000000 +1000
+++ dnsmasq2/src/rfc1035.c	2009-03-16 16:56:07.000000000 +1000
@@ -1255,6 +1255,10 @@ size_t answer_request(HEADER *header, ch
 			       before the lease expires. */
 			    if  (crecp->flags & (F_IMMORTAL | F_DHCP))
 			      ttl = daemon->local_ttl;
+#ifdef DO_PRELOAD
+			    else if ((crecp->flags & F_DONTPURGE) && crecp->ttd < now)
+			      ttl = 0;
+#endif
 			    else
 			      ttl = crecp->ttd - now;
 			    
@@ -1368,8 +1372,16 @@ size_t answer_request(HEADER *header, ch
 			{
 			  if (!dryrun)
 			    {
+			      unsigned long ttl;
 			      log_query(crecp->flags, name, NULL, record_source(daemon->addn_hosts, crecp->uid));
-			      if (add_resource_record(header, limit, &trunc, nameoffset, &ansp, crecp->ttd - now, &nameoffset,
+#ifdef DO_PRELOAD
+			      if ((crecp->flags & F_DONTPURGE) && crecp->ttd < now)
+			        ttl = 0;
+			      else
+#endif
+				ttl = crecp->ttd - now;
+
+			      if (add_resource_record(header, limit, &trunc, nameoffset, &ansp, ttl, &nameoffset,
 						      T_CNAME, C_IN, "d", cache_get_name(crecp->addr.cname.cache)))
 				anscount++;
 			    }
@@ -1406,6 +1418,13 @@ size_t answer_request(HEADER *header, ch
 			      
 			      if  (crecp->flags & (F_IMMORTAL | F_DHCP))
 				ttl = daemon->local_ttl;
+#ifdef DO_PRELOAD
+			      else if ((crecp->flags & F_DONTPURGE) && crecp->ttd < now)
+			        {
+				  ttl = 0;
+				  preload_lookup(cache_get_name(crecp), now);
+			        }
+#endif
 			      else
 				ttl = crecp->ttd - now;
 			      
@@ -1551,6 +1570,13 @@ size_t answer_request(HEADER *header, ch
 
 	    if  (crecp->flags & (F_IMMORTAL | F_DHCP))
 	      ttl = daemon->local_ttl;
+#ifdef DO_PRELOAD
+	    else if ((crecp->flags & F_DONTPURGE) && crecp->ttd < now)
+	      {
+		ttl = 0;
+		preload_lookup(cache_get_name(crecp), now);
+	      }
+#endif
 	    else
 	      ttl = crecp->ttd - now;
 	    
Index: dnsmasq2/makefile
===================================================================
--- dnsmasq2.orig/makefile	2009-03-16 16:56:07.000000000 +1000
+++ dnsmasq2/makefile	2009-03-16 16:56:07.000000000 +1000
@@ -1,5 +1,5 @@
 
-CFLAGS += -DNO_GETTEXT -DHAVE_ISC_READER -DNO_TFTP
+CFLAGS += -DNO_GETTEXT -DHAVE_ISC_READER -DDO_PRELOAD -DNO_TFTP
 
 CFLAGS += -g -O2
 ifndef CONFIG_IPV6
