From 58ba4abd7e92874554bb84f1404a0b0ca158cab8 Mon Sep 17 00:00:00 2001
From: Ayman Ghanem <ayman.ghanem@digi.com>
Date: Tue, 11 Apr 2023 10:40:38 -0500
Subject: [PATCH] Delay NXDOMAIN response

If we are sending requests to all servers then do not forward the first
result we get back if it is an NXDOMAIN,  another server may respond
with a better answer and we would rather return that.

Remember the NXDOMAIN and forward that answer iff we do not get a better
one and not all servers respond.

We always send the response from the last server if all servers respond.
A short timeout will send the saved NXDOMAIN response otherwise.

(Original author: David McCullough <david.mccullough@accelecon.com>)
---
 src/dnsmasq.c | 17 +++++++---
 src/dnsmasq.h |  5 +++
 src/forward.c | 87 +++++++++++++++++++++++++++++++++++++++++++++++----
 3 files changed, 99 insertions(+), 10 deletions(-)

diff --git a/src/dnsmasq.c b/src/dnsmasq.c
index 30fb419..8338b44 100644
--- a/src/dnsmasq.c
+++ b/src/dnsmasq.c
@@ -29,7 +29,7 @@ struct daemon *daemon;
 static volatile pid_t pid = 0;
 static volatile int pipewrite;
 
-static void set_dns_listeners(void);
+static int set_dns_listeners(time_t now);
 static void set_tftp_listeners(void);
 static void check_dns_listeners(time_t now);
 static void sig_handler(int sig);
@@ -1061,6 +1061,7 @@ int main (int argc, char **argv)
   while (1)
     {
       int timeout = fast_retry(now);
+      int t;
       
       poll_reset();
       
@@ -1074,9 +1075,12 @@ int main (int argc, char **argv)
 	       (timeout == -1 || timeout > 1000))
 	timeout = 1000;
       
-      if (daemon->port != 0)
-	set_dns_listeners();
-      
+      if (daemon->port != 0) {
+        t = set_dns_listeners(now) * 1000;
+        if (t > 0 && (timeout < 0 || t < timeout))
+          timeout = t;
+      }
+
 #ifdef HAVE_TFTP
       set_tftp_listeners();
 #endif
@@ -1771,12 +1775,15 @@ static void set_tftp_listeners(void)
 }
 #endif
 
-static void set_dns_listeners(void)
+static int set_dns_listeners(time_t now)
 {
   struct serverfd *serverfdp;
   struct listener *listener;
   struct randfd_list *rfl;
   int i;
+  int wait = 0;
+  
+  wait = check_reply_timeout(now);
   
   for (serverfdp = daemon->sfds; serverfdp; serverfdp = serverfdp->next)
     poll_listen(serverfdp->fd, POLLIN);
@@ -1811,6 +1818,8 @@ static void set_dns_listeners(void)
     for (i = 0; i < daemon->max_procs; i++)
       if (daemon->tcp_pipes[i] != -1)
 	poll_listen(daemon->tcp_pipes[i], POLLIN);
+
+  return wait;
 }
 
 static void check_dns_listeners(time_t now)
@@ -2160,7 +2169,7 @@ int delay_dhcp(time_t start, int sec, int fd, uint32_t addr, unsigned short id)
       if (fd != -1)
         poll_listen(fd, POLLIN);
       if (daemon->port != 0)
-	set_dns_listeners();
+	set_dns_listeners(now);
 #ifdef HAVE_TFTP
       set_tftp_listeners();
 #endif
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index e455c3f..08d5e61 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -803,6 +803,10 @@ struct frec {
   struct frec *blocking_query; /* Query which is blocking us. */
 #endif
   struct frec *next;
+
+  void *reply; /* saved reply while waiting for a better response */
+  int rlen; /* length of reply */
+  struct server *server;
 };
 
 /* flags in top of length field for DHCP-option tables */
@@ -1533,6 +1537,7 @@ void resend_query(void);
 int allocate_rfd(struct randfd_list **fdlp, struct server *serv);
 void free_rfds(struct randfd_list **fdlp);
 int fast_retry(time_t now);
+int check_reply_timeout(time_t now);
 
 /* network.c */
 int indextoname(int fd, int index, char *name);
diff --git a/src/forward.c b/src/forward.c
index 32f37e4..778cf43 100644
--- a/src/forward.c
+++ b/src/forward.c
@@ -29,6 +29,9 @@ static void query_full(time_t now, char *domain);
 
 static void return_reply(time_t now, struct frec *forward, struct dns_header *header, ssize_t n, int status);
 
+static void forward_reply(struct dns_header *header, size_t n, time_t now,
+			  struct frec *forward, struct server *server);
+
 /* Send a UDP packet with its source address set as "source" 
    unless nowild is true, when we just send it with the kernel default */
 int send_from(int fd, int nowild, char *packet, size_t len, 
@@ -1108,6 +1111,20 @@ static void dnssec_validate(struct frec *forward, struct dns_header *header,
 }
 #endif
 
+static void store_reply(struct dns_header *header, size_t nn, struct frec *forward, struct server *server)
+{
+  prettyprint_addr(&server->addr, daemon->namebuff);
+  if (forward->reply)
+    return;
+  forward->reply = (void *) whine_malloc(nn);
+  if (!forward->reply)
+    return;
+
+  memcpy(forward->reply, header, nn);
+  forward->rlen = nn;
+  forward->server = server;
+}
+
 /* sets new last_server */
 void reply_query(int fd, time_t now)
 {
@@ -1252,15 +1269,32 @@ void reply_query(int fd, time_t now)
 	}
     }
 
-  /* If the answer is an error, keep the forward record in place in case
+  /* If we are querying all servers and we get an NXDOMAIN response, save
+     it in case we get a better response a bit later,  otherwise send
+     through what we just received.
+
+     If the answer is an error, keep the forward record in place in case
      we get a good reply from another server. Kill it when we've
      had replies from all to avoid filling the forwarding table when
      everything is broken */
 
-  /* decrement count of replies recieved if we sent to more than one server. */
-  if (forward->forwardall && (--forward->forwardall > 1) && RCODE(header) == REFUSED)
+  /* decrement count of replies received if we sent to more than one server. */
+  if (forward->forwardall)
+    forward->forwardall--;
+  if (option_bool(OPT_ALL_SERVERS) && forward->forwardall > 1 && RCODE(header) == NXDOMAIN)
+    {
+      store_reply(header, n, forward, server);
+      return;
+    }
+  if ((forward->forwardall > 1) && RCODE(header) == REFUSED)
     return;
 
+  forward_reply(header, n, now, forward, server);
+}
+
+static void forward_reply(struct dns_header *header, size_t n, time_t now,
+                          struct frec *forward, struct server *server)
+{
   /* We tried resending to this server with a smaller maximum size and got an answer.
      Make that permanent. To avoid reduxing the packet size for a single dropped packet,
      only do this when we get a truncated answer, or one larger than the safe size. */
@@ -1301,6 +1335,34 @@ void reply_query(int fd, time_t now)
     return_reply(now, forward, header, n, STAT_OK); 
 }
 
+int check_reply_timeout(time_t now)
+{
+  struct frec *f, *oldest;
+
+  /* Check for reply timeout in records. If found any, send stored reply */
+  for (f = daemon->frec_list, oldest = NULL; f; f = f->next)
+    {
+#ifdef HAVE_DNSSEC
+      /* Don't free DNSSEC sub-queries here, as we may end up with
+	 dangling references to them. They'll go when their "real" query
+	 is freed. */
+      if (f->dependent)
+	continue;
+#endif
+      if (f->reply == NULL)
+	continue;
+
+      if (difftime(now, f->time) >= TIMEOUT)
+	forward_reply(f->reply, f->rlen, now, f, f->server);
+      else if (!oldest || difftime(f->time, oldest->time) <= 0)
+	oldest = f;
+    }
+
+    /* Return with the oldest record's expiration time */
+    return oldest ? (oldest->time + (time_t)TIMEOUT - now) : 0;
+}
+
+
 static void return_reply(time_t now, struct frec *forward, struct dns_header *header, ssize_t n, int status)
 {
   int check_rebind = 0, no_cache_dnssec = 0, cache_secure = 0, bogusanswer = 0;
@@ -1418,9 +1480,9 @@ static void return_reply(time_t now, struct frec *forward, struct dns_header *he
 	  if (src->fd != -1)
 	    {
 #ifdef HAVE_DUMPFILE
-	      dump_packet_udp(DUMP_REPLY, daemon->packet, (size_t)nn, NULL, &src->source, src->fd);
+	      dump_packet_udp(DUMP_REPLY, header, (size_t)nn, NULL, &src->source, src->fd);
 #endif 
-	      send_from(src->fd, option_bool(OPT_NOWILD) || option_bool (OPT_CLEVERBIND), daemon->packet, nn, 
+	      send_from(src->fd, option_bool(OPT_NOWILD) || option_bool (OPT_CLEVERBIND), (char *)header, nn, 
 			&src->source, &src->dest, src->iface);
 	      
 	      if (option_bool(OPT_EXTRALOG) && src != &forward->frec_src)
@@ -2871,6 +2933,14 @@ static void free_frec(struct frec *f)
   f->dependent = NULL;
   f->next_dependent = NULL;
 #endif
+
+  f->server = NULL;
+  if (f->reply)
+    {
+      free(f->reply);
+      f->reply = NULL;
+    }
+    f->rlen = 0;
 }
 
 
@@ -2900,7 +2970,12 @@ static struct frec *get_new_frec(time_t now, struct server *master, int force)
 	  if (!f->dependent && !force)
 #endif
 	    {
-	      if (difftime(now, f->time) >= 4*TIMEOUT)
+	      if (f->reply && difftime(now, f->time) >= TIMEOUT)
+		{
+		  forward_reply(f->reply, f->rlen, now, f, f->server);
+		  target = f;
+		}
+	      else if (difftime(now, f->time) >= 4*TIMEOUT)
 		{
 		  daemon->metrics[METRIC_DNS_UNANSWERED_QUERY]++;
 		  free_frec(f);
-- 
2.34.1

