# Makefile for uClibc
#
# Copyright (C) 2000-2005 Erik Andersen <andersen@uclibc.org>
#
# Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
#

CSRC := brk.c ioperm.c iopl.c mmap.c __syscall_error.c sigaction.c

SSRC := \
	__longjmp.S setjmp.S bsd-setjmp.S \
	bsd-_setjmp.S sigrestorer.S mmap64.S \
	vfork.S clone.S

ifeq ($(UCLIBC_HAS_THREADS_NATIVE),y)
SSRC += libc-aeabi_read_tp.S libc-thumb_atomics.S
endif

ifeq ($(UCLIBC_HAS_ADVANCED_REALTIME),y)
CSRC += posix_fadvise.c posix_fadvise64.c
endif

# Is our compiler set up for EABI ?
IS_EABI:=$(shell $(CC) $(CFLAGS) -x c - -E -dM </dev/null 2>/dev/null \
                 | grep __ARM_EABI__ 2>&1 >/dev/null && echo 'y' \
          )

ifeq ($(IS_EABI),y)
CSRC += aeabi_assert.c aeabi_atexit.c aeabi_errno_addr.c \
	aeabi_localeconv.c aeabi_memclr.c aeabi_memcpy.c \
	aeabi_memmove.c aeabi_memset.c find_exidx.c
SSRC += syscall-eabi.S
ARCH_OBJ_FILTEROUT := syscall.c
ifeq ($(UCLIBC_HAS_WCHAR),y)
CSRC += aeabi_mb_cur_max.c
endif
else
CSRC += syscall.c
endif

ifeq ($(IS_EABI),y)
libc-static-y += $(ARCH_OUT)/aeabi_lcsts.o $(ARCH_OUT)/aeabi_math.o \
	$(ARCH_OUT)/aeabi_sighandlers.o
libc-nonshared-y += $(ARCH_OUT)/aeabi_lcsts.os $(ARCH_OUT)/aeabi_math.os \
	$(ARCH_OUT)/aeabi_sighandlers.os $(ARCH_OUT)/aeabi_unwind_cpp_pr1.o
endif
