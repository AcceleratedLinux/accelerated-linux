#!/usr/bin/env python3

# A helper for visualizing the products.py include
# graph. Example usage:
#
#    tools/kcheck/graph-includes | sfdp -Txdot | xdot -n -

import sys
from product import products, groups

def warn(s):
    """Prints a warning message"""
    print(s, file=sys.stderr)

all_includes_memoize = {}
def all_includes(node):
    """Recursive, memoized inclusion closure over products, groups.
    Returns the set of group names transitively included by
    the named node.
    (functools.cached didn't like cycles)"""
    name = node['name']
    if name in all_includes_memoize:
        result = all_includes_memoize[name]
        if result is None:
            warn(f"cycle at {name}")
            result = set()
        return result
    all_includes_memoize[name] = None
    result = set()
    for inc_name in node['include']:
        result.add(inc_name)
        result.update(all_includes(groups[inc_name]))
    all_includes_memoize[name] = result
    return result

def trim_groups_include():
    """Remove redundant elements from every groups[*]['include'].
    This is to make the output graph smaller."""

    all_nodes = list(groups.values()) + list(products.values())

    for node in all_nodes:
        if 'include' not in node:
            node['include'] = []
        for name in node['include']:
            if name not in groups:
                warn(f"unknown include '{name}' in {node['name']}")

    for node in all_nodes:
        indirect = set()
        for name in node['include']:
            indirect.update(all_includes(groups[name]))
        for name in indirect:
            if indirect in node['include']:
                node['include'].remove(indirect)
                warn(f"removed redundant include {indirect} from group {name}")

def dot_str(s):
    """Quote a string for the DOT language"""
    return '"' + s.replace('\\', '\\\\').replace('"', '\\"') + '"'

def print_inclusion_graph():
    """Prints the inclusion graph in DOT format"""

    product_style = "shape=ellipse, color=blue, fill=cornflowerblue"
    group_style = "shape=box, color=darkblue"
    print("digraph {")
    for (name, product) in products.items():
        gname = dot_str("PRODUCT:"+name)
        print (gname, f"[{product_style}, label={dot_str(name)}];")
        if 'include' in product:
            for i in product['include']:
                print(gname, "->", dot_str(i), ";")
    for (name, group) in groups.items():
        gname = dot_str(name)
        print (gname, f"[{group_style}];")
        if 'include' in group:
            for i in group['include']:
                print(gname, "->", dot_str(i), ";")
    print("}")

if __name__ == '__main__':
    trim_groups_include()
    print_inclusion_graph()
