#
# 6300-dx.cfg -- support macros for the Atheros AR9331 based 6300-DX
#
# (C) Copyright 2013 -- greg.ungerer@accelecon.com
#

#
# Simple parallel port jtag dongle for ejtag on mips.
#
interface parport
parport_port 0
parport_cable wiggler

adapter_khz 5000

adapter_nsrst_delay 100
jtag_ntrst_delay 100

reset_config trst_only
#reset_config none
#reset_config srst_only
#reset_config trst_and_srst separate
#reset_config trst_and_srst

#
# CPU initialization section
#
set CHIPNAME ar9331

jtag newtap $CHIPNAME cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 1

set TARGETNAME $CHIPNAME.cpu
target create $TARGETNAME mips_m4k -endian big -chain-position $TARGETNAME

#
# PLL support macros
#
proc pll-init { } {
	mww 0x18050008 0x00018004
	mww 0x18050004 0x00000352
	mww 0x18050000 0x40818000
	mww 0x18050010 0x001003e8
	mww 0x18050000 0x00818000
	mww 0x18050008 0x00008000
}

#
# UART support macros
#
proc uart-init { } {
	# Enable UART multifunction pins
	mww 0x18040028 0x000480fa
	# Initialize UART for 11500,8,n,1
	mww 0x18020008 0x000c2000
	mww 0x18020004 0x00000188
}

proc uart-putch { c } {
	set uch [expr $c | 0x200]
	mww 0x18020000 $uch
}

#
# Memory initialization
#
proc mem-init { } {
	# set the TAP_CONTROL words
	mww 0x1800001c 0xf
	mww 0x18000020 0xf

	# set DDR_DDR2_CONFIG
	mww 0x1800008c 0x00000a59
	# set DDR_CONFIGs
	mww 0x18000000 0x7fbc8cd0
	mww 0x18000004 0x9dd0e6a8

	# send PRECHARGE ALL cycle
	mww 0x18000010 0x8
	sleep 1000
	# send MRS update cycle
	mww 0x18000010 0x1
	sleep 1000

	# set DDR_EXTENDED_MODE 
	mww 0x1800000c 0x402
	sleep 1000
	# send EMRS update cycle
	mww 0x18000010 0x2
	sleep 1000
	# send PRECHARGE ALL cycle
	mww 0x18000010 0x8
	sleep 1000

	# set DDR_MODE
	mww 0x18000008 0xa33
	sleep 1000
	# send MRS update cycle
	mww 0x18000010 0x1
	sleep 1000

	# set DDR_REFRESH
	mww 0x18000014 0x40c3
	sleep 1000
	# set DDR_RD_DATA_THIS_CYCLE
	mww 0x18000018 0xff
}

#
# SPI flash support macros
#
# These are manually driven macros that directly bit-bang the SPI interface
# using jtag commands only. They work, but are extremetly slow through the
# parallel port jtag interface.
#
proc spi-bit-banger {{val 1}} {
	set data $val
	set cnt 7
	while {$cnt >= 0} {
		set bitlo [expr 0x00060000 | (($data >> $cnt) & 0x01)]
		set bithi [expr 0x00060100 | (($data >> $cnt) & 0x01)]
		mww 0x1f000008 $bitlo
		mww 0x1f000008 $bithi
        	incr cnt -1
	}
}

proc spi-read-id { } {
	mww 0x1f000000 0x1

	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0x9f

	set cnt 0
	while {$cnt < 24} {
        	mww 0x1f000008 0x00060001
        	mww 0x1f000008 0x00060101
        	incr cnt 1
	}
	mww 0x1f000008 0x00060001

	mww 0x1f000008 0x00070000
	mdw 0x1f00000c
	mww 0x1f000000 0
}

proc spi-write-enable { } {
	mww 0x1f000000 0x1
	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0x06
	mww 0x1f000008 0x00070000
	mww 0x1f000000 0
}

proc spi-chip-erase { } {
	spi-write-enable
	mww 0x1f000000 0x1
	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0xc7
	mww 0x1f000008 0x00070000
	mww 0x1f000000 0
}

proc spi-send-addr { addr } {
	set byte [expr ($addr & 0x00ff0000) >> 16]
	spi-bit-banger $byte
	set byte [expr ($addr & 0x0000ff00) >> 8]
	spi-bit-banger $byte
	set byte [expr $addr & 0x0000000ff]
	spi-bit-banger $byte
}

proc spi-read-bytes { addr } {
	mww 0x1f000000 0x1

	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0x03
	spi-send-addr $addr

	set cnt 0
	while {$cnt < 32} {
        	mww 0x1f000008 0x00060001
        	mww 0x1f000008 0x00060101
        	incr cnt 1
	}
	mww 0x1f000008 0x00060001

	mww 0x1f000008 0x00070000
	mdw 0x1f00000c
	mww 0x1f000000 0
}

proc spi-erase-sector { addr } {
	spi-write-enable
	mww 0x1f000000 0x1
	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0x20
	spi-send-addr $addr
	mww 0x1f000008 0x00070000
	mww 0x1f000000 0
}

proc spi-write-2bytes { addr byte0 byte1 } {
	#puts "ADDRESS $addr  ->  $byte0 $byte1"
	spi-write-enable
	mww 0x1f000000 0x1
	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0xad
	spi-send-addr $addr
	spi-bit-banger $byte0
	spi-bit-banger $byte1
	mww 0x1f000008 0x00070000
	mww 0x1f000000 0
}

proc spi-write-page-header { addr } {
	spi-write-enable
	mww 0x1f000000 0x1
	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0x02
	spi-send-addr $addr
}
proc spi-write-page-tail { } {
	mww 0x1f000008 0x00070000
	mww 0x1f000000 0
}

proc spi-write-page { addr } {
	spi-write-enable
	mww 0x1f000000 0x1
	mww 0x1f000008 0x00070000
	mww 0x1f000008 0x00060000
	spi-bit-banger 0x02
	spi-send-addr $addr
	spi-write-page-data
	mww 0x1f000008 0x00070000
	mww 0x1f000000 0
}

#
# Macro to support the fast flash programming code. This is using the coded
# "flasher" program that runs in the board RAM (which must be initialized by
# the jtag interface first). Basically just reset and halt the CPU first and
# run this macro. It will output status and progress on the serial port
# console. It expects that you will send it the boot loader over the serial
# port (which is much quicker than loading it through the jtag interface).
#
proc flash-program { } {
	pll-init
	uart-init
	mem-init
	load_image ../../misc/mips/ar9331/flasher
	reg pc 0
	resume
}

