# Accelerated Concepts 5400-RM

source [find tools/openocd/platforms/kirkwood/88f6281.tcl]
source [find tools/openocd/platforms/common/utils.tcl]

proc sc5400rm_init { } {

	88f6281_init

	# setup dram
	dram_400

	# Multi purpose pin setup
	#  MPP  0 to 7
	mww 0xD0010000 0x01111111
	#  MPP  8 to 15
	mww 0xD0010004 0x00003300
	#  MPP 16 to 23
	mww 0xD0010008 0x00001100
	#  MPP 24 to 31
	mww 0xD001000c 0x00000000
	#  MPP 32 to 39
	mww 0xD0010010 0x00000000
	#  MPP 40 to 47
	mww 0xD0010014 0x00000000
	#  MPP 48 to 49
	mww 0xD0010018 0x00000000

	# Enable GPIO input/outputs
	#  GPIO low
	mww 0xD0010104 0xfffe1c7f
	#  GPIO high
	mww 0xD0010144 0xffffe087

	# Set initial GPIO output values
	#  enable USB
	mww 0xD0010100 0x00000080

	#  turn LEDs on then off

	mww 0xD0010100 0x00000080
	mww 0xD0010140 0x00000000
	# was 0x00000000 - turn buzzer on for now (Signal Strength 5 off)
	mww 0xD0010140 0x00001000
	sleep 1000
	mww 0xD0010100 0x00016380
	# was 0x00001f08 - turn buzzer off for now (Signal Strength 5 on)
	mww 0xD0010140 0x00000f08

	# NAND controller settings
	#  NAND Read Parameters Register
	mww 0xD0010418 0x000a028f
	#  NAND Write Parameters Register
	mww 0xD001041C 0x00010305
	#  NAND Flash Control Register
	mww 0xD0010470 0x00C7C741

	# set MPP RGMII PADS Voltage to 1.8V
	mww 0xD00100E0 0x1B1B9B9B
}

proc sc5400rm_set_led { led {mode on} } {
	puts "led $led, mode $mode"
	switch $led {
	LED0 {set bit 8}
	LED1 {set bit 9}
	LED2 {set bit 13}
	LED3 {set bit 14}
	LED4 {set bit 16}
	LED5 {set bit 35}
	LED6 {set bit 40}
	LED7 {set bit 41}
	LED8 {set bit 42}
	BUZZER {set bit 44}
	}
	set addr 0xD0010100
	if {$bit >= 32} {
		set bit [expr $bit - 32]
		set addr [expr $addr + 0x40]
	}
	set val [mrw $addr]
	if {$mode == "on"} {
		set val [expr $val & ~(1 << $bit)]
	} else {
		set val [expr $val | (1 << $bit)]
	}
	mww $addr $val
}

proc sc5400rm_test_leds { } {
	puts "All LED's off"
	foreach led {LED0 LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8} {
		sc5400rm_set_led $led off
	}
	sleep 1000
	puts "All LED's on"
	foreach led {LED0 LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8} {
		sc5400rm_set_led $led on
	}
	sleep 1000
	puts "All LED's off"
	foreach led {LED0 LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8} {
		sc5400rm_set_led $led off
	}
	sleep 1000
	puts "All LED's flash (4 times)"
	foreach led {LED0 LED1 LED2 LED3 LED4 LED5 LED6 LED7 LED8} {
		puts "$led ..."
		foreach mode {on off on off on off on off} {
			sc5400rm_set_led $led $mode
			sleep 300
		}
	}
}

proc sc5400rm_test_buzzer { } {
	# BUZZER has inverse logic to LEDs
	sc5400rm_set_led BUZZER off
	sleep 1000
	sc5400rm_set_led BUZZER on
}

proc load_uboot { } {
	# load u-Boot into RAM and execute it
	load_image boot/u-boot/u-boot
	resume 0x00600000
}

proc memtest { } {
	# Turn on processor i-cache
	arm mcr 15 0 1 0 0 0x1000
	load_image tmp/memtest
	resume 0
}

proc sc5400rm_reset { } {
	# Make sure processor is in ARM mode
	reset
	# Disable MMU, I-cache, D-cache
	arm mcr 15 0 1 0 0 0
}

init
sc5400rm_init
load_uboot
